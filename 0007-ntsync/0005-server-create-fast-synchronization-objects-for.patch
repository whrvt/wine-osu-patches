From: Elizabeth Figura <zfigura@codeweavers.com>
Date: Thu, 11 Mar 2021 16:45:30 -0600
Subject: [PATCH 05/32] server: Create fast synchronization objects for
 semaphores.

---
 server/fast_sync.c | 48 ++++++++++++++++++++++++++++++++++++++++------
 server/object.h    |  1 +
 server/semaphore.c | 25 ++++++++++++++++++++++--
 3 files changed, 66 insertions(+), 8 deletions(-)

diff --git a/server/fast_sync.c b/server/fast_sync.c
index 3100abd2630..7b21f54e2b6 100644
--- a/server/fast_sync.c
+++ b/server/fast_sync.c
@@ -81,7 +81,7 @@ static const struct fd_ops fast_sync_fd_ops =
 {
     default_fd_get_poll_events,     /* get_poll_events */
     default_poll_event,             /* poll_event */
-    fast_sync_get_fd_type,       /* get_fd_type */
+    fast_sync_get_fd_type,          /* get_fd_type */
     no_fd_read,                     /* read */
     no_fd_write,                    /* write */
     no_fd_flush,                    /* flush */
@@ -160,8 +160,9 @@ struct fast_sync
 
 static void linux_obj_dump( struct object *obj, int verbose );
 static void linux_obj_destroy( struct object *obj );
+static struct fd *linux_obj_get_fd( struct object *obj );
 
-static const struct object_ops fast_sync_ops =
+static const struct object_ops linux_obj_ops =
 {
     sizeof(struct fast_sync),   /* size */
     &no_type,                   /* type */
@@ -171,7 +172,7 @@ static const struct object_ops fast_sync_ops =
     NULL,                       /* signaled */
     NULL,                       /* satisfied */
     no_signal,                  /* signal */
-    no_get_fd,                  /* get_fd */
+    linux_obj_get_fd,           /* get_fd */
     default_map_access,         /* map_access */
     default_get_sd,             /* get_sd */
     default_set_sd,             /* set_sd */
@@ -189,22 +190,29 @@ static const struct object_ops fast_sync_ops =
 static void linux_obj_dump( struct object *obj, int verbose )
 {
     struct fast_sync *fast_sync = (struct fast_sync *)obj;
-    assert( obj->ops == &fast_sync_ops );
+    assert( obj->ops == &linux_obj_ops );
     fprintf( stderr, "Fast synchronization object type=%u fd=%p\n", fast_sync->type, fast_sync->fd );
 }
 
 static void linux_obj_destroy( struct object *obj )
 {
     struct fast_sync *fast_sync = (struct fast_sync *)obj;
-    assert( obj->ops == &fast_sync_ops );
+    assert( obj->ops == &linux_obj_ops );
     if (fast_sync->fd) release_object( fast_sync->fd );
 }
 
+static struct fd *linux_obj_get_fd( struct object *obj )
+{
+    struct fast_sync *fast_sync = (struct fast_sync *)obj;
+    assert( obj->ops == &linux_obj_ops );
+    return (struct fd *)grab_object( fast_sync->fd );
+}
+
 static struct fast_sync *create_fast_sync( enum fast_sync_type type, int unix_fd )
 {
     struct fast_sync *fast_sync;
 
-    if (!(fast_sync = alloc_object( &fast_sync_ops )))
+    if (!(fast_sync = alloc_object( &linux_obj_ops )))
     {
         close( unix_fd );
         return NULL;
@@ -258,6 +266,28 @@ struct fast_sync *fast_create_event( enum fast_sync_type type, int signaled )
     return create_fast_sync( type, args.event );
 }
 
+struct fast_sync *fast_create_semaphore( unsigned int count, unsigned int max )
+{
+    struct ntsync_sem_args args = {0};
+    struct linux_device *device;
+    struct fast_sync *fast_sync;
+
+    if (!(device = get_linux_device())) return NULL;
+
+    args.count = count;
+    args.max = max;
+    if (ioctl( get_unix_fd( device->fd ), NTSYNC_IOC_CREATE_SEM, &args ) < 0)
+    {
+        file_set_error();
+        release_object( device );
+        return NULL;
+    }
+
+    release_object( device );
+
+    return create_fast_sync( FAST_SYNC_SEMAPHORE, args.sem );
+}
+
 void fast_set_event( struct fast_sync *fast_sync )
 {
     __u32 count;
@@ -288,6 +318,12 @@ struct fast_sync *fast_create_event( enum fast_sync_type type, int signaled )
     return NULL;
 }
 
+struct fast_sync *fast_create_semaphore( unsigned int count, unsigned int max )
+{
+    set_error( STATUS_NOT_IMPLEMENTED );
+    return NULL;
+}
+
 void fast_set_event( struct fast_sync *fast_sync )
 {
 }
diff --git a/server/object.h b/server/object.h
index 5e2a4e246e4..237f55a3c9c 100644
--- a/server/object.h
+++ b/server/object.h
@@ -227,6 +227,7 @@ extern void abandon_mutexes( struct thread *thread );
 /* fast-synchronization functions */
 
 extern struct fast_sync *fast_create_event( enum fast_sync_type type, int signaled );
+extern struct fast_sync *fast_create_semaphore( unsigned int count, unsigned int max );
 extern void fast_set_event( struct fast_sync *obj );
 extern void fast_reset_event( struct fast_sync *obj );
 
diff --git a/server/semaphore.c b/server/semaphore.c
index 1a89bd0886b..99409198d68 100644
--- a/server/semaphore.c
+++ b/server/semaphore.c
@@ -55,12 +55,15 @@ struct semaphore
     struct object  obj;    /* object header */
     unsigned int   count;  /* current count */
     unsigned int   max;    /* maximum possible count */
+    struct fast_sync *fast_sync; /* fast synchronization object */
 };
 
 static void semaphore_dump( struct object *obj, int verbose );
 static int semaphore_signaled( struct object *obj, struct wait_queue_entry *entry );
 static void semaphore_satisfied( struct object *obj, struct wait_queue_entry *entry );
 static int semaphore_signal( struct object *obj, unsigned int access );
+static struct fast_sync *semaphore_get_fast_sync( struct object *obj );
+static void semaphore_destroy( struct object *obj );
 
 static const struct object_ops semaphore_ops =
 {
@@ -82,9 +85,9 @@ static const struct object_ops semaphore_ops =
     default_unlink_name,           /* unlink_name */
     no_open_file,                  /* open_file */
     no_kernel_obj_list,            /* get_kernel_obj_list */
-    no_get_fast_sync,              /* get_fast_sync */
+    semaphore_get_fast_sync,       /* get_fast_sync */
     no_close_handle,               /* close_handle */
-    no_destroy                     /* destroy */
+    semaphore_destroy              /* destroy */
 };
 
 
@@ -106,6 +109,7 @@ static struct semaphore *create_semaphore( struct object *root, const struct uni
             /* initialize it if it didn't already exist */
             sem->count = initial;
             sem->max   = max;
+            sem->fast_sync = NULL;
         }
     }
     return sem;
@@ -168,6 +172,23 @@ static int semaphore_signal( struct object *obj, unsigned int access )
     return release_semaphore( sem, 1, NULL );
 }
 
+static struct fast_sync *semaphore_get_fast_sync( struct object *obj )
+{
+    struct semaphore *semaphore = (struct semaphore *)obj;
+
+    if (!semaphore->fast_sync)
+        semaphore->fast_sync = fast_create_semaphore( semaphore->count, semaphore->max );
+    if (semaphore->fast_sync) grab_object( semaphore->fast_sync );
+    return semaphore->fast_sync;
+}
+
+static void semaphore_destroy( struct object *obj )
+{
+    struct semaphore *semaphore = (struct semaphore *)obj;
+
+    if (semaphore->fast_sync) release_object( semaphore->fast_sync );
+}
+
 /* create a semaphore */
 DECL_HANDLER(create_semaphore)
 {
-- 
2.46.0


