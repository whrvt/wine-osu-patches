From 8cdf1ad54a1b970c5d3d703a5429399375d20436 Mon Sep 17 00:00:00 2001
From: Elizabeth Figura <zfigura@codeweavers.com>
Date: Fri, 22 Apr 2022 00:11:14 +0300
Subject: [PATCH 22/32] server: Allow creating an event object for client-side
 user APC signaling.

---
 server/protocol.def |  7 +++++++
 server/thread.c     | 19 +++++++++++++++++++
 server/thread.h     |  1 +
 3 files changed, 27 insertions(+)

diff --git a/server/protocol.def b/server/protocol.def
index 8868c0bfc57..3c35f2e39ba 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -4245,3 +4245,10 @@ enum inproc_sync_type
 @REQ(unselect_inproc_queue)
     int          signaled;        /* was the queue signaled? */
 @END
+
+
+/* Get an event handle to be used for thread alerts with in-process synchronization */
+@REQ(get_inproc_alert_event)
+@REPLY
+    obj_handle_t handle;          /* handle to the event */
+@END
diff --git a/server/thread.c b/server/thread.c
index ea57e7303c0..cfd4c2c4256 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -312,6 +312,7 @@ static inline void init_thread_structure( struct thread *thread )
     thread->desc            = NULL;
     thread->desc_len        = 0;
     thread->inproc_sync     = NULL;
+    thread->inproc_alert_event = NULL;
     thread->exit_poll       = NULL;
 
     thread->creation_time = current_time;
@@ -621,6 +622,7 @@ static void destroy_thread( struct object *obj )
         fsync_free_shm_idx( thread->fsync_apc_idx );
     }
     if (thread->inproc_sync) release_object( thread->inproc_sync );
+    if (thread->inproc_alert_event) release_object( thread->inproc_alert_event );
 }
 
 /* dump a thread on stdout for debugging purposes */
@@ -1402,6 +1404,9 @@ static int queue_apc( struct process *process, struct thread *thread, struct thr
 
         if (do_esync() && queue == &thread->user_apc)
             esync_wake_fd( thread->esync_apc_fd );
+
+        if (apc->call.type == APC_USER && thread->inproc_alert_event)
+            set_event( thread->inproc_alert_event );
     }
 
     return 1;
@@ -1434,6 +1439,8 @@ void thread_cancel_apc( struct thread *thread, struct object *owner, enum apc_ty
         apc->executed = 1;
         wake_up( &apc->obj, 0 );
         release_object( apc );
+        if (list_empty( &thread->user_apc ) && thread->inproc_alert_event)
+            reset_event( thread->inproc_alert_event );
         return;
     }
 }
@@ -1448,6 +1455,9 @@ static struct thread_apc *thread_dequeue_apc( struct thread *thread, int system
     {
         apc = LIST_ENTRY( ptr, struct thread_apc, entry );
         list_remove( ptr );
+
+        if (list_empty( &thread->user_apc ) && thread->inproc_alert_event)
+            reset_event( thread->inproc_alert_event );
     }
 
     if (do_fsync() && list_empty( &thread->system_apc ) && list_empty( &thread->user_apc ))
@@ -2325,3 +2335,12 @@ DECL_HANDLER(get_next_thread)
     set_error( STATUS_NO_MORE_ENTRIES );
     release_object( process );
 }
+
+DECL_HANDLER(get_inproc_alert_event)
+{
+    if (!current->inproc_alert_event)
+        current->inproc_alert_event = create_event( NULL, NULL, 0, 1, !list_empty( &current->user_apc ), NULL );
+
+    if (current->inproc_alert_event)
+        reply->handle = alloc_handle( current->process, current->inproc_alert_event, SYNCHRONIZE, 0 );
+}
diff --git a/server/thread.h b/server/thread.h
index b5afb565ef4..06d861b2776 100644
--- a/server/thread.h
+++ b/server/thread.h
@@ -101,6 +101,7 @@ struct thread
     input_shm_t           *input_shared;  /* thread input shared memory ptr */
     struct completion_wait *completion_wait; /* completion port wait object the thread is associated with */
     struct inproc_sync    *inproc_sync;   /* in-process synchronization object */
+    struct event          *inproc_alert_event; /* in-process synchronization alert event */
 };
 
 extern struct thread *current;
-- 
2.47.1


