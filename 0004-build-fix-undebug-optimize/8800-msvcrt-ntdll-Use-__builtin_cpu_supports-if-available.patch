From 013a3f89383b4c489895d8d9e12806a86ec03ade Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Fri, 31 Jan 2025 13:20:08 -0800
Subject: [PATCH] msvcrt, ntdll: Use __builtin_cpu_supports if available.

---
 dlls/msvcrt/math.c  | 11 ++++++++++-
 dlls/ntdll/string.c | 22 ++++++++++++++++++++++
 2 files changed, 32 insertions(+), 1 deletion(-)

diff --git a/dlls/msvcrt/math.c b/dlls/msvcrt/math.c
index 9bcb5702103..e1d1d9873bf 100644
--- a/dlls/msvcrt/math.c
+++ b/dlls/msvcrt/math.c
@@ -92,18 +92,27 @@ void msvcrt_init_math( void *module )
         __cpuidex(regs, 7, 0);
         erms_supported = ((regs[1] >> 9) & 1);
     }
-
+#if !__has_builtin(__builtin_cpu_supports) || (defined(__clang__) && defined(_MSC_VER) && defined(_WIN32))
     __cpuid(regs, 1);
     if (IsProcessorFeaturePresent( PF_XSAVE_ENABLED ) && (regs[2] & (1 << 28)))
         avx_supported = (_xgetbv(0) & 0x6) == 0x6;
+#else
+    avx_supported = __builtin_cpu_supports("avx");
+#endif
 #endif
 
+#if !__has_builtin(__builtin_cpu_supports) || (defined(__clang__) && defined(_MSC_VER) && defined(_WIN32))
     sse2_supported = IsProcessorFeaturePresent( PF_XMMI64_INSTRUCTIONS_AVAILABLE );
+#else
+    sse2_supported = __builtin_cpu_supports("sse2");
+#endif
+
 #if _MSVCR_VER <=71
     sse2_enabled = FALSE;
 #else
     sse2_enabled = sse2_supported;
 #endif
+
 }
 #ifdef __DISABLE_AVX__
 #undef __DISABLE_AVX__
diff --git a/dlls/ntdll/string.c b/dlls/ntdll/string.c
index c74717fbd9c..0daf7e63a23 100644
--- a/dlls/ntdll/string.c
+++ b/dlls/ntdll/string.c
@@ -181,6 +181,8 @@ static FORCEINLINE BOOL erms_supported( void )
     return supported > 0;
 }
 
+#if !__has_builtin(__builtin_cpu_supports) || (defined(__clang__) && defined(_MSC_VER) && defined(_WIN32))
+
 static FORCEINLINE BOOL avx_supported( void )
 {
     static BOOL supported;
@@ -209,6 +211,26 @@ static FORCEINLINE BOOL sse2_supported( void )
     return supported > 0;
 }
 
+#else
+
+static FORCEINLINE BOOL avx_supported( void )
+{
+    static BOOL supported;
+    if (!supported)
+        supported = __builtin_cpu_supports("avx");
+    return supported > 0;
+}
+
+static FORCEINLINE BOOL sse2_supported( void )
+{
+    static BOOL supported;
+    if (!supported)
+        supported = __builtin_cpu_supports("sse2");
+    return supported > 0;
+}
+
+#endif
+
 #else
 #define erms_supported() 0
 #define sse2_supported() 0
-- 
2.48.1

