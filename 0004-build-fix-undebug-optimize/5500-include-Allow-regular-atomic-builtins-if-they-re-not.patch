From e681a9165e2708dd2128499d58582ac1175518ab Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Thu, 5 Dec 2024 19:25:37 -0800
Subject: [PATCH] include: Allow regular atomic builtins if they're not bugged.

---
 include/winnt.h | 6 ++++----
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/include/winnt.h b/include/winnt.h
index cf94ac3b034..be88d868c1e 100644
--- a/include/winnt.h
+++ b/include/winnt.h
@@ -7257,7 +7257,7 @@ static FORCEINLINE LONGLONG WINAPI InterlockedCompareExchange64( LONGLONG volati
 static FORCEINLINE LONG WINAPI InterlockedExchange( LONG volatile *dest, LONG val )
 {
     LONG ret;
-#if (__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ >= 7))
+#if defined(__clang__) || ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ >= 7)))
     ret = __atomic_exchange_n( dest, val, __ATOMIC_SEQ_CST );
 #elif defined(__i386__) || defined(__x86_64__)
     __asm__ __volatile__( "lock; xchgl %0,(%1)"
@@ -7316,7 +7316,7 @@ static FORCEINLINE LONGLONG WINAPI InterlockedDecrement64( LONGLONG volatile *de
 static FORCEINLINE void * WINAPI InterlockedExchangePointer( void *volatile *dest, void *val )
 {
     void *ret;
-#if (__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ >= 7))
+#if defined(__clang__) || ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ >= 7)))
     ret = __atomic_exchange_n( dest, val, __ATOMIC_SEQ_CST );
 #elif defined(__x86_64__)
     __asm__ __volatile__( "lock; xchgq %0,(%1)" : "=r" (ret) :"r" (dest), "0" (val) : "memory" );
@@ -7353,7 +7353,7 @@ static FORCEINLINE void MemoryBarrier(void)
     __sync_synchronize();
 }
 
-#if defined(__x86_64__) || defined(__i386__)
+#if !(defined(__clang__) || (__GNUC__ > 6)) && (defined(__x86_64__) || defined(__i386__))
 /* On x86, Support old GCC with either no or buggy (GCC BZ#81316) __atomic_* support */
 #define __WINE_ATOMIC_LOAD_ACQUIRE(ptr, ret) do { *(ret) = *(ptr); __asm__ __volatile__( "" ::: "memory" ); } while (0)
 #define __WINE_ATOMIC_LOAD_RELAXED(ptr, ret) do { *(ret) = *(ptr); } while (0)
-- 
2.47.1

