Modified version of a modified version of a patch made by gonX patch made by Torge Matthies (openglfreak).
diff --git a/dlls/winepulse.drv/pulse.c b/dlls/winepulse.drv/pulse.c
index bf4c78d..a4b4fb9 100644
--- a/dlls/winepulse.drv/pulse.c
+++ b/dlls/winepulse.drv/pulse.c
@@ -113,8 +113,8 @@ static pa_mainloop *pulse_ml;
 static struct list g_phys_speakers = LIST_INIT(g_phys_speakers);
 static struct list g_phys_sources = LIST_INIT(g_phys_sources);
 
-static const REFERENCE_TIME MinimumPeriod = 30000;
-static const REFERENCE_TIME DefaultPeriod = 100000;
+static const REFERENCE_TIME MinimumPeriod = 2500;
+static const REFERENCE_TIME DefaultPeriod = 10000;
 
 static pthread_mutex_t pulse_mutex;
 static pthread_cond_t pulse_cond = PTHREAD_COND_INITIALIZER;

diff --git a/dlls/winepulse.drv/pulse.c b/dlls/winepulse.drv/pulse.c
index 11111111111..11111111111 100644
--- a/dlls/winepulse.drv/pulse.c
+++ b/dlls/winepulse.drv/pulse.c
@@ -938,11 +938,19 @@ static void pulse_probe_settings(pa_mainloop *ml, pa_context *ctx, int render, c
     if (length)
         *def_period = *min_period = pa_bytes_to_usec(10 * length, &ss);
 
-    if (*min_period < MinimumPeriod)
-        *min_period = MinimumPeriod;
+    const char* penv = getenv("STAGING_AUDIO_PERIOD");
+    int val;
+    if (!penv) {
+        if (*min_period < MinimumPeriod)
+            *min_period = MinimumPeriod;
 
-    if (*def_period < DefaultPeriod)
-        *def_period = DefaultPeriod;
+        if (*def_period < DefaultPeriod)
+            *def_period = DefaultPeriod;
+    }
+	   else if ((val = atoi(penv)) >= 0) {
+        *def_period = *min_period = val;
+        TRACE("Pulse audio period set to %d.\n", val);
+    }
 
     wfx->wFormatTag = WAVE_FORMAT_EXTENSIBLE;
     wfx->cbSize = sizeof(WAVEFORMATEXTENSIBLE) - sizeof(WAVEFORMATEX);
@@ -1343,6 +1351,13 @@ static NTSTATUS pulse_create_stream(void *args)
 
     stream->def_period = params->period;
 
+    const char* denv = getenv("STAGING_AUDIO_DURATION");
+    if (denv) {
+        int val = atoi(denv);
+        params->duration = val;
+        TRACE("Pulse audio duration set to %d.\n", val);
+    }
+
     stream->period_bytes = pa_frame_size(&stream->ss) * muldiv(params->period,
                                                                stream->ss.rate,
                                                                10000000);
