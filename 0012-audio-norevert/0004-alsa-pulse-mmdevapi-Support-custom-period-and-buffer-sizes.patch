From d330b2b142aedf06cc54bfa3fe5f750d2ed31bbf Mon Sep 17 00:00:00 2001
From: whrvt <william@horvath.blog>
Date: Tue, 25 Jun 2024 05:29:02 +0000
Subject: [PATCH] alsa,pulse,mmdevapi: Support custom period and buffer sizes.

Relevant environment variables are: 
ALSA_EXTRA_PAD (units: usecs*10; default is 40000, can be set to 0, adds extra padding)
STAGING_AUDIO_PERIOD (units: usecs*10)
STAGING_AUDIO_DURATION (units: usecs*10)

Also, silence pcm.c underrun errors.

diff --git a/dlls/winealsa.drv/alsa.c b/dlls/winealsa.drv/alsa.c
index 11111111111..11111111111 100644
--- a/dlls/winealsa.drv/alsa.c
+++ b/dlls/winealsa.drv/alsa.c
@@ -82,10 +82,10 @@ struct alsa_stream
     pthread_mutex_t lock;
 };
 
-#define EXTRA_SAFE_RT 40000
+REFERENCE_TIME EXTRA_SAFE_RT = 40000;
 
-static const REFERENCE_TIME def_period = 100000;
-static const REFERENCE_TIME min_period = 50000;
+REFERENCE_TIME def_period = 1000;
+REFERENCE_TIME min_period = 500;
 
 static const WCHAR drv_keyW[] = {'S','o','f','t','w','a','r','e','\\',
     'W','i','n','e','\\','D','r','i','v','e','r','s','\\',
@@ -810,6 +810,19 @@ static NTSTATUS alsa_create_stream(void *args)
 
     params->result = S_OK;
 
+    const char* esrtenv = getenv("ALSA_EXTRA_PAD");
+
+    REFERENCE_TIME esrtval;
+
+    if (esrtenv) {
+        esrtval = atol(esrtenv);
+        if (esrtval >= 0) EXTRA_SAFE_RT = esrtval; // failsafe
+        MESSAGE("ALSA padding:\t%llu\n", EXTRA_SAFE_RT);
+    }
+    else {
+        TRACE("ALSA padding:\t%llu\t(default)\n", EXTRA_SAFE_RT);
+    }
+
     stream = calloc(1, sizeof(*stream));
     if(!stream){
         params->result = E_OUTOFMEMORY;
@@ -1008,10 +1021,10 @@ static NTSTATUS alsa_create_stream(void *args)
 
     pthread_mutex_init(&stream->lock, NULL);
 
-    TRACE("ALSA period: %lu frames\n", stream->alsa_period_frames);
-    TRACE("ALSA buffer: %lu frames\n", stream->alsa_bufsize_frames);
-    TRACE("MMDevice period: %u frames\n", stream->mmdev_period_frames);
-    TRACE("MMDevice buffer: %u frames\n", stream->bufsize_frames);
+    MESSAGE("PIPEWIRE_ALSA period: %lu frames\n", stream->alsa_period_frames);
+    MESSAGE("PIPEWIRE_ALSA buffer: %lu frames\n", stream->alsa_bufsize_frames);
+    MESSAGE("MMDevAPI period: %u frames\n", stream->mmdev_period_frames);
+    MESSAGE("MMDevAPI buffer: %u frames\n", stream->bufsize_frames);
 
 exit:
     free(sw_params);
@@ -1280,7 +1295,7 @@ static snd_pcm_sframes_t alsa_write_best_effort(struct alsa_stream *stream, BYTE
         WARN("writei failed, recovering: %ld (%s)\n", written,
                 snd_strerror(written));
 
-        ret = snd_pcm_recover(stream->pcm_handle, written, 0);
+        ret = snd_pcm_recover(stream->pcm_handle, written, 1);
         if(ret < 0){
             WARN("Could not recover: %d (%s)\n", ret, snd_strerror(ret));
             return ret;
@@ -1454,7 +1469,7 @@ static void alsa_read_data(struct alsa_stream *stream)
 
         WARN("read failed, recovering: %ld (%s)\n", nread, snd_strerror(nread));
 
-        ret = snd_pcm_recover(stream->pcm_handle, nread, 0);
+        ret = snd_pcm_recover(stream->pcm_handle, nread, 1);
         if(ret < 0){
             WARN("Recover failed: %d (%s)\n", ret, snd_strerror(ret));
             return;

Modified version of a modified version of a modified version of a patch made by gonX made by Torge Matthies (openglfreak) made by spectator.
diff --git a/dlls/winepulse.drv/pulse.c b/dlls/winepulse.drv/pulse.c
index 11111111111..11111111111 100644
--- a/dlls/winepulse.drv/pulse.c
+++ b/dlls/winepulse.drv/pulse.c
@@ -935,6 +935,13 @@ static void pulse_probe_settings(pa_mainloop *ml, pa_context *ctx, int render, c
     if (length)
         *def_period = *min_period = pa_bytes_to_usec(10 * length, &ss);
 
+    const char* penv = getenv("STAGING_AUDIO_PERIOD");
+    int val;
+    if (penv && (val = atoi(penv)) >= 0) {
+        *def_period = *min_period = val;
+        TRACE("Pulse audio period set to %d.\n", val);
+    }
+
     wfx->wFormatTag = WAVE_FORMAT_EXTENSIBLE;
     wfx->cbSize = sizeof(WAVEFORMATEXTENSIBLE) - sizeof(WAVEFORMATEX);
 
@@ -1332,6 +1339,20 @@ static NTSTATUS pulse_create_stream(void *args)
     if (FAILED(hr))
         goto exit;
 
+    const char* penv = getenv("STAGING_AUDIO_PERIOD");
+    int periodval;
+    if ((stream->dataflow == eRender) && penv && (periodval = atoi(penv)) >= 0) {
+        params->period = periodval;
+        TRACE("Pulse audio period set to %d.\n", periodval);
+    }
+
+    const char* denv = getenv("STAGING_AUDIO_DURATION");
+    int durationval;
+    if ((stream->dataflow == eRender) && denv && (durationval = atoi(denv)) >= 0) {
+        params->duration = durationval;
+        TRACE("Pulse audio duration set to %d.\n", durationval);
+    }
+
     stream->def_period = params->period;
 
     stream->period_bytes = pa_frame_size(&stream->ss) * muldiv(params->period,
diff --git a/dlls/mmdevapi/client.c b/dlls/mmdevapi/client.c
index 11111111111..11111111111 100644
--- a/dlls/mmdevapi/client.c
+++ b/dlls/mmdevapi/client.c
@@ -102,7 +102,7 @@ static inline struct audio_client *impl_from_IAudioStreamVolume(IAudioStreamVolu
 static HRESULT get_periods(struct audio_client *client,
                            REFERENCE_TIME *def_period, REFERENCE_TIME *min_period)
 {
-    static const REFERENCE_TIME min_def_period = 100000; /* 10 ms */
+    static const REFERENCE_TIME min_def_period = 1000; /* 0.1 ms */
     struct get_device_period_params params;
 
     params.device     = client->device_name;
@@ -132,13 +132,29 @@ static HRESULT adjust_timing(struct audio_client *client, const BOOLEAN force_de
 
     TRACE("Device periods: %lu default and %lu minimum\n", (ULONG)def_period, (ULONG)min_period);
 
+    BOOL custom = FALSE;
     if (mode == AUDCLNT_SHAREMODE_SHARED) {
-        if (*period == 0 || force_def_period)
-            *period = def_period;
-        else if (*period < min_period)
-            return AUDCLNT_E_INVALID_DEVICE_PERIOD;
-        if (*duration < 3 * *period)
-            *duration = 3 * *period;
+        const char* penv = getenv("STAGING_AUDIO_PERIOD");
+        const char* denv = getenv("STAGING_AUDIO_DURATION");
+        int periodval, durationval;
+        if (
+            ( client->dataflow == eRender ) && // Only set playback params
+            ( !(penv && denv) ||
+           !( ((periodval   = atoi(penv)) >= 0) &&
+              ((durationval = atoi(denv)) >= 0)))
+           )
+        { // Default
+            if (*period == 0 || force_def_period)
+                *period = def_period;
+            else if (*period < min_period)
+                return AUDCLNT_E_INVALID_DEVICE_PERIOD;
+            if (*duration < 3 * *period)
+                *duration = 3 * *period;
+        } else { // Custom
+            custom = TRUE;
+            *period = min_period = def_period = periodval;
+            *duration = durationval;
+        }
     } else {
         const WAVEFORMATEXTENSIBLE *fmtex = (WAVEFORMATEXTENSIBLE *)fmt;
         if (fmtex->Format.wFormatTag == WAVE_FORMAT_EXTENSIBLE &&
@@ -163,7 +179,11 @@ static HRESULT adjust_timing(struct audio_client *client, const BOOLEAN force_de
         }
     }
 
-    TRACE("Adjusted duration %lu and period %lu\n", (ULONG)*duration, (ULONG)*period);
+    if (custom) {
+        MESSAGE("Adjusted duration %lu and period %lu\n", (ULONG)*duration, (ULONG)*period);
+    } else {
+        TRACE("Adjusted duration %lu and period %lu\n", (ULONG)*duration, (ULONG)*period);
+    }
 
     return hr;
 }
@@ -1053,7 +1073,14 @@ static HRESULT WINAPI client_InitializeSharedAudioStream(IAudioClient3 *iface, D
     if (!format)
         return E_POINTER;
 
-    period = period_frames * (REFERENCE_TIME)10000000 / format->nSamplesPerSec;
+    const char* penv = getenv("STAGING_AUDIO_PERIOD");
+    int periodval;
+    if (penv && (periodval = atoi(penv)) >= 0) { // Custom
+        period = periodval;
+        TRACE("Audio period set to %d.\n", periodval);
+    } else { // Default
+        period = period_frames * (REFERENCE_TIME)10000000 / format->nSamplesPerSec;
+    }
 
     return stream_init(This, FALSE, AUDCLNT_SHAREMODE_SHARED, flags, 0, period, format, session_guid);
 }
