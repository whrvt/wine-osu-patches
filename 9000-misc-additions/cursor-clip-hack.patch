diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -981,5 +981,7 @@ static inline UINT asciiz_to_unicode( WCHAR *dst, const char *src )
     return (p - dst) * sizeof(WCHAR);
 }
 extern BOOL gl_disable_child_window_rendering;
+extern BOOL block_get_version;
+extern BOOL absolute_tablet_hack;
 
 #endif  /* __WINE_X11DRV_H */

diff --git a/dlls/winex11.drv/x11drv_main.c b/dlls/winex11.drv/x11drv_main.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/x11drv_main.c
+++ b/dlls/winex11.drv/x11drv_main.c
@@ -90,6 +90,8 @@ int xrender_error_base = 0;
 char *process_name = NULL;
 WNDPROC client_foreign_window_proc = NULL;
 BOOL gl_disable_child_window_rendering = TRUE;
+BOOL block_get_version = FALSE;
+BOOL absolute_tablet_hack = TRUE;
 
 static x11drv_error_callback err_callback;   /* current callback for error */
 static Display *err_callback_display;        /* display callback is set for */
@@ -772,6 +774,15 @@ static NTSTATUS x11drv_init( void *arg )
     X11DRV_InitKeyboard( gdi_display );
     X11DRV_InitMouse( gdi_display );
     if (use_xim) use_xim = xim_init( input_style );
+    {
+        const char *e = getenv("WINE_BLOCK_GET_VERSION");
+        if (e && *e != '\0' && *e != '0') block_get_version = TRUE;
+    }
+
+    {
+        const char *e = getenv("WINE_DISABLE_ABS_TABLET_HACK");
+        if (e && *e != '\0' && *e != '0') absolute_tablet_hack = FALSE;
+    }
 
     {
         const char *e = getenv("WINE_DISABLE_GLCHILD_HACK");

diff --git a/dlls/winex11.drv/mouse.c b/dlls/winex11.drv/mouse.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/mouse.c
+++ b/dlls/winex11.drv/mouse.c
@@ -1540,6 +1540,13 @@ BOOL X11DRV_GetCursorPos(LPPOINT pos)
  */
 BOOL X11DRV_ClipCursor( const RECT *clip, BOOL reset )
 {
+    static unsigned int once;
+    if (absolute_tablet_hack && block_get_version)
+    {
+        if (!once++)
+            MESSAGE("(X)Wayland absolute tablet hack enabled, which may cause cursor teleportation\n\texport WINE_DISABLE_ABS_TABLET_HACK=1 to disable.\n");
+        return TRUE;
+    }
     if (!reset && clip && grab_clipping_window( clip )) return TRUE;
     ungrab_clipping_window();
     return TRUE;
diff --git a/dlls/winewayland.drv/wayland_pointer.c b/dlls/winewayland.drv/wayland_pointer.c
index 11111111111..11111111111 100644
--- a/dlls/winewayland.drv/wayland_pointer.c
+++ b/dlls/winewayland.drv/wayland_pointer.c
@@ -898,6 +898,7 @@ void WAYLAND_SetCursor(HWND hwnd, HCURSOR hcursor)
  */
 BOOL WAYLAND_ClipCursor(const RECT *clip, BOOL reset)
 {
+    return TRUE;
     struct wayland_pointer *pointer = &process_wayland.pointer;
     struct wl_surface *wl_surface = NULL;
     struct wayland_surface *surface = NULL;
