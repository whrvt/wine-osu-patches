diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/file.c
+++ b/dlls/ntdll/unix/file.c
@@ -6883,7 +6883,7 @@ NTSTATUS WINAPI NtReadFile( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc, vo
     status = server_get_unix_fd( handle, FILE_READ_DATA, &unix_handle, &needs_close, &type, &options );
     if (status && status != STATUS_BAD_DEVICE_TYPE) return status;
 
-    if (!virtual_check_buffer_for_write( buffer, length )) return STATUS_ACCESS_VIOLATION;
+    if (!check_buffer_write_access( buffer, length )) return STATUS_ACCESS_VIOLATION;
 
     if (status == STATUS_BAD_DEVICE_TYPE)
         return server_read_file( handle, event, apc, apc_user, io, buffer, length, offset, key );
@@ -7679,7 +7679,7 @@ NTSTATUS WINAPI NtFlushBuffersFile( HANDLE handle, IO_STATUS_BLOCK *io )
     enum server_fd_type type;
     int fd, needs_close;
 
-    if (!io || !virtual_check_buffer_for_write( io, sizeof(*io) )) return STATUS_ACCESS_VIOLATION;
+    if (!io || !check_buffer_write_access( io, sizeof(*io) )) return STATUS_ACCESS_VIOLATION;
 
     ret = server_get_unix_fd( handle, FILE_WRITE_DATA, &fd, &needs_close, &type, NULL );
     if (ret == STATUS_ACCESS_DENIED)
#diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
#index 11111111111..11111111111 100644
#--- a/dlls/ntdll/unix/server.c
#+++ b/dlls/ntdll/unix/server.c
#@@ -538,7 +538,7 @@ unsigned int CDECL wine_server_call( void *req_ptr )
# 
#     /* trigger write watches, otherwise read() might return EFAULT */
#     if (req->u.req.request_header.reply_size &&
#-        !virtual_check_buffer_for_write( req->reply_data, req->u.req.request_header.reply_size ))
#+        !check_buffer_write_access( req->reply_data, req->u.req.request_header.reply_size ))
#     {
#         return STATUS_ACCESS_VIOLATION;
#     }
diff --git a/dlls/ntdll/unix/socket.c b/dlls/ntdll/unix/socket.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/socket.c
+++ b/dlls/ntdll/unix/socket.c
@@ -875,7 +875,7 @@ static NTSTATUS sock_recv( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc, voi
 
     for (i = 0; i < async->count; ++i)
     {
-        if (!virtual_check_buffer_for_write( async->iov[i].iov_base, async->iov[i].iov_len ))
+        if (!check_buffer_write_access( async->iov[i].iov_base, async->iov[i].iov_len ))
         {
             release_fileio( &async->io );
             return STATUS_ACCESS_VIOLATION;
diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -284,6 +284,7 @@ extern ssize_t virtual_locked_recvmsg( int fd, struct msghdr *hdr, int flags ) D
 extern BOOL virtual_is_valid_code_address( const void *addr, SIZE_T size );
 extern void *virtual_setup_exception( void *stack_ptr, size_t size, EXCEPTION_RECORD *rec );
 extern BOOL virtual_check_buffer_for_read( const void *ptr, SIZE_T size );
+extern BOOL virtual_check_buffer_write_access( void *ptr, SIZE_T size );
 extern BOOL virtual_check_buffer_for_write( void *ptr, SIZE_T size );
 extern SIZE_T virtual_uninterrupted_read_memory( const void *addr, void *buffer, SIZE_T size );
 extern NTSTATUS virtual_uninterrupted_write_memory( void *addr, const void *buffer, SIZE_T size );
@@ -519,6 +520,13 @@ static inline ULONG_PTR get_zero_bits_limit( ULONG_PTR zero_bits )
     return (~(UINT64)0) >> shift;
 }
 
+static inline BOOL check_buffer_write_access( void *ptr, SIZE_T size )
+{
+    if (size > 16384 && virtual_check_buffer_write_access( ptr, size ))
+        return TRUE;
+    return virtual_check_buffer_for_write( ptr, size );
+}
+
 
 enum loadorder
 {
diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/unix/virtual.c
+++ b/dlls/ntdll/unix/virtual.c
@@ -4394,6 +4394,27 @@ BOOL virtual_check_buffer_for_read( const void *ptr, SIZE_T size )
 }
 
 
+/***********************************************************************
+ *           virtual_check_buffer_write_access
+ * Check if a memory buffer is writable.
+ */
+BOOL virtual_check_buffer_write_access( void *ptr, SIZE_T size )
+{
+    size_t i;
+    char *addr;
+
+    if (!size) return TRUE;
+    if (!ptr) return FALSE;
+
+    addr = ROUND_ADDR( ptr, page_mask );
+    size = ROUND_SIZE( ptr, size );
+    for (i = 0; i < size; i += page_size)
+        if (!(get_unix_prot( get_page_vprot( addr + i ) ) & PROT_WRITE))
+            return FALSE;
+    return TRUE;
+}
+
+
 /***********************************************************************
  *           virtual_check_buffer_for_write
  *
@@ -6058,7 +6079,7 @@ NTSTATUS WINAPI NtReadVirtualMemory( HANDLE process, const void *addr, void *buf
 {
     unsigned int status;
 
-    if (!virtual_check_buffer_for_write( buffer, size ))
+    if (!check_buffer_write_access( buffer, size ))
     {
         status = STATUS_ACCESS_VIOLATION;
         size = 0;
@@ -6464,7 +6485,7 @@ NTSTATUS WINAPI NtWow64ReadVirtualMemory64( HANDLE process, ULONG64 addr, void *
 
     if (size > MAXLONG) size = MAXLONG;
 
-    if (virtual_check_buffer_for_write( buffer, size ))
+    if (check_buffer_write_access( buffer, size ))
     {
         if (process == GetCurrentProcess())
         {
