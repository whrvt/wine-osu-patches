From c5cb3b993f3013317bcc9bfd2c46c0bd997cbb9b Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Sun, 8 Sep 2024 02:15:12 -0700
Subject: [PATCH] winebus: Fake-load driver if EnableWinebus isn't set to 1.

The registry key checked is a DWORD in HKLM\System\CurrentControlSet\Services\winebus.

This is just a simple method to disable winebus/hid/usb without ZwLoadDriver
complaining about not being able to load the driver.
---
 dlls/winebus.sys/main.c | 22 +++++++++++++++++-----
 1 file changed, 17 insertions(+), 5 deletions(-)

diff --git a/dlls/winebus.sys/main.c b/dlls/winebus.sys/main.c
index 11111111111..11111111111 100644
--- a/dlls/winebus.sys/main.c
+++ b/dlls/winebus.sys/main.c
@@ -963,7 +963,7 @@ static NTSTATUS fdo_pnp_dispatch(DEVICE_OBJECT *device, IRP *irp)
     case IRP_MN_START_DEVICE:
         mouse_device_create();
         keyboard_device_create();
-
+        
         if ((enable_sdl = check_bus_option(L"Enable SDL", 1)))
             enable_sdl = !sdl_driver_init();
         udev_driver_init(enable_sdl);
@@ -1363,10 +1363,21 @@ static void WINAPI driver_unload(DRIVER_OBJECT *driver)
     NtClose(driver_key);
 }
 
+static NTSTATUS WINAPI nop_one(void *a)
+{
+    return STATUS_SUCCESS;
+}
+
+static NTSTATUS WINAPI nop_two(void *a, void *b)
+{
+    return STATUS_SUCCESS;
+}
+
 NTSTATUS WINAPI DriverEntry( DRIVER_OBJECT *driver, UNICODE_STRING *path )
 {
     OBJECT_ATTRIBUTES attr = {0};
     NTSTATUS ret;
+    DWORD on;
 
     TRACE( "(%p, %s)\n", driver, debugstr_w(path->Buffer) );
 
@@ -1380,10 +1391,11 @@ NTSTATUS WINAPI DriverEntry( DRIVER_OBJECT *driver, UNICODE_STRING *path )
 
     driver_obj = driver;
 
-    driver->MajorFunction[IRP_MJ_PNP] = common_pnp_dispatch;
-    driver->MajorFunction[IRP_MJ_INTERNAL_DEVICE_CONTROL] = hid_internal_dispatch;
-    driver->DriverExtension->AddDevice = driver_add_device;
-    driver->DriverUnload = driver_unload;
+    on = check_bus_option(L"EnableWinebus", FALSE);
+    driver->MajorFunction[IRP_MJ_PNP] = on ? common_pnp_dispatch : nop_two;
+    driver->MajorFunction[IRP_MJ_INTERNAL_DEVICE_CONTROL] = on ? hid_internal_dispatch : nop_two;
+    driver->DriverExtension->AddDevice = on ? driver_add_device : nop_two;
+    driver->DriverUnload = on ? driver_unload : nop_one;
 
     return STATUS_SUCCESS;
 }
-- 
2.46.0

