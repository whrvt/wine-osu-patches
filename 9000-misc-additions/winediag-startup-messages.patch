From 285eb1f534b211ce34cf81b687eb96d4bcf454a1 Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Wed, 2 Apr 2025 00:27:23 -0700
Subject: [PATCH 1/2] ntdll: Make the staging_warn_event a permanent object.

Avoids printing it repeatedly.
---
 dlls/ntdll/loader.c | 9 ++++-----
 1 file changed, 4 insertions(+), 5 deletions(-)

diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
index 9a960aa8c3c..dc55371c982 100644
--- a/dlls/ntdll/loader.c
+++ b/dlls/ntdll/loader.c
@@ -4627,7 +4627,7 @@ void loader_init( CONTEXT *context, void **entry )
 {
     OBJECT_ATTRIBUTES staging_event_attr;
     UNICODE_STRING staging_event_string;
-    HANDLE staging_event;
+    HANDLE staging_event = 0;
     static int attach_done;
     NTSTATUS status;
     ULONG_PTR cookie, port = 0;
@@ -4722,17 +4722,16 @@ void loader_init( CONTEXT *context, void **entry )
          * add a comment here to try to prevent that. */
     }
     RtlInitUnicodeString( &staging_event_string, L"\\__wine_staging_warn_event" );
-    InitializeObjectAttributes( &staging_event_attr, &staging_event_string, OBJ_OPENIF, NULL, NULL );
+    InitializeObjectAttributes( &staging_event_attr, &staging_event_string, OBJ_OPENIF | OBJ_PERMANENT, NULL, NULL );
     if (NtCreateEvent( &staging_event, EVENT_ALL_ACCESS, &staging_event_attr, NotificationEvent, FALSE ) == STATUS_SUCCESS)
     {
         FIXME_(winediag)("wine-staging %s is a testing version containing experimental patches.\n", wine_get_version());
         FIXME_(winediag)("Please mention your exact version when filing bug reports on winehq.org.\n");
     }
     else
-    {
         WARN_(winediag)("wine-staging %s is a testing version containing experimental patches.\n", wine_get_version());
-        NtClose( staging_event );
-    }
+
+    NtClose( staging_event );
 
     NtCurrentTeb()->FlsSlots = fls_alloc_data();
 
-- 
2.49.0


From a875c9055ff7419cc792b34acaa53089d0bab25d Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Wed, 2 Apr 2025 03:05:34 -0700
Subject: [PATCH 2/2] wine: Consolidate and clean up startup messaging.

---
 dlls/ntdll/loader.c            | 53 ++++++++++++++++++++++++++--------
 dlls/ntdll/ntdll.spec          |  2 ++
 dlls/ntdll/unix/loader.c       |  2 ++
 dlls/ntdll/unix/sync.c         | 27 +++++++++++++++++
 dlls/ntdll/unix/unix_private.h |  2 ++
 dlls/ntdll/unixlib.h           |  1 +
 include/winternl.h             |  2 ++
 server/esync.c                 |  2 --
 server/fsync.c                 |  2 --
 server/inproc_sync.c           |  2 --
 server/main.c                  |  3 --
 11 files changed, 77 insertions(+), 21 deletions(-)

diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
index b6886775824..4444ef60cd0 100644
--- a/dlls/ntdll/loader.c
+++ b/dlls/ntdll/loader.c
@@ -44,6 +44,7 @@ WINE_DECLARE_DEBUG_CHANNEL(snoop);
 WINE_DECLARE_DEBUG_CHANNEL(loaddll);
 WINE_DECLARE_DEBUG_CHANNEL(imports);
 WINE_DECLARE_DEBUG_CHANNEL(winediag);
+WINE_DECLARE_DEBUG_CHANNEL(sync);
 
 #ifdef _WIN64
 #define DEFAULT_SECURITY_COOKIE_64  (((ULONGLONG)0x00002b99 << 32) | 0x2ddfa232)
@@ -3538,6 +3539,13 @@ unsigned int CDECL wine_server_call( void *req_ptr )
     return WINE_UNIX_CALL( unix_wine_server_call, req_ptr );
 }
 
+/***********************************************************************
+ *           __wine_get_sync_type
+ */
+NTSTATUS WINAPI __wine_get_sync_type(void)
+{
+    return WINE_UNIX_CALL( unix_wine_get_sync_type, NULL );
+}
 
 /***********************************************************************
  *           wine_server_fd_to_handle
@@ -4602,9 +4610,9 @@ static void release_address_space(void)
  */
 void loader_init( CONTEXT *context, void **entry )
 {
-    OBJECT_ATTRIBUTES staging_event_attr;
-    UNICODE_STRING staging_event_string;
-    HANDLE staging_event = 0;
+    OBJECT_ATTRIBUTES startup_event_attr;
+    UNICODE_STRING startup_event_string;
+    HANDLE startup_event = 0;
     static int attach_done;
     NTSTATUS status;
     ULONG_PTR cookie, port = 0;
@@ -4698,17 +4706,38 @@ void loader_init( CONTEXT *context, void **entry )
         /* This hunk occasionally applies in the wrong place;
          * add a comment here to try to prevent that. */
     }
-    RtlInitUnicodeString( &staging_event_string, L"\\__wine_staging_warn_event" );
-    InitializeObjectAttributes( &staging_event_attr, &staging_event_string, OBJ_OPENIF | OBJ_PERMANENT, NULL, NULL );
-    if (NtCreateEvent( &staging_event, EVENT_ALL_ACCESS, &staging_event_attr, NotificationEvent, FALSE ) == STATUS_SUCCESS)
+    if (FIXME_ON(winediag) || FIXME_ON(sync))
     {
-        FIXME_(winediag)("wine-staging %s is a testing version containing experimental patches.\n", wine_get_version());
-        FIXME_(winediag)("Please mention your exact version when filing bug reports on winehq.org.\n");
+        RtlInitUnicodeString( &startup_event_string, L"\\__wine_startup_event" );
+        InitializeObjectAttributes( &startup_event_attr, &startup_event_string, OBJ_OPENIF | OBJ_PERMANENT, NULL, NULL );
+        if (NtCreateEvent( &startup_event, EVENT_ALL_ACCESS, &startup_event_attr, NotificationEvent, FALSE ) == STATUS_SUCCESS)
+        {
+            if (FIXME_ON(sync))
+            {
+                NTSTATUS sync = __wine_get_sync_type();
+                if (sync < 0)
+                    MESSAGE("ntsync is explicitly disabled.\n");
+                switch (abs(sync))
+                {
+                case 1:
+                    MESSAGE("esync: up and running.\n");
+                    break;
+                case 2:
+                    MESSAGE("fsync: up and running.\n");
+                    break;
+                case 3:
+                    MESSAGE("wine: using fast synchronization.\n");
+                    break;
+                default:
+                    MESSAGE("wineserver: using server-side synchronization.\n");
+                    break;
+                }
+            }
+            if (FIXME_ON(winediag))
+                MESSAGE("winediag: this wine %s contains many experimental patches, please don't report bugs to winehq.org.\n", wine_get_version());
+        }
+        NtClose( startup_event );
     }
-    else
-        WARN_(winediag)("wine-staging %s is a testing version containing experimental patches.\n", wine_get_version());
-
-    NtClose( staging_event );
 
     NtCurrentTeb()->FlsSlots = fls_alloc_data();
 
diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
index e4443fd351d..4e45332cf72 100644
--- a/dlls/ntdll/ntdll.spec
+++ b/dlls/ntdll/ntdll.spec
@@ -1769,6 +1769,8 @@
 @ cdecl -norelay __wine_dbg_output(str)
 @ cdecl -norelay __wine_dbg_strdup(str)
 
+@ stdcall __wine_get_sync_type()
+
 # Version
 @ cdecl wine_get_version()
 @ cdecl wine_get_build_id()
diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
index dcb5f5826cf..cc1133ca178 100644
--- a/dlls/ntdll/unix/loader.c
+++ b/dlls/ntdll/unix/loader.c
@@ -1000,6 +1000,7 @@ static const unixlib_entry_t unix_call_funcs[] =
     unixcall_wine_server_handle_to_fd,
     unixcall_wine_spawnvp,
     system_time_precise,
+    unixcall_wine_get_sync_type,
 };
 
 
@@ -1019,6 +1020,7 @@ const unixlib_entry_t unix_call_wow64_funcs[] =
     wow64_wine_server_handle_to_fd,
     wow64_wine_spawnvp,
     system_time_precise,
+    unixcall_wine_get_sync_type,
 };
 
 #endif  /* _WIN64 */
diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index fd618156731..ceea18c943a 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -1293,6 +1293,33 @@ NTSTATUS do_ntsync(void)
 #endif
 
 
+NTSTATUS WINAPI __wine_get_sync_type(void)
+{
+    static NTSTATUS result = STATUS_PENDING;
+    if (result == STATUS_PENDING)
+    {
+        result = abs(STATUS_NO_WORK_DONE); /* server */
+        if (do_ntsync())
+            result = 3;
+        else if (do_fsync())
+            result = 2;
+        else if (do_esync())
+            result = 1;
+        if ((getenv( "WINE_DISABLE_FAST_SYNC" ) && atoi( getenv( "WINE_DISABLE_FAST_SYNC" ) )) ||
+            (getenv( "WINENTSYNC" ) && !atoi( getenv( "WINENTSYNC" ) )))
+            result = -result;
+    }
+    return result;
+}
+
+/***********************************************************************
+ *           unixcall_wine_get_sync_type
+ */
+NTSTATUS unixcall_wine_get_sync_type(void *args)
+{
+    return __wine_get_sync_type();
+}
+
 /******************************************************************************
  *              NtCreateSemaphore (NTDLL.@)
  */
diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index 702aa245597..2bea0fa4697 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -401,6 +401,8 @@ extern void dbg_init(void);
 extern void close_inproc_sync_obj( HANDLE handle );
 extern NTSTATUS do_ntsync(void);
 
+extern NTSTATUS unixcall_wine_get_sync_type(void *args);
+
 extern NTSTATUS call_user_apc_dispatcher( CONTEXT *context_ptr, unsigned int flags, ULONG_PTR arg1, ULONG_PTR arg2,
                                           ULONG_PTR arg3, PNTAPCFUNC func, NTSTATUS status );
 extern NTSTATUS call_user_exception_dispatcher( EXCEPTION_RECORD *rec, CONTEXT *context );
diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
index 63ed9dadb88..cfdf6825909 100644
--- a/dlls/ntdll/unixlib.h
+++ b/dlls/ntdll/unixlib.h
@@ -83,6 +83,7 @@ enum ntdll_unix_funcs
     unix_wine_server_handle_to_fd,
     unix_wine_spawnvp,
     unix_system_time_precise,
+    unix_wine_get_sync_type,
 };
 
 extern unixlib_handle_t __wine_unixlib_handle;
diff --git a/include/winternl.h b/include/winternl.h
index c9316d7b7de..53ec9d20908 100644
--- a/include/winternl.h
+++ b/include/winternl.h
@@ -5391,6 +5391,8 @@ static inline PLIST_ENTRY RemoveTailList(PLIST_ENTRY le)
 NTSYSAPI NTSTATUS WINAPI __wine_unix_spawnvp( char * const argv[], int wait );
 NTSYSAPI NTSTATUS __cdecl __wine_get_tsc_calibration( ULONGLONG *frequency, LONGLONG *offset );
 
+NTSYSAPI NTSTATUS WINAPI __wine_get_sync_type(void);
+
 /* The thread information for 16-bit threads */
 /* NtCurrentTeb()->SubSystemTib points to this */
 typedef struct
diff --git a/server/esync.c b/server/esync.c
index abf454ec100..a940ebc7a3a 100644
--- a/server/esync.c
+++ b/server/esync.c
@@ -100,8 +100,6 @@ void esync_init(void)
     if (ftruncate( shm_fd, shm_size ) == -1)
         perror( "ftruncate" );
 
-    fprintf( stderr, "esync: up and running.\n" );
-
     atexit( shm_cleanup );
 }
 
diff --git a/server/fsync.c b/server/fsync.c
index 3d14810e101..80a3e4e42d8 100644
--- a/server/fsync.c
+++ b/server/fsync.c
@@ -120,8 +120,6 @@ void fsync_init(void)
 
     is_fsync_initialized = 1;
 
-    fprintf( stderr, "fsync: up and running.\n" );
-
     shm_idx_free_map_size = 256;
     shm_idx_free_map = malloc( shm_idx_free_map_size * sizeof(*shm_idx_free_map) );
     memset( shm_idx_free_map, 0xff, shm_idx_free_map_size * sizeof(*shm_idx_free_map) );
diff --git a/server/inproc_sync.c b/server/inproc_sync.c
index 9562e4fc581..b0136fc7481 100644
--- a/server/inproc_sync.c
+++ b/server/inproc_sync.c
@@ -177,7 +177,6 @@ static struct linux_device *get_linux_device(void)
         return NULL;
     }
 
-    fprintf( stderr, "wine: using fast synchronization.\n" );
     linux_device_object = device;
     initialized = 1;
     return device;
@@ -193,7 +192,6 @@ int do_ntsync(void)
         if ((getenv( "WINE_DISABLE_FAST_SYNC" ) && atoi( getenv( "WINE_DISABLE_FAST_SYNC" ) )) ||
             (getenv( "WINENTSYNC" ) && !atoi( getenv( "WINENTSYNC" ) )))
         {
-            fprintf( stderr, "ntsync is explicitly disabled.\n" );
             do_ntsync_cached = 0;
         }
         /* lightweight permission check, full get_linux_device breaks when done at early startup */
diff --git a/server/main.c b/server/main.c
index eb8bda2f053..5864ef91ec4 100644
--- a/server/main.c
+++ b/server/main.c
@@ -237,9 +237,6 @@ int main( int argc, char *argv[] )
     if (do_esync())
         esync_init();
 
-    if (!do_fsync() && !do_esync() && !do_ntsync())
-        fprintf( stderr, "wineserver: using server-side synchronization.\n" );
-
     if (debug_level) fprintf( stderr, "wineserver: starting (pid=%ld)\n", (long) getpid() );
     set_current_time();
     set_server_priority();
-- 
2.49.0

