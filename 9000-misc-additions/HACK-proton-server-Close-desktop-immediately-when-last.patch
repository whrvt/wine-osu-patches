From b5df01bf63c0e52bbbd96b0166cf36d4fe1a0c78 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 30 Nov 2021 10:38:13 +0100
Subject: [PATCH] HACK: proton: server: Close desktop immediately when last
 user is removed.

This should speed up prefix shutdown by 1s, making it only depend on
master socket timeout.

CW-Bug-Id: #19584
---
 server/user.h       |  1 -
 server/winstation.c | 12 ++----------
 2 files changed, 2 insertions(+), 11 deletions(-)

diff --git a/server/user.h b/server/user.h
index 6f10f296200..9506665d0c0 100644
--- a/server/user.h
+++ b/server/user.h
@@ -76,7 +76,6 @@ struct desktop
     struct hook_table   *global_hooks;     /* table of global hooks on this desktop */
     struct list          hotkeys;          /* list of registered hotkeys */
     struct list          pointers;         /* list of active pointers */
-    struct timeout_user *close_timeout;    /* timeout before closing the desktop */
     struct thread_input *foreground_input; /* thread input of foreground thread */
     unsigned int         users;            /* processes and threads using this desktop */
     unsigned char        keystate[256];    /* asynchronous key state */
diff --git a/server/winstation.c b/server/winstation.c
index f5981721e55..426f15dd5d6 100644
--- a/server/winstation.c
+++ b/server/winstation.c
@@ -286,7 +286,6 @@ static struct desktop *create_desktop( const struct unicode_str *name, unsigned
             desktop->top_window = NULL;
             desktop->msg_window = NULL;
             desktop->global_hooks = NULL;
-            desktop->close_timeout = NULL;
             desktop->foreground_input = NULL;
             desktop->users = 0;
             list_init( &desktop->threads );
@@ -389,7 +388,6 @@ static void desktop_destroy( struct object *obj )
     if (desktop->top_window) free_window_handle( desktop->top_window );
     if (desktop->msg_window) free_window_handle( desktop->msg_window );
     if (desktop->global_hooks) release_object( desktop->global_hooks );
-    if (desktop->close_timeout) remove_timeout_user( desktop->close_timeout );
     if (desktop->key_repeat.timeout) remove_timeout_user( desktop->key_repeat.timeout );
     release_object( desktop->winstation );
     if (desktop->shared) free_shared_object( desktop->shared );
@@ -405,7 +403,6 @@ static void close_desktop_timeout( void *private )
 {
     struct desktop *desktop = private;
 
-    desktop->close_timeout = NULL;
     unlink_named_object( &desktop->obj );  /* make sure no other process can open it */
     post_desktop_message( desktop, WM_CLOSE, 0, 0 );  /* and signal the owner to quit */
 }
@@ -419,11 +416,6 @@ static void add_desktop_thread( struct desktop *desktop, struct thread *thread )
     if (!thread->process->is_system)
     {
         desktop->users++;
-        if (desktop->close_timeout)
-        {
-            remove_timeout_user( desktop->close_timeout );
-            desktop->close_timeout = NULL;
-        }
     }
 
     /* if thread process is now connected to the input desktop, let it receive rawinput */
@@ -439,8 +431,8 @@ static void remove_desktop_user( struct desktop *desktop, struct thread *thread
     desktop->users--;
 
     /* if we have one remaining user, it has to be the manager of the desktop window */
-    if ((process = get_top_window_owner( desktop )) && desktop->users == process->running_threads && !desktop->close_timeout)
-        desktop->close_timeout = add_timeout_user( -TICKS_PER_SEC, close_desktop_timeout, desktop );
+    if ((process = get_top_window_owner( desktop )) && desktop->users == process->running_threads)
+        close_desktop_timeout( desktop );
 }
 
 /* remove a thread from the list of threads attached to a desktop */
-- 
GitLab

