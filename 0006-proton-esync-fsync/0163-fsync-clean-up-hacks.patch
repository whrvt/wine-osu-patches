From de1be473e51741a6c9d95e17455f7d4a70d00444 Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Sun, 3 Nov 2024 20:53:27 -0800
Subject: [PATCH 2/3] fsync: clean up hacks

---
 dlls/ntdll/unix/fsync.c | 24 ------------------------
 1 file changed, 24 deletions(-)

diff --git a/dlls/ntdll/unix/fsync.c b/dlls/ntdll/unix/fsync.c
index c07211c3160..a4d7ecba343 100644
--- a/dlls/ntdll/unix/fsync.c
+++ b/dlls/ntdll/unix/fsync.c
@@ -140,15 +140,6 @@ static inline void futex_vector_set( struct futex_waitv *waitv, int *addr, int v
     waitv->__reserved = 0;
 }
 
-static void simulate_sched_quantum(void)
-{
-    if (!fsync_simulate_sched_quantum) return;
-    /* futex wait is often very quick to resume a waiting thread when woken.
-     * That reveals synchonization bugs in some games which happen to work on
-     * Windows due to the waiting threads having some minimal delay to wake up. */
-    usleep(0);
-}
-
 static inline int futex_wait_multiple( const struct futex_waitv *futexes,
         int count, const struct timespec64 *end, clockid_t clock_id )
 {
@@ -450,10 +441,8 @@ static NTSTATUS get_object_for_wait( HANDLE handle, struct fsync *obj, int *prev
     shm = obj->shm;
     /* Give wineserver a chance to cleanup shm index if the process
      * is killed while we are waiting on the object. */
-    if (fsync_yield_to_waiters)
-        *prev_pid = __atomic_exchange_n( &shm[3], current_pid, __ATOMIC_SEQ_CST );
-    else
-        __atomic_store_n( &shm[3], current_pid, __ATOMIC_SEQ_CST );
+    __atomic_store_n( &shm[3], current_pid, __ATOMIC_SEQ_CST );
+        
     return STATUS_SUCCESS;
 }
 
@@ -852,24 +841,6 @@ NTSTATUS fsync_query_mutex( HANDLE handle, void *info, ULONG *ret_len )
     return STATUS_SUCCESS;
 }
 
-static inline void try_yield_to_waiters( int prev_pid )
-{
-    if (!fsync_yield_to_waiters) return;
-
-    /* On Windows singaling an object will wake the threads waiting on the object. With fsync
-     * it may happen that signaling thread (or other thread) grabs the object before the already waiting
-     * thread gets a chance. Try to workaround that for the affected apps. Non-zero 'prev_pid' indicates
-     * that the object is grabbed in __fsync_wait_objects() by some other thread. It is the same for
-     * a non-current pid, but we may currently have a stale PID on an object from a terminated process
-     * and it is probably safer to skip this workaround. This won't work great if the object is used in 'wait all'
-     * and the waiter is blocked on the other object.
-     * This check is also not entirely reliable as if multiple waiters from the same process enter
-     * __fsync_wait_objects() the first one leaving will clear 'last_pid' in the object. */
-
-    if (prev_pid == current_pid)
-        usleep(0);
-}
-
 static NTSTATUS do_single_wait( int *addr, int val, const struct timespec64 *end, clockid_t clock_id,
                                 BOOLEAN alertable )
 {
@@ -923,7 +894,7 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
 
     struct futex_waitv futexes[MAXIMUM_WAIT_OBJECTS + 1];
     struct fsync objs[MAXIMUM_WAIT_OBJECTS];
-    BOOL msgwait = FALSE, waited = FALSE;
+    BOOL msgwait = FALSE;
     int prev_pids[MAXIMUM_WAIT_OBJECTS];
     int has_fsync = 0, has_server = 0;
     clockid_t clock_id = 0;
@@ -1034,15 +1005,12 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                         int current, new;
 
                         new = __atomic_load_n( &semaphore->count, __ATOMIC_SEQ_CST );
-                        if (!waited && new)
-                            try_yield_to_waiters(prev_pids[i]);
 
                         while ((current = new))
                         {
                             if ((new = __sync_val_compare_and_swap( &semaphore->count, current, current - 1 )) == current)
                             {
                                 TRACE("Woken up by handle %p [%d].\n", handles[i], i);
-                                if (waited) simulate_sched_quantum();
                                 put_objects( objs, count );
                                 return i;
                             }
@@ -1059,19 +1027,14 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                         {
                             TRACE("Woken up by handle %p [%d].\n", handles[i], i);
                             mutex->count++;
-                            if (waited) simulate_sched_quantum();
                             put_objects( objs, count );
                             return i;
                         }
 
-                        if (!waited && !mutex->tid)
-                            try_yield_to_waiters(prev_pids[i]);
-
                         if (!(tid = __sync_val_compare_and_swap( &mutex->tid, 0, CURRENT_TID )))
                         {
                             TRACE("Woken up by handle %p [%d].\n", handles[i], i);
                             mutex->count = 1;
-                            if (waited) simulate_sched_quantum();
                             put_objects( objs, count );
                             return i;
                         }
@@ -1090,17 +1053,9 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                     case FSYNC_AUTO_SERVER:
                     {
                         struct event *event = obj->shm;
-
-                        if (!waited && event->signaled)
-                            try_yield_to_waiters(prev_pids[i]);
-
                         if (__sync_val_compare_and_swap( &event->signaled, 1, 0 ))
                         {
-                            if (ac_odyssey && alertable)
-                                usleep( 0 );
-
                             TRACE("Woken up by handle %p [%d].\n", handles[i], i);
-                            if (waited) simulate_sched_quantum();
                             put_objects( objs, count );
                             return i;
                         }
@@ -1115,11 +1070,7 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
 
                         if (__atomic_load_n( &event->signaled, __ATOMIC_SEQ_CST ))
                         {
-                            if (ac_odyssey && alertable)
-                                usleep( 0 );
-
                             TRACE("Woken up by handle %p [%d].\n", handles[i], i);
-                            if (waited) simulate_sched_quantum();
                             put_objects( objs, count );
                             return i;
                         }
@@ -1147,9 +1098,6 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
 
             /* Looks like everything is contended, so wait. */
 
-            if (ac_odyssey && alertable)
-                usleep( 0 );
-
             if (timeout && !timeout->QuadPart)
             {
                 /* Unlike esync, we already know that we've timed out, so we
@@ -1171,7 +1119,6 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                 put_objects( objs, count );
                 return STATUS_TIMEOUT;
             }
-            else waited = TRUE;
         } /* while (1) */
     }
     else
