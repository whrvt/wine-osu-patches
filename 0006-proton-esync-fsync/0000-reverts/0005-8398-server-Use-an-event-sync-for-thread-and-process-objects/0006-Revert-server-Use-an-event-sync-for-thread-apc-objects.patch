--- b/server/thread.c
+++ a/server/thread.c
@@ -85,7 +85,6 @@
 struct thread_apc
 {
     struct object       obj;      /* object header */
-    struct event_sync  *sync;     /* sync object for wait/signal */
     struct list         entry;    /* queue linked list */
     struct thread      *caller;   /* thread that queued this apc */
     struct object      *owner;    /* object that queued this apc */
@@ -95,7 +94,7 @@
 };
 
 static void dump_thread_apc( struct object *obj, int verbose );
+static int thread_apc_signaled( struct object *obj, struct wait_queue_entry *entry );
-static struct object *thread_apc_get_sync( struct object *obj );
 static void thread_apc_destroy( struct object *obj );
 static void clear_apc_queue( struct list *queue );
 
@@ -104,13 +103,13 @@
     sizeof(struct thread_apc),  /* size */
     &no_type,                   /* type */
     dump_thread_apc,            /* dump */
+    add_queue,                  /* add_queue */
+    remove_queue,               /* remove_queue */
+    thread_apc_signaled,        /* signaled */
+    no_satisfied,               /* satisfied */
-    NULL,                       /* add_queue */
-    NULL,                       /* remove_queue */
-    NULL,                       /* signaled */
-    NULL,                       /* satisfied */
     no_signal,                  /* signal */
     no_get_fd,                  /* get_fd */
+    default_get_sync,           /* get_sync */
-    thread_apc_get_sync,        /* get_sync */
     default_map_access,         /* map_access */
     default_get_sd,             /* get_sd */
     default_set_sd,             /* set_sd */
@@ -659,11 +658,10 @@
     fprintf( stderr, "APC owner=%p type=%u\n", apc->owner, apc->call.type );
 }
 
+static int thread_apc_signaled( struct object *obj, struct wait_queue_entry *entry )
-static struct object *thread_apc_get_sync( struct object *obj )
 {
     struct thread_apc *apc = (struct thread_apc *)obj;
+    return apc->executed;
-    assert( obj->ops == &thread_apc_ops );
-    return grab_object( apc->sync );
 }
 
 static void thread_apc_destroy( struct object *obj )
@@ -679,7 +677,6 @@
             async_set_result( apc->owner, apc->call.async_io.status, 0 );
         release_object( apc->owner );
     }
-    if (apc->sync) release_object( apc->sync );
     reserve_obj_unbind( apc->reserve );
 }
 
@@ -689,7 +686,6 @@
 
     if ((apc = alloc_object( &thread_apc_ops )))
     {
-        apc->sync        = NULL;
         if (call_data) apc->call = *call_data;
         else apc->call.type = APC_NONE;
         apc->caller      = NULL;
@@ -697,12 +693,6 @@
         apc->executed    = 0;
         apc->result.type = APC_NONE;
         if (owner) grab_object( owner );
-
-        if (!(apc->sync = create_event_sync( 1, 0 )))
-        {
-            release_object( apc );
-            return NULL;
-        }
     }
     return apc;
 }
@@ -1435,7 +1425,7 @@
         if (apc->owner != owner) continue;
         list_remove( &apc->entry );
         apc->executed = 1;
+        wake_up( &apc->obj, 0 );
-        signal_sync( apc->sync );
         release_object( apc );
         return;
     }
@@ -1465,7 +1455,7 @@
         struct thread_apc *apc = LIST_ENTRY( ptr, struct thread_apc, entry );
         list_remove( &apc->entry );
         apc->executed = 1;
+        wake_up( &apc->obj, 0 );
-        signal_sync( apc->sync );
         release_object( apc );
     }
 }
@@ -1925,7 +1915,7 @@
             apc->result.create_thread.handle = handle;
             clear_error();  /* ignore errors from the above calls */
         }
+        wake_up( &apc->obj, 0 );
-        signal_sync( apc->sync );
         close_handle( current->process, req->prev_apc );
         release_object( apc );
     }
@@ -1948,7 +1938,7 @@
         else
         {
             apc->executed = 1;
+            wake_up( &apc->obj, 0 );
-            signal_sync( apc->sync );
         }
         release_object( apc );
     }
