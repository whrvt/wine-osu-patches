--- b/server/thread.c
+++ a/server/thread.c
@@ -188,7 +188,7 @@
 };
 
 static void dump_thread( struct object *obj, int verbose );
+static int thread_signaled( struct object *obj, struct wait_queue_entry *entry );
-static struct object *thread_get_sync( struct object *obj );
 static unsigned int thread_map_access( struct object *obj, unsigned int access );
 static void thread_poll_event( struct fd *fd, int event );
 static struct list *thread_get_kernel_obj_list( struct object *obj );
@@ -199,13 +199,13 @@
     sizeof(struct thread),      /* size */
     &thread_type,               /* type */
     dump_thread,                /* dump */
+    add_queue,                  /* add_queue */
+    remove_queue,               /* remove_queue */
+    thread_signaled,            /* signaled */
+    no_satisfied,               /* satisfied */
-    NULL,                       /* add_queue */
-    NULL,                       /* remove_queue */
-    NULL,                       /* signaled */
-    NULL,                       /* satisfied */
     no_signal,                  /* signal */
     no_get_fd,                  /* get_fd */
+    default_get_sync,           /* get_sync */
-    thread_get_sync,            /* get_sync */
     thread_map_access,          /* map_access */
     default_get_sd,             /* get_sd */
     default_set_sd,             /* set_sd */
@@ -395,7 +395,6 @@
 {
     int i;
 
-    thread->sync            = NULL;
     thread->unix_pid        = -1;  /* not known yet */
     thread->unix_tid        = -1;  /* not known yet */
     thread->context         = NULL;
@@ -548,8 +547,11 @@
         release_object( thread );
         return NULL;
     }
+    if (!(thread->request_fd = create_anonymous_fd( &thread_fd_ops, fd, &thread->obj, 0 )))
+    {
+        release_object( thread );
+        return NULL;
+    }
-    if (!(thread->request_fd = create_anonymous_fd( &thread_fd_ops, fd, &thread->obj, 0 ))) goto error;
-    if (!(thread->sync = create_event_sync( 1, 0 ))) goto error;
 
     if (process->desktop)
     {
@@ -564,10 +566,6 @@
     set_fd_events( thread->request_fd, POLLIN );  /* start listening to events */
     add_process_thread( thread->process, thread );
     return thread;
-
-error:
-    release_object( thread );
-    return NULL;
 }
 
 /* handle a client event */
@@ -644,7 +642,6 @@
     release_object( thread->process );
     if (thread->id) free_ptid( thread->id );
     if (thread->token) release_object( thread->token );
-    if (thread->sync) release_object( thread->sync );
 }
 
 /* dump a thread on stdout for debugging purposes */
@@ -657,11 +654,10 @@
              thread->id, thread->unix_pid, thread->unix_tid, thread->state );
 }
 
+static int thread_signaled( struct object *obj, struct wait_queue_entry *entry )
-static struct object *thread_get_sync( struct object *obj )
 {
+    struct thread *mythread = (struct thread *)obj;
+    return (mythread->state == TERMINATED);
-    struct thread *thread = (struct thread *)obj;
-    assert( obj->ops == &thread_ops );
-    return grab_object( thread->sync );
 }
 
 static unsigned int thread_map_access( struct object *obj, unsigned int access )
@@ -1530,7 +1530,7 @@
     /* grab reference since object can be destroyed while trying to wake up */
     grab_object( &thread->obj );
     thread->exit_poll = NULL;
-    signal_sync( thread->sync );
+    wake_up( &thread->obj, 0 );
     release_object( &thread->obj );
 }
 
@@ -1568,7 +1564,7 @@
         check_terminated( thread );
     }
     else
+        wake_up( &thread->obj, 0 );
-        signal_sync( thread->sync );
     cleanup_thread( thread );
     remove_process_thread( thread->process, thread );
     release_object( thread );
--- b/server/thread.h
+++ a/server/thread.h
@@ -50,7 +50,6 @@
 struct thread
 {
     struct object          obj;           /* object header */
-    struct event_sync     *sync;          /* sync object for wait/signal */
     struct list            entry;         /* entry in system-wide thread list */
     struct list            proc_entry;    /* entry in per-process thread list */
     struct list            desktop_entry; /* entry in per-desktop thread list */
