From b9a6c6139a8b08c632eddde8db518a86a832e532 Mon Sep 17 00:00:00 2001
From: Giovanni Mascellani <gmascellani@codeweavers.com>
Date: Fri, 17 Jan 2025 14:45:55 +0100
Subject: [PATCH] dxgi: Do not bias the frame latency fence.

The bias was a broken solution for handling the maximum frame
latency changes. However we now already set the event (and, in the
future, release the sempahore) when the maximum frame latency is
increased, so there is no need for the bias anymore.
---
 dlls/dxgi/swapchain.c  | 12 ++----------
 dlls/dxgi/tests/dxgi.c |  2 +-
 2 files changed, 3 insertions(+), 11 deletions(-)

diff --git a/dlls/dxgi/swapchain.c b/dlls/dxgi/swapchain.c
index 4f217a7388d..35460691918 100644
--- a/dlls/dxgi/swapchain.c
+++ b/dlls/dxgi/swapchain.c
@@ -2296,12 +2296,8 @@ static HRESULT d3d12_swapchain_op_present_execute(struct d3d12_swapchain *swapch
 
     if (swapchain->frame_latency_fence)
     {
-        /* Use the same bias as d3d12_swapchain_present(). Add one to
-         * account for the "++swapchain->frame_number" there. */
-        uint64_t number = op->present.frame_number + DXGI_MAX_SWAP_CHAIN_BUFFERS + 1;
-
         if (FAILED(hr = ID3D12CommandQueue_Signal(swapchain->command_queue,
-                swapchain->frame_latency_fence, number)))
+                swapchain->frame_latency_fence, op->present.frame_number + 1)))
         {
             ERR("Failed to signal frame latency fence, hr %#lx.\n", hr);
             return hr;
@@ -2351,12 +2347,8 @@ static HRESULT d3d12_swapchain_present(struct d3d12_swapchain *swapchain,
     ++swapchain->frame_number;
     if ((frame_latency_event = swapchain->frame_latency_event))
     {
-        /* Bias the frame number to avoid underflowing in
-         * SetEventOnCompletion(). */
-        uint64_t number = swapchain->frame_number + DXGI_MAX_SWAP_CHAIN_BUFFERS;
-
         if (FAILED(hr = ID3D12Fence_SetEventOnCompletion(swapchain->frame_latency_fence,
-                number - swapchain->frame_latency, frame_latency_event)))
+                swapchain->frame_number, frame_latency_event)))
         {
             ERR("Failed to enqueue frame latency event, hr %#lx.\n", hr);
             return hr;
diff --git a/dlls/dxgi/tests/dxgi.c b/dlls/dxgi/tests/dxgi.c
index 7cf52d626da..4ff27715459 100644
--- a/dlls/dxgi/tests/dxgi.c
+++ b/dlls/dxgi/tests/dxgi.c
@@ -7222,7 +7222,7 @@ static void test_frame_latency_event(IUnknown *device, BOOL is_d3d12)
         for (i = 0; i < 3; i++)
         {
             wait_result = WaitForSingleObject(semaphore, 100);
-            todo_wine_if(i != 0)
+            todo_wine
             ok(!wait_result, "Got unexpected wait result %#lx.\n", wait_result);
         }
 
-- 
GitLab

