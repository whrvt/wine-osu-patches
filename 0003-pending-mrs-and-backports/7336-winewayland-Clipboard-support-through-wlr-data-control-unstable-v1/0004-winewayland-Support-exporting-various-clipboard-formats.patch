From 2ba07a0ddd95c064bc7ea15d3cbae9f8bd99a3b1 Mon Sep 17 00:00:00 2001
From: Alexandros Frantzis <alexandros.frantzis@collabora.com>
Date: Tue, 28 Jan 2025 11:31:48 +0200
Subject: [PATCH] winewayland: Support exporting various clipboard formats.

Add support for some formats commonly used in applications and which
do not require special exporting: RTF, TIFF, PNG, JPEG, GIF, SVG, RIFF, WAV.
---
 dlls/winewayland.drv/wayland_data_device.c | 39 ++++++++++++++++++++--
 1 file changed, 37 insertions(+), 2 deletions(-)

diff --git a/dlls/winewayland.drv/wayland_data_device.c b/dlls/winewayland.drv/wayland_data_device.c
index 7027dc60d4b..6b12d392379 100644
--- a/dlls/winewayland.drv/wayland_data_device.c
+++ b/dlls/winewayland.drv/wayland_data_device.c
@@ -39,10 +39,16 @@ struct data_device_format
 {
     const char *mime_type;
     UINT clipboard_format;
+    const WCHAR *register_name;
     void *(*export)(void *data, size_t size, size_t *ret_size);
 };
 
 static HWND clipboard_hwnd;
+static const WCHAR rich_text_formatW[] = {'R','i','c','h',' ','T','e','x','t',' ','F','o','r','m','a','t',0};
+static const WCHAR pngW[] = {'P','N','G',0};
+static const WCHAR jfifW[] = {'J','F','I','F',0};
+static const WCHAR gifW[] = {'G','I','F',0};
+static const WCHAR image_svg_xmlW[] = {'i','m','a','g','e','/','s','v','g','+','x','m','l',0};
 
 static int poll_until(int fd, int events, ULONG end_time)
 {
@@ -122,11 +128,26 @@ static void *export_unicode_text(void *data, size_t size, size_t *ret_size)
     return bytes;
 }
 
+static void *export_data(void *data, size_t size, size_t *ret_size)
+{
+    *ret_size = size;
+    return data;
+}
+
 /* Order is important. When selecting a mime-type for a clipboard format we
  * will choose the first entry that matches the specified clipboard format. */
 static struct data_device_format supported_formats[] =
 {
-    {"text/plain;charset=utf-8", CF_UNICODETEXT, export_unicode_text},
+    {"text/plain;charset=utf-8", CF_UNICODETEXT, NULL, export_unicode_text},
+    {"text/rtf", 0, rich_text_formatW, export_data},
+    {"image/tiff", CF_TIFF, NULL, export_data},
+    {"image/png", 0, pngW, export_data},
+    {"image/jpeg", 0, jfifW, export_data},
+    {"image/gif", 0, gifW, export_data},
+    {"image/svg+xml", 0, image_svg_xmlW, export_data},
+    {"application/x-riff", CF_RIFF, NULL, export_data},
+    {"audio/wav", CF_WAVE, NULL, export_data},
+    {"audio/x-wav", CF_WAVE, NULL, export_data},
     {NULL, 0, NULL},
 };
 
@@ -154,6 +175,13 @@ static struct data_device_format *data_device_format_for_mime_type(const char *m
     return NULL;
 }
 
+static ATOM register_clipboard_format(const WCHAR *name)
+{
+    ATOM atom;
+    if (NtAddAtom(name, lstrlenW(name) * sizeof(WCHAR), &atom)) return 0;
+    return atom;
+}
+
 /**********************************************************************
  *          zwlr_data_control_source_v1 handling
  */
@@ -187,7 +215,7 @@ static void wayland_data_source_export(struct data_device_format *format, int fd
     NtUserCloseClipboard();
     if (exported) write_all(fd, exported, exported_size);
 
-    free(exported);
+    if (exported != params.data) free(exported);
     free(params.data);
 }
 
@@ -223,6 +251,7 @@ static const struct zwlr_data_control_source_v1_listener data_control_source_lis
 void wayland_data_device_init(void)
 {
     struct wayland_data_device *data_device = &process_wayland.data_device;
+    struct data_device_format *format = supported_formats;
 
     pthread_mutex_lock(&data_device->mutex);
     if (data_device->zwlr_data_control_device_v1)
@@ -232,6 +261,12 @@ void wayland_data_device_init(void)
             process_wayland.zwlr_data_control_manager_v1,
             process_wayland.seat.wl_seat);
     pthread_mutex_unlock(&data_device->mutex);
+
+    for (; format->mime_type; ++format)
+    {
+        if (format->clipboard_format == 0)
+            format->clipboard_format = register_clipboard_format(format->register_name);
+    }
 }
 
 static void clipboard_update(void)
-- 
GitLab

