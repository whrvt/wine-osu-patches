From bd0ab7e566ddbcff81ffad81f3eac60149f2dc17 Mon Sep 17 00:00:00 2001
From: Alexandros Frantzis <alexandros.frantzis@collabora.com>
Date: Wed, 29 Jan 2025 13:39:02 +0200
Subject: [PATCH] winewayland: Normalize received MIME type strings.

---
 dlls/winewayland.drv/wayland_data_device.c | 45 +++++++++++++++++++---
 1 file changed, 39 insertions(+), 6 deletions(-)

diff --git a/dlls/winewayland.drv/wayland_data_device.c b/dlls/winewayland.drv/wayland_data_device.c
index 9d261660c8c..949cbadea05 100644
--- a/dlls/winewayland.drv/wayland_data_device.c
+++ b/dlls/winewayland.drv/wayland_data_device.c
@@ -61,6 +61,35 @@ static const WCHAR jfifW[] = {'J','F','I','F',0};
 static const WCHAR gifW[] = {'G','I','F',0};
 static const WCHAR image_svg_xmlW[] = {'i','m','a','g','e','/','s','v','g','+','x','m','l',0};
 
+/* Normalize the MIME type string by skipping inconsequential characters,
+ * such as spaces and double quotes, and convert to lower case. */
+static const char *normalize_mime_type(const char *mime_type)
+{
+    char *new_mime_type;
+    const char *cur_read;
+    char *cur_write;
+    size_t new_mime_len = 0;
+
+    for (cur_read = mime_type; *cur_read != '\0'; ++cur_read)
+    {
+        if (*cur_read != ' ' && *cur_read != '"')
+            new_mime_len++;
+    }
+
+    new_mime_type = malloc(new_mime_len + 1);
+    if (!new_mime_type) return NULL;
+
+    for (cur_read = mime_type, cur_write = new_mime_type; *cur_read != '\0'; ++cur_read)
+    {
+        if (*cur_read != ' ' && *cur_read != '"')
+            *cur_write++ = tolower(*cur_read);
+    }
+
+    *cur_write = '\0';
+
+    return new_mime_type;
+}
+
 static int poll_until(int fd, int events, ULONG end_time)
 {
     struct pollfd pfd = { .fd = fd, .events = events & ~POLLHUP };
@@ -328,10 +357,14 @@ static void data_control_source_send(void *data,
                                      struct zwlr_data_control_source_v1 *source,
                                      const char *mime_type, int32_t fd)
 {
-    struct data_device_format *format =
-        data_device_format_for_mime_type(mime_type);
+    struct data_device_format *format;
+    const char *normalized;
 
-    if (format) wayland_data_source_export(format, fd);
+    if ((normalized = normalize_mime_type(mime_type)) &&
+        (format = data_device_format_for_mime_type(normalized)))
+    {
+        wayland_data_source_export(format, fd);
+    }
     close(fd);
 }
 
@@ -362,13 +395,13 @@ static void data_control_offer_offer(void *data,
                                      const char *type)
 {
     struct wayland_data_offer *data_offer = data;
-    const char *type_copy;
+    const char *normalized;
     const char **p;
 
-    if ((type_copy = strdup(type)) &&
+    if ((normalized = normalize_mime_type(type)) &&
         (p = wl_array_add(&data_offer->types, sizeof *p)))
     {
-        *p = type_copy;
+        *p = normalized;
     }
 }
 
-- 
GitLab

