From 2fc6bdd9dcaed0f86f1da1be50c5d7156eb1981b Mon Sep 17 00:00:00 2001
From: Jinoh Kang <jinoh.kang.kr@gmail.com>
Date: Sat, 21 Sep 2024 23:01:03 +0900
Subject: [PATCH] server: Remove "direct_result" field from struct async.

---
 server/async.c | 24 +++++++-----------------
 1 file changed, 7 insertions(+), 17 deletions(-)

diff --git a/server/async.c b/server/async.c
index 924c2364826..9b9b3683b41 100644
--- a/server/async.c
+++ b/server/async.c
@@ -94,7 +94,6 @@ struct async
     enum async_state     state;
     unsigned int         signaled :1;
     unsigned int         pending :1;      /* request successfully queued, but pending */
-    unsigned int         direct_result :1;/* a flag if we're passing result directly from request instead of APC  */
     unsigned int         alerted :1;      /* fd is signaled, but we are waiting for client-side I/O */
     unsigned int         terminated :1;   /* async has been terminated */
     unsigned int         canceled :1;     /* have we already queued cancellation for this async? */
@@ -190,11 +189,9 @@ static void async_satisfied( struct object *obj, struct wait_queue_entry *entry
     /* we only return an async handle for asyncs created via create_request_async() */
     assert( async->iosb );
 
-    assert( async->direct_result == (async->state == ASYNC_INITIAL_DIRECT_RESULT || async->state == ASYNC_FINALIZING_SYNC_DIRECT_RESULT) );
-    if (async->direct_result)
+    if (async->state == ASYNC_INITIAL_DIRECT_RESULT || async->state == ASYNC_FINALIZING_SYNC_DIRECT_RESULT)
     {
         async_set_result( &async->obj, async->iosb->status, async->iosb->result );
-        async->direct_result = 0;
     }
 
     if (async->initial_status == STATUS_PENDING && async->blocking)
@@ -298,8 +295,7 @@ void async_terminate( struct async *async, unsigned int status )
 
     if (status == STATUS_ALERTED)
     {
-        assert( async->direct_result == (async->state == ASYNC_INITIAL_DIRECT_RESULT) );
-        if (async->direct_result)
+        if (async->state == ASYNC_INITIAL_DIRECT_RESULT)
         {
             assert( async->unknown_status );
             async->state = ASYNC_UNKNOWN_STATUS;
@@ -337,8 +333,7 @@ void async_terminate( struct async *async, unsigned int status )
      * last reference to the async, so grab a temporary reference here */
     grab_object( async );
 
-    assert( (!async->direct_result) == (async->state != ASYNC_FINALIZING_SYNC_DIRECT_RESULT && async->state != ASYNC_UNKNOWN_STATUS) );
-    if (!async->direct_result)
+    if (async->state != ASYNC_FINALIZING_SYNC_DIRECT_RESULT && async->state != ASYNC_UNKNOWN_STATUS)
     {
         apc_call_t data;
 
@@ -433,7 +428,6 @@ struct async *create_async( struct fd *fd, struct thread *thread, const async_da
     async->signaled      = 0;
     async->pending       = 1;
     async->wait_handle   = 0;
-    async->direct_result = 0;
     async->alerted       = 0;
     async->terminated    = 0;
     async->canceled      = 0;
@@ -524,10 +518,10 @@ obj_handle_t async_handoff( struct async *async, data_size_t *result, int force_
          * the one responsible for performing the I/O is not the device driver,
          * but instead the client that requested the I/O in the first place.
          *
-         * also, async_set_unknown_status() would set direct_result to zero
-         * forcing APC_ASYNC_IO to fire in async_terminate(), which is not
-         * useful due to subtle semantic differences between synchronous and
-         * asynchronous completion.
+         * also, async_set_unknown_status() would eventually force APC_ASYNC_IO
+         * to fire in async_terminate(), which is not useful due to subtle
+         * semantic differences between synchronous and asynchronous
+         * completion.
          */
         async->unknown_status = 1;
         async_terminate( async, STATUS_ALERTED );
@@ -570,7 +564,6 @@ obj_handle_t async_handoff( struct async *async, data_size_t *result, int force_
     {
         assert( async->state == ASYNC_INITIAL_DIRECT_RESULT );
         async->state = ASYNC_IN_PROGRESS;
-        async->direct_result = 0;
         async->pending = 1;
         if (!async->blocking)
         {
@@ -628,7 +621,6 @@ void async_set_unknown_status( struct async *async )
     assert( async->state == ASYNC_INITIAL_DIRECT_RESULT );
     async->state = ASYNC_UNKNOWN_STATUS;
     async->unknown_status = 1;
-    async->direct_result = 0;
 }
 
 /* set the timeout of an async operation */
@@ -942,7 +934,6 @@ struct async *create_request_async( struct fd *fd, unsigned int comp_flags, cons
         }
         async->pending       = 0;
         async->state         = ASYNC_INITIAL_DIRECT_RESULT;
-        async->direct_result = 1;
         async->is_system     = !!is_system;
         async->comp_flags    = comp_flags;
     }
@@ -1043,7 +1034,6 @@ DECL_HANDLER(set_async_direct_result)
 
     if (status == STATUS_PENDING)
     {
-        async->direct_result = 0;
         async->pending = 1;
     }
     else if (req->mark_pending)
-- 
GitLab

