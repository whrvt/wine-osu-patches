From 7475eb51d88e6726ca9ad1a3dd1e88cd707b156b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 6 Mar 2025 10:38:16 +0100
Subject: [PATCH] opengl32: Generate ALL_(WGL|GL|GL_EXT)_FUNCS macros and
 prototypes.

And avoid using the win32u interface in wined3d, as it misses some
functions that were only implemented on the PE side.
---
 dlls/opengl32/make_opengl     |   69 +-
 dlls/win32u/dibdrv/dc.c       |    1 -
 dlls/win32u/opengl.c          |    2 +-
 dlls/wineandroid.drv/opengl.c |    6 +-
 dlls/wined3d/adapter_gl.c     |    2 +-
 dlls/wined3d/wined3d_gl.h     |   22 +-
 dlls/winemac.drv/opengl.c     |    2 +-
 dlls/winewayland.drv/opengl.c |    5 +-
 dlls/winex11.drv/opengl.c     |    2 +-
 include/wine/wgl.h            | 6131 +++++++++++++++++++++++++++++++++
 include/wine/wgl_driver.h     |    2 +-
 11 files changed, 6230 insertions(+), 14 deletions(-)

diff --git a/dlls/opengl32/make_opengl b/dlls/opengl32/make_opengl
index 160fe8e7848..26cb34aa683 100755
--- a/dlls/opengl32/make_opengl
+++ b/dlls/opengl32/make_opengl
@@ -950,7 +950,7 @@ foreach (sort keys %ext_functions)
 print HEADER "    } ext;\n";
 print HEADER "};\n\n";
 
-print HEADER "#define ALL_WGL_FUNCS";
+print HEADER "#define ALL_GL_UNIX_FUNCS";
 foreach (sort keys %norm_functions)
 {
     next if defined $manual_win_functions{$_};
@@ -968,6 +968,19 @@ print HEADER "/* Automatically generated from http://www.opengl.org/registry fil
 print HEADER "#ifndef __WINE_WGL_H\n";
 print HEADER "#define __WINE_WGL_H\n\n";
 
+print HEADER "#include <stdarg.h>\n";
+print HEADER "#include <stddef.h>\n";
+print HEADER "#include <windef.h>\n";
+print HEADER "#include <winbase.h>\n";
+print HEADER "#include <wingdi.h>\n";
+print HEADER "\n";
+
+print HEADER "#ifdef WINE_UNIX_LIB\n";
+print HEADER "#define GL_NO_PROTOTYPES\n";
+print HEADER "#define GLAPIENTRY\n";
+print HEADER "#endif\n";
+print HEADER "\n";
+
 print HEADER "#ifndef GLAPIENTRY\n";
 print HEADER "#define GLAPIENTRY __stdcall\n";
 print HEADER "#endif\n\n";
@@ -988,14 +1001,66 @@ foreach (sort keys %gl_enums)
 }
 print HEADER "\n";
 
+print HEADER "#ifndef GL_NO_PROTOTYPES\n";
 foreach (sort keys %norm_functions)
 {
     my $decl_args = get_func_args( $norm_functions{$_}, 1, 0, "" );
     my $func_ret = get_func_ret( $norm_functions{$_}, 0 );
     printf HEADER "%-10s GLAPIENTRY $_($decl_args);\n", $func_ret;
 }
+print HEADER "#endif\n\n";
+
+foreach (sort keys %wgl_functions)
+{
+    my $decl_args = get_func_args( $wgl_functions{$_}, 1, 0, "" );
+    my $func_ret = get_func_ret( $wgl_functions{$_}, 0 );
+    printf HEADER "typedef %-10s (GLAPIENTRY *PFN_$_)($decl_args);\n", $func_ret;
+}
+
+foreach (sort keys %norm_functions)
+{
+    my $decl_args = get_func_args( $norm_functions{$_}, 1, 0, "" );
+    my $func_ret = get_func_ret( $norm_functions{$_}, 0 );
+    printf HEADER "typedef %-10s (GLAPIENTRY *PFN_$_)($decl_args);\n", $func_ret;
+}
+
+foreach (sort keys %ext_functions)
+{
+    my $decl_args = get_func_args( $ext_functions{$_}, 1, 0, "" );
+    my $func_ret = get_func_ret( $ext_functions{$_}, 0 );
+    printf HEADER "typedef %-10s (GLAPIENTRY *PFN_$_)($decl_args);\n", $func_ret;
+}
+print HEADER "\n";
+
+print HEADER "#define ALL_WGL_FUNCS";
+foreach (sort keys %wgl_functions)
+{
+    printf HEADER " \\\n    USE_GL_FUNC(\%s)", $_;
+}
+print HEADER "\n\n";
+print HEADER "#define ALL_WGL_EXT_FUNCS";
+foreach (sort keys %ext_functions)
+{
+    next unless $_ =~ /^wgl/;
+    printf HEADER " \\\n    USE_GL_FUNC(\%s)", $_;
+}
+print HEADER "\n\n";
+print HEADER "#define ALL_GL_FUNCS";
+foreach (sort keys %norm_functions)
+{
+    next if $_ =~ /^glDebugEntry/; # windows-specific function
+    printf HEADER " \\\n    USE_GL_FUNC(\%s)", $_;
+}
+print HEADER "\n\n";
+print HEADER "#define ALL_GL_EXT_FUNCS";
+foreach (sort keys %ext_functions)
+{
+    next unless $_ =~ /^gl/;
+    printf HEADER " \\\n    USE_GL_FUNC(\%s)", $_;
+}
+print HEADER "\n\n";
 
-print HEADER "\n#endif /* __WINE_WGL_H */\n";
+print HEADER "#endif /* __WINE_WGL_H */\n";
 close HEADER;
 
 #
diff --git a/dlls/win32u/dibdrv/dc.c b/dlls/win32u/dibdrv/dc.c
index e141965b697..3303888e7b9 100644
--- a/dlls/win32u/dibdrv/dc.c
+++ b/dlls/win32u/dibdrv/dc.c
@@ -29,7 +29,6 @@
 
 #include "wine/unixlib.h"
 #include "wine/wgl.h"
-#include "wine/wgl_driver.h"
 #include "wine/debug.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(dib);
diff --git a/dlls/win32u/opengl.c b/dlls/win32u/opengl.c
index 3073f3ee4e7..1bfdfb9f6ca 100644
--- a/dlls/win32u/opengl.c
+++ b/dlls/win32u/opengl.c
@@ -62,7 +62,7 @@ struct wgl_context
 static struct opengl_funcs osmesa_opengl_funcs;
 
 #define USE_GL_FUNC(name) #name,
-static const char *opengl_func_names[] = { ALL_WGL_FUNCS };
+static const char *opengl_func_names[] = { ALL_GL_UNIX_FUNCS };
 #undef USE_GL_FUNC
 
 static OSMesaContext (*pOSMesaCreateContextExt)( GLenum format, GLint depthBits, GLint stencilBits,
diff --git a/dlls/wineandroid.drv/opengl.c b/dlls/wineandroid.drv/opengl.c
index e3315fc805c..fcc16f85cfb 100644
--- a/dlls/wineandroid.drv/opengl.c
+++ b/dlls/wineandroid.drv/opengl.c
@@ -670,7 +670,7 @@ static void init_extensions(void)
     /* load standard functions and extensions exported from the OpenGL library */
 
 #define USE_GL_FUNC(func) if ((ptr = dlsym( opengl_handle, #func ))) egl_funcs.gl.p_##func = ptr;
-    ALL_WGL_FUNCS
+    ALL_GL_UNIX_FUNCS
 #undef USE_GL_FUNC
 
 #define LOAD_FUNCPTR(func) egl_funcs.ext.p_##func = dlsym( opengl_handle, #func )
@@ -1060,7 +1060,7 @@ static void glstub_##name(void) \
     ExitProcess( 1 ); \
 }
 
-ALL_WGL_FUNCS
+ALL_GL_UNIX_FUNCS
 #undef USE_GL_FUNC
 
 static struct opengl_funcs egl_funcs =
@@ -1078,6 +1078,6 @@ static struct opengl_funcs egl_funcs =
         android_get_pixel_formats,
     },
 #define USE_GL_FUNC(name) (void *)glstub_##name,
-    { ALL_WGL_FUNCS }
+    { ALL_GL_UNIX_FUNCS }
 #undef USE_GL_FUNC
 };
diff --git a/dlls/wined3d/adapter_gl.c b/dlls/wined3d/adapter_gl.c
index 6f2e003b3ed..86e0cbb7a50 100644
--- a/dlls/wined3d/adapter_gl.c
+++ b/dlls/wined3d/adapter_gl.c
@@ -5031,7 +5031,7 @@ static BOOL wined3d_adapter_gl_init(struct wined3d_adapter_gl *adapter_gl,
     {
         HMODULE mod_gl = GetModuleHandleA("opengl32.dll");
 #define USE_GL_FUNC(f) gl_info->gl_ops.gl.p_##f = (void *)GetProcAddress(mod_gl, #f);
-        ALL_WGL_FUNCS
+        ALL_GL_FUNCS
 #undef USE_GL_FUNC
         gl_info->gl_ops.wgl.p_wglSwapBuffers = (void *)GetProcAddress(mod_gl, "wglSwapBuffers");
         gl_info->gl_ops.wgl.p_wglGetPixelFormat = (void *)GetProcAddress(mod_gl, "wglGetPixelFormat");
diff --git a/dlls/wined3d/wined3d_gl.h b/dlls/wined3d/wined3d_gl.h
index 24d7ebf663b..358f0599266 100644
--- a/dlls/wined3d/wined3d_gl.h
+++ b/dlls/wined3d/wined3d_gl.h
@@ -30,7 +30,6 @@
 #include <stdint.h>
 
 #include "wine/wgl.h"
-#include "wine/wgl_driver.h"
 
 struct wined3d_swapchain_gl;
 struct wined3d_texture_gl;
@@ -337,6 +336,25 @@ struct wined3d_ffp_attrib_ops
     wined3d_generic_attrib_func generic[WINED3D_FFP_EMIT_COUNT];
 };
 
+struct wined3d_gl_funcs
+{
+#define USE_GL_FUNC(x) PFN_##x p_##x;
+    struct
+    {
+        ALL_WGL_FUNCS
+    } wgl;
+    struct
+    {
+        ALL_GL_FUNCS
+    } gl;
+    struct
+    {
+        ALL_WGL_EXT_FUNCS
+        ALL_GL_EXT_FUNCS
+    } ext;
+#undef USE_GL_FUNC
+};
+
 struct wined3d_gl_info
 {
     unsigned int selected_gl_version;
@@ -350,7 +368,7 @@ struct wined3d_gl_info
 
     HGLRC (WINAPI *p_wglCreateContextAttribsARB)(HDC dc, HGLRC share, const GLint *attribs);
     struct wined3d_ffp_attrib_ops ffp_attrib_ops;
-    struct opengl_funcs gl_ops;
+    struct wined3d_gl_funcs gl_ops;
     struct wined3d_fbo_ops fbo_ops;
 
     void (WINE_GLAPI *p_glDisableWINE)(GLenum cap);
diff --git a/dlls/winemac.drv/opengl.c b/dlls/winemac.drv/opengl.c
index 4e1202a0e17..d0776c0b5a3 100644
--- a/dlls/winemac.drv/opengl.c
+++ b/dlls/winemac.drv/opengl.c
@@ -101,7 +101,7 @@ static pthread_mutex_t dc_pbuffers_mutex = PTHREAD_MUTEX_INITIALIZER;
 static struct opengl_funcs opengl_funcs;
 
 #define USE_GL_FUNC(name) #name,
-static const char *opengl_func_names[] = { ALL_WGL_FUNCS };
+static const char *opengl_func_names[] = { ALL_GL_UNIX_FUNCS };
 #undef USE_GL_FUNC
 
 
diff --git a/dlls/winewayland.drv/opengl.c b/dlls/winewayland.drv/opengl.c
index 4f90de4b5f9..788b31f259f 100644
--- a/dlls/winewayland.drv/opengl.c
+++ b/dlls/winewayland.drv/opengl.c
@@ -52,7 +52,7 @@ static int num_egl_configs;
 static BOOL has_egl_ext_pixel_format_float;
 
 #define USE_GL_FUNC(name) #name,
-static const char *opengl_func_names[] = { ALL_WGL_FUNCS };
+static const char *opengl_func_names[] = { ALL_GL_UNIX_FUNCS };
 #undef USE_GL_FUNC
 
 #define DECL_FUNCPTR(f) static typeof(f) * p_##f
@@ -73,6 +73,9 @@ DECL_FUNCPTR(eglMakeCurrent);
 DECL_FUNCPTR(eglQueryString);
 DECL_FUNCPTR(eglSwapBuffers);
 DECL_FUNCPTR(eglSwapInterval);
+#undef DECL_FUNCPTR
+
+#define DECL_FUNCPTR(f) static PFN_##f p_##f
 DECL_FUNCPTR(glClear);
 #undef DECL_FUNCPTR
 
diff --git a/dlls/winex11.drv/opengl.c b/dlls/winex11.drv/opengl.c
index b661424de76..86cce62b66f 100644
--- a/dlls/winex11.drv/opengl.c
+++ b/dlls/winex11.drv/opengl.c
@@ -287,7 +287,7 @@ static const BOOL is_win64 = sizeof(void *) > sizeof(int);
 static struct opengl_funcs opengl_funcs;
 
 #define USE_GL_FUNC(name) #name,
-static const char *opengl_func_names[] = { ALL_WGL_FUNCS };
+static const char *opengl_func_names[] = { ALL_GL_UNIX_FUNCS };
 #undef USE_GL_FUNC
 
 static void X11DRV_WineGL_LoadExtensions(void);
diff --git a/include/wine/wgl.h b/include/wine/wgl.h
index b3f93fab9ca..4419704e84e 100644
--- a/include/wine/wgl.h
+++ b/include/wine/wgl.h
@@ -3,6 +3,17 @@
 #ifndef __WINE_WGL_H
 #define __WINE_WGL_H
 
+#include <stdarg.h>
+#include <stddef.h>
+#include <windef.h>
+#include <winbase.h>
+#include <wingdi.h>
+
+#ifdef WINE_UNIX_LIB
+#define GL_NO_PROTOTYPES
+#define GLAPIENTRY
+#endif
+
 #ifndef GLAPIENTRY
 #define GLAPIENTRY __stdcall
 #endif
@@ -5233,6 +5244,7 @@ typedef unsigned int GLhandleARB;
 #define WGL_TYPE_RGBA_FLOAT_ATI                                       0x21A0
 #define WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT                              0x20A8
 
+#ifndef GL_NO_PROTOTYPES
 void       GLAPIENTRY glAccum( GLenum op, GLfloat value );
 void       GLAPIENTRY glAlphaFunc( GLenum func, GLfloat ref );
 GLboolean  GLAPIENTRY glAreTexturesResident( GLsizei n, const GLuint *textures, GLboolean *residences );
@@ -5570,5 +5582,6124 @@ void       GLAPIENTRY glVertex4s( GLshort x, GLshort y, GLshort z, GLshort w );
 void       GLAPIENTRY glVertex4sv( const GLshort *v );
 void       GLAPIENTRY glVertexPointer( GLint size, GLenum type, GLsizei stride, const void *pointer );
 void       GLAPIENTRY glViewport( GLint x, GLint y, GLsizei width, GLsizei height );
+#endif
+
+typedef int        (GLAPIENTRY *PFN_wglChoosePixelFormat)( HDC hDc, const PIXELFORMATDESCRIPTOR *pPfd );
+typedef BOOL       (GLAPIENTRY *PFN_wglCopyContext)( HGLRC hglrcSrc, HGLRC hglrcDst, UINT mask );
+typedef HGLRC      (GLAPIENTRY *PFN_wglCreateContext)( HDC hDc );
+typedef HGLRC      (GLAPIENTRY *PFN_wglCreateLayerContext)( HDC hDc, int level );
+typedef BOOL       (GLAPIENTRY *PFN_wglDeleteContext)( HGLRC oldContext );
+typedef BOOL       (GLAPIENTRY *PFN_wglDescribeLayerPlane)( HDC hDc, int pixelFormat, int layerPlane, UINT nBytes, const LAYERPLANEDESCRIPTOR *plpd );
+typedef int        (GLAPIENTRY *PFN_wglDescribePixelFormat)( HDC hdc, int ipfd, UINT cjpfd, PIXELFORMATDESCRIPTOR *ppfd );
+typedef HGLRC      (GLAPIENTRY *PFN_wglGetCurrentContext)(void);
+typedef HDC        (GLAPIENTRY *PFN_wglGetCurrentDC)(void);
+typedef PROC       (GLAPIENTRY *PFN_wglGetDefaultProcAddress)( LPCSTR lpszProc );
+typedef int        (GLAPIENTRY *PFN_wglGetLayerPaletteEntries)( HDC hdc, int iLayerPlane, int iStart, int cEntries, const COLORREF *pcr );
+typedef int        (GLAPIENTRY *PFN_wglGetPixelFormat)( HDC hdc );
+typedef PROC       (GLAPIENTRY *PFN_wglGetProcAddress)( LPCSTR lpszProc );
+typedef BOOL       (GLAPIENTRY *PFN_wglMakeCurrent)( HDC hDc, HGLRC newContext );
+typedef BOOL       (GLAPIENTRY *PFN_wglRealizeLayerPalette)( HDC hdc, int iLayerPlane, BOOL bRealize );
+typedef int        (GLAPIENTRY *PFN_wglSetLayerPaletteEntries)( HDC hdc, int iLayerPlane, int iStart, int cEntries, const COLORREF *pcr );
+typedef BOOL       (GLAPIENTRY *PFN_wglSetPixelFormat)( HDC hdc, int ipfd, const PIXELFORMATDESCRIPTOR *ppfd );
+typedef BOOL       (GLAPIENTRY *PFN_wglShareLists)( HGLRC hrcSrvShare, HGLRC hrcSrvSource );
+typedef BOOL       (GLAPIENTRY *PFN_wglSwapBuffers)( HDC hdc );
+typedef BOOL       (GLAPIENTRY *PFN_wglSwapLayerBuffers)( HDC hdc, UINT fuFlags );
+typedef BOOL       (GLAPIENTRY *PFN_wglUseFontBitmapsA)( HDC hDC, DWORD first, DWORD count, DWORD listBase );
+typedef BOOL       (GLAPIENTRY *PFN_wglUseFontBitmapsW)( HDC hDC, DWORD first, DWORD count, DWORD listBase );
+typedef BOOL       (GLAPIENTRY *PFN_wglUseFontOutlinesA)( HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf );
+typedef BOOL       (GLAPIENTRY *PFN_wglUseFontOutlinesW)( HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf );
+typedef void       (GLAPIENTRY *PFN_glAccum)( GLenum op, GLfloat value );
+typedef void       (GLAPIENTRY *PFN_glAlphaFunc)( GLenum func, GLfloat ref );
+typedef GLboolean  (GLAPIENTRY *PFN_glAreTexturesResident)( GLsizei n, const GLuint *textures, GLboolean *residences );
+typedef void       (GLAPIENTRY *PFN_glArrayElement)( GLint i );
+typedef void       (GLAPIENTRY *PFN_glBegin)( GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glBindTexture)( GLenum target, GLuint texture );
+typedef void       (GLAPIENTRY *PFN_glBitmap)( GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap );
+typedef void       (GLAPIENTRY *PFN_glBlendFunc)( GLenum sfactor, GLenum dfactor );
+typedef void       (GLAPIENTRY *PFN_glCallList)( GLuint list );
+typedef void       (GLAPIENTRY *PFN_glCallLists)( GLsizei n, GLenum type, const void *lists );
+typedef void       (GLAPIENTRY *PFN_glClear)( GLbitfield mask );
+typedef void       (GLAPIENTRY *PFN_glClearAccum)( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
+typedef void       (GLAPIENTRY *PFN_glClearColor)( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
+typedef void       (GLAPIENTRY *PFN_glClearDepth)( GLdouble depth );
+typedef void       (GLAPIENTRY *PFN_glClearIndex)( GLfloat c );
+typedef void       (GLAPIENTRY *PFN_glClearStencil)( GLint s );
+typedef void       (GLAPIENTRY *PFN_glClipPlane)( GLenum plane, const GLdouble *equation );
+typedef void       (GLAPIENTRY *PFN_glColor3b)( GLbyte red, GLbyte green, GLbyte blue );
+typedef void       (GLAPIENTRY *PFN_glColor3bv)( const GLbyte *v );
+typedef void       (GLAPIENTRY *PFN_glColor3d)( GLdouble red, GLdouble green, GLdouble blue );
+typedef void       (GLAPIENTRY *PFN_glColor3dv)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glColor3f)( GLfloat red, GLfloat green, GLfloat blue );
+typedef void       (GLAPIENTRY *PFN_glColor3fv)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glColor3i)( GLint red, GLint green, GLint blue );
+typedef void       (GLAPIENTRY *PFN_glColor3iv)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glColor3s)( GLshort red, GLshort green, GLshort blue );
+typedef void       (GLAPIENTRY *PFN_glColor3sv)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glColor3ub)( GLubyte red, GLubyte green, GLubyte blue );
+typedef void       (GLAPIENTRY *PFN_glColor3ubv)( const GLubyte *v );
+typedef void       (GLAPIENTRY *PFN_glColor3ui)( GLuint red, GLuint green, GLuint blue );
+typedef void       (GLAPIENTRY *PFN_glColor3uiv)( const GLuint *v );
+typedef void       (GLAPIENTRY *PFN_glColor3us)( GLushort red, GLushort green, GLushort blue );
+typedef void       (GLAPIENTRY *PFN_glColor3usv)( const GLushort *v );
+typedef void       (GLAPIENTRY *PFN_glColor4b)( GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha );
+typedef void       (GLAPIENTRY *PFN_glColor4bv)( const GLbyte *v );
+typedef void       (GLAPIENTRY *PFN_glColor4d)( GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha );
+typedef void       (GLAPIENTRY *PFN_glColor4dv)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glColor4f)( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
+typedef void       (GLAPIENTRY *PFN_glColor4fv)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glColor4i)( GLint red, GLint green, GLint blue, GLint alpha );
+typedef void       (GLAPIENTRY *PFN_glColor4iv)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glColor4s)( GLshort red, GLshort green, GLshort blue, GLshort alpha );
+typedef void       (GLAPIENTRY *PFN_glColor4sv)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glColor4ub)( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha );
+typedef void       (GLAPIENTRY *PFN_glColor4ubv)( const GLubyte *v );
+typedef void       (GLAPIENTRY *PFN_glColor4ui)( GLuint red, GLuint green, GLuint blue, GLuint alpha );
+typedef void       (GLAPIENTRY *PFN_glColor4uiv)( const GLuint *v );
+typedef void       (GLAPIENTRY *PFN_glColor4us)( GLushort red, GLushort green, GLushort blue, GLushort alpha );
+typedef void       (GLAPIENTRY *PFN_glColor4usv)( const GLushort *v );
+typedef void       (GLAPIENTRY *PFN_glColorMask)( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
+typedef void       (GLAPIENTRY *PFN_glColorMaterial)( GLenum face, GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glColorPointer)( GLint size, GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glCopyPixels)( GLint x, GLint y, GLsizei width, GLsizei height, GLenum type );
+typedef void       (GLAPIENTRY *PFN_glCopyTexImage1D)( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
+typedef void       (GLAPIENTRY *PFN_glCopyTexImage2D)( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
+typedef void       (GLAPIENTRY *PFN_glCopyTexSubImage1D)( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
+typedef void       (GLAPIENTRY *PFN_glCopyTexSubImage2D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glCullFace)( GLenum mode );
+typedef GLint      (GLAPIENTRY *PFN_glDebugEntry)( GLint unknown1, GLint unknown2 );
+typedef void       (GLAPIENTRY *PFN_glDeleteLists)( GLuint list, GLsizei range );
+typedef void       (GLAPIENTRY *PFN_glDeleteTextures)( GLsizei n, const GLuint *textures );
+typedef void       (GLAPIENTRY *PFN_glDepthFunc)( GLenum func );
+typedef void       (GLAPIENTRY *PFN_glDepthMask)( GLboolean flag );
+typedef void       (GLAPIENTRY *PFN_glDepthRange)( GLdouble n, GLdouble f );
+typedef void       (GLAPIENTRY *PFN_glDisable)( GLenum cap );
+typedef void       (GLAPIENTRY *PFN_glDisableClientState)( GLenum array );
+typedef void       (GLAPIENTRY *PFN_glDrawArrays)( GLenum mode, GLint first, GLsizei count );
+typedef void       (GLAPIENTRY *PFN_glDrawBuffer)( GLenum buf );
+typedef void       (GLAPIENTRY *PFN_glDrawElements)( GLenum mode, GLsizei count, GLenum type, const void *indices );
+typedef void       (GLAPIENTRY *PFN_glDrawPixels)( GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glEdgeFlag)( GLboolean flag );
+typedef void       (GLAPIENTRY *PFN_glEdgeFlagPointer)( GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glEdgeFlagv)( const GLboolean *flag );
+typedef void       (GLAPIENTRY *PFN_glEnable)( GLenum cap );
+typedef void       (GLAPIENTRY *PFN_glEnableClientState)( GLenum array );
+typedef void       (GLAPIENTRY *PFN_glEnd)(void);
+typedef void       (GLAPIENTRY *PFN_glEndList)(void);
+typedef void       (GLAPIENTRY *PFN_glEvalCoord1d)( GLdouble u );
+typedef void       (GLAPIENTRY *PFN_glEvalCoord1dv)( const GLdouble *u );
+typedef void       (GLAPIENTRY *PFN_glEvalCoord1f)( GLfloat u );
+typedef void       (GLAPIENTRY *PFN_glEvalCoord1fv)( const GLfloat *u );
+typedef void       (GLAPIENTRY *PFN_glEvalCoord2d)( GLdouble u, GLdouble v );
+typedef void       (GLAPIENTRY *PFN_glEvalCoord2dv)( const GLdouble *u );
+typedef void       (GLAPIENTRY *PFN_glEvalCoord2f)( GLfloat u, GLfloat v );
+typedef void       (GLAPIENTRY *PFN_glEvalCoord2fv)( const GLfloat *u );
+typedef void       (GLAPIENTRY *PFN_glEvalMesh1)( GLenum mode, GLint i1, GLint i2 );
+typedef void       (GLAPIENTRY *PFN_glEvalMesh2)( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 );
+typedef void       (GLAPIENTRY *PFN_glEvalPoint1)( GLint i );
+typedef void       (GLAPIENTRY *PFN_glEvalPoint2)( GLint i, GLint j );
+typedef void       (GLAPIENTRY *PFN_glFeedbackBuffer)( GLsizei size, GLenum type, GLfloat *buffer );
+typedef void       (GLAPIENTRY *PFN_glFinish)(void);
+typedef void       (GLAPIENTRY *PFN_glFlush)(void);
+typedef void       (GLAPIENTRY *PFN_glFogf)( GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glFogfv)( GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glFogi)( GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glFogiv)( GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glFrontFace)( GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glFrustum)( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
+typedef GLuint     (GLAPIENTRY *PFN_glGenLists)( GLsizei range );
+typedef void       (GLAPIENTRY *PFN_glGenTextures)( GLsizei n, GLuint *textures );
+typedef void       (GLAPIENTRY *PFN_glGetBooleanv)( GLenum pname, GLboolean *data );
+typedef void       (GLAPIENTRY *PFN_glGetClipPlane)( GLenum plane, GLdouble *equation );
+typedef void       (GLAPIENTRY *PFN_glGetDoublev)( GLenum pname, GLdouble *data );
+typedef GLenum     (GLAPIENTRY *PFN_glGetError)(void);
+typedef void       (GLAPIENTRY *PFN_glGetFloatv)( GLenum pname, GLfloat *data );
+typedef void       (GLAPIENTRY *PFN_glGetIntegerv)( GLenum pname, GLint *data );
+typedef void       (GLAPIENTRY *PFN_glGetLightfv)( GLenum light, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetLightiv)( GLenum light, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetMapdv)( GLenum target, GLenum query, GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glGetMapfv)( GLenum target, GLenum query, GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glGetMapiv)( GLenum target, GLenum query, GLint *v );
+typedef void       (GLAPIENTRY *PFN_glGetMaterialfv)( GLenum face, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetMaterialiv)( GLenum face, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetPixelMapfv)( GLenum map, GLfloat *values );
+typedef void       (GLAPIENTRY *PFN_glGetPixelMapuiv)( GLenum map, GLuint *values );
+typedef void       (GLAPIENTRY *PFN_glGetPixelMapusv)( GLenum map, GLushort *values );
+typedef void       (GLAPIENTRY *PFN_glGetPointerv)( GLenum pname, void **params );
+typedef void       (GLAPIENTRY *PFN_glGetPolygonStipple)( GLubyte *mask );
+typedef const GLubyte * (GLAPIENTRY *PFN_glGetString)( GLenum name );
+typedef void       (GLAPIENTRY *PFN_glGetTexEnvfv)( GLenum target, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetTexEnviv)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetTexGendv)( GLenum coord, GLenum pname, GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glGetTexGenfv)( GLenum coord, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetTexGeniv)( GLenum coord, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetTexImage)( GLenum target, GLint level, GLenum format, GLenum type, void *pixels );
+typedef void       (GLAPIENTRY *PFN_glGetTexLevelParameterfv)( GLenum target, GLint level, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetTexLevelParameteriv)( GLenum target, GLint level, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetTexParameterfv)( GLenum target, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetTexParameteriv)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glHint)( GLenum target, GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glIndexMask)( GLuint mask );
+typedef void       (GLAPIENTRY *PFN_glIndexPointer)( GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glIndexd)( GLdouble c );
+typedef void       (GLAPIENTRY *PFN_glIndexdv)( const GLdouble *c );
+typedef void       (GLAPIENTRY *PFN_glIndexf)( GLfloat c );
+typedef void       (GLAPIENTRY *PFN_glIndexfv)( const GLfloat *c );
+typedef void       (GLAPIENTRY *PFN_glIndexi)( GLint c );
+typedef void       (GLAPIENTRY *PFN_glIndexiv)( const GLint *c );
+typedef void       (GLAPIENTRY *PFN_glIndexs)( GLshort c );
+typedef void       (GLAPIENTRY *PFN_glIndexsv)( const GLshort *c );
+typedef void       (GLAPIENTRY *PFN_glIndexub)( GLubyte c );
+typedef void       (GLAPIENTRY *PFN_glIndexubv)( const GLubyte *c );
+typedef void       (GLAPIENTRY *PFN_glInitNames)(void);
+typedef void       (GLAPIENTRY *PFN_glInterleavedArrays)( GLenum format, GLsizei stride, const void *pointer );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsEnabled)( GLenum cap );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsList)( GLuint list );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsTexture)( GLuint texture );
+typedef void       (GLAPIENTRY *PFN_glLightModelf)( GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glLightModelfv)( GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glLightModeli)( GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glLightModeliv)( GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glLightf)( GLenum light, GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glLightfv)( GLenum light, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glLighti)( GLenum light, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glLightiv)( GLenum light, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glLineStipple)( GLint factor, GLushort pattern );
+typedef void       (GLAPIENTRY *PFN_glLineWidth)( GLfloat width );
+typedef void       (GLAPIENTRY *PFN_glListBase)( GLuint base );
+typedef void       (GLAPIENTRY *PFN_glLoadIdentity)(void);
+typedef void       (GLAPIENTRY *PFN_glLoadMatrixd)( const GLdouble *m );
+typedef void       (GLAPIENTRY *PFN_glLoadMatrixf)( const GLfloat *m );
+typedef void       (GLAPIENTRY *PFN_glLoadName)( GLuint name );
+typedef void       (GLAPIENTRY *PFN_glLogicOp)( GLenum opcode );
+typedef void       (GLAPIENTRY *PFN_glMap1d)( GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points );
+typedef void       (GLAPIENTRY *PFN_glMap1f)( GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points );
+typedef void       (GLAPIENTRY *PFN_glMap2d)( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points );
+typedef void       (GLAPIENTRY *PFN_glMap2f)( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points );
+typedef void       (GLAPIENTRY *PFN_glMapGrid1d)( GLint un, GLdouble u1, GLdouble u2 );
+typedef void       (GLAPIENTRY *PFN_glMapGrid1f)( GLint un, GLfloat u1, GLfloat u2 );
+typedef void       (GLAPIENTRY *PFN_glMapGrid2d)( GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 );
+typedef void       (GLAPIENTRY *PFN_glMapGrid2f)( GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 );
+typedef void       (GLAPIENTRY *PFN_glMaterialf)( GLenum face, GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glMaterialfv)( GLenum face, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glMateriali)( GLenum face, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glMaterialiv)( GLenum face, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glMatrixMode)( GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glMultMatrixd)( const GLdouble *m );
+typedef void       (GLAPIENTRY *PFN_glMultMatrixf)( const GLfloat *m );
+typedef void       (GLAPIENTRY *PFN_glNewList)( GLuint list, GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glNormal3b)( GLbyte nx, GLbyte ny, GLbyte nz );
+typedef void       (GLAPIENTRY *PFN_glNormal3bv)( const GLbyte *v );
+typedef void       (GLAPIENTRY *PFN_glNormal3d)( GLdouble nx, GLdouble ny, GLdouble nz );
+typedef void       (GLAPIENTRY *PFN_glNormal3dv)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glNormal3f)( GLfloat nx, GLfloat ny, GLfloat nz );
+typedef void       (GLAPIENTRY *PFN_glNormal3fv)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glNormal3i)( GLint nx, GLint ny, GLint nz );
+typedef void       (GLAPIENTRY *PFN_glNormal3iv)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glNormal3s)( GLshort nx, GLshort ny, GLshort nz );
+typedef void       (GLAPIENTRY *PFN_glNormal3sv)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glNormalPointer)( GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glOrtho)( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
+typedef void       (GLAPIENTRY *PFN_glPassThrough)( GLfloat token );
+typedef void       (GLAPIENTRY *PFN_glPixelMapfv)( GLenum map, GLsizei mapsize, const GLfloat *values );
+typedef void       (GLAPIENTRY *PFN_glPixelMapuiv)( GLenum map, GLsizei mapsize, const GLuint *values );
+typedef void       (GLAPIENTRY *PFN_glPixelMapusv)( GLenum map, GLsizei mapsize, const GLushort *values );
+typedef void       (GLAPIENTRY *PFN_glPixelStoref)( GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glPixelStorei)( GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glPixelTransferf)( GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glPixelTransferi)( GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glPixelZoom)( GLfloat xfactor, GLfloat yfactor );
+typedef void       (GLAPIENTRY *PFN_glPointSize)( GLfloat size );
+typedef void       (GLAPIENTRY *PFN_glPolygonMode)( GLenum face, GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glPolygonOffset)( GLfloat factor, GLfloat units );
+typedef void       (GLAPIENTRY *PFN_glPolygonStipple)( const GLubyte *mask );
+typedef void       (GLAPIENTRY *PFN_glPopAttrib)(void);
+typedef void       (GLAPIENTRY *PFN_glPopClientAttrib)(void);
+typedef void       (GLAPIENTRY *PFN_glPopMatrix)(void);
+typedef void       (GLAPIENTRY *PFN_glPopName)(void);
+typedef void       (GLAPIENTRY *PFN_glPrioritizeTextures)( GLsizei n, const GLuint *textures, const GLfloat *priorities );
+typedef void       (GLAPIENTRY *PFN_glPushAttrib)( GLbitfield mask );
+typedef void       (GLAPIENTRY *PFN_glPushClientAttrib)( GLbitfield mask );
+typedef void       (GLAPIENTRY *PFN_glPushMatrix)(void);
+typedef void       (GLAPIENTRY *PFN_glPushName)( GLuint name );
+typedef void       (GLAPIENTRY *PFN_glRasterPos2d)( GLdouble x, GLdouble y );
+typedef void       (GLAPIENTRY *PFN_glRasterPos2dv)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glRasterPos2f)( GLfloat x, GLfloat y );
+typedef void       (GLAPIENTRY *PFN_glRasterPos2fv)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glRasterPos2i)( GLint x, GLint y );
+typedef void       (GLAPIENTRY *PFN_glRasterPos2iv)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glRasterPos2s)( GLshort x, GLshort y );
+typedef void       (GLAPIENTRY *PFN_glRasterPos2sv)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glRasterPos3d)( GLdouble x, GLdouble y, GLdouble z );
+typedef void       (GLAPIENTRY *PFN_glRasterPos3dv)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glRasterPos3f)( GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glRasterPos3fv)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glRasterPos3i)( GLint x, GLint y, GLint z );
+typedef void       (GLAPIENTRY *PFN_glRasterPos3iv)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glRasterPos3s)( GLshort x, GLshort y, GLshort z );
+typedef void       (GLAPIENTRY *PFN_glRasterPos3sv)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glRasterPos4d)( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
+typedef void       (GLAPIENTRY *PFN_glRasterPos4dv)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glRasterPos4f)( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
+typedef void       (GLAPIENTRY *PFN_glRasterPos4fv)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glRasterPos4i)( GLint x, GLint y, GLint z, GLint w );
+typedef void       (GLAPIENTRY *PFN_glRasterPos4iv)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glRasterPos4s)( GLshort x, GLshort y, GLshort z, GLshort w );
+typedef void       (GLAPIENTRY *PFN_glRasterPos4sv)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glReadBuffer)( GLenum src );
+typedef void       (GLAPIENTRY *PFN_glReadPixels)( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels );
+typedef void       (GLAPIENTRY *PFN_glRectd)( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 );
+typedef void       (GLAPIENTRY *PFN_glRectdv)( const GLdouble *v1, const GLdouble *v2 );
+typedef void       (GLAPIENTRY *PFN_glRectf)( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 );
+typedef void       (GLAPIENTRY *PFN_glRectfv)( const GLfloat *v1, const GLfloat *v2 );
+typedef void       (GLAPIENTRY *PFN_glRecti)( GLint x1, GLint y1, GLint x2, GLint y2 );
+typedef void       (GLAPIENTRY *PFN_glRectiv)( const GLint *v1, const GLint *v2 );
+typedef void       (GLAPIENTRY *PFN_glRects)( GLshort x1, GLshort y1, GLshort x2, GLshort y2 );
+typedef void       (GLAPIENTRY *PFN_glRectsv)( const GLshort *v1, const GLshort *v2 );
+typedef GLint      (GLAPIENTRY *PFN_glRenderMode)( GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glRotated)( GLdouble angle, GLdouble x, GLdouble y, GLdouble z );
+typedef void       (GLAPIENTRY *PFN_glRotatef)( GLfloat angle, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glScaled)( GLdouble x, GLdouble y, GLdouble z );
+typedef void       (GLAPIENTRY *PFN_glScalef)( GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glScissor)( GLint x, GLint y, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glSelectBuffer)( GLsizei size, GLuint *buffer );
+typedef void       (GLAPIENTRY *PFN_glShadeModel)( GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glStencilFunc)( GLenum func, GLint ref, GLuint mask );
+typedef void       (GLAPIENTRY *PFN_glStencilMask)( GLuint mask );
+typedef void       (GLAPIENTRY *PFN_glStencilOp)( GLenum fail, GLenum zfail, GLenum zpass );
+typedef void       (GLAPIENTRY *PFN_glTexCoord1d)( GLdouble s );
+typedef void       (GLAPIENTRY *PFN_glTexCoord1dv)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord1f)( GLfloat s );
+typedef void       (GLAPIENTRY *PFN_glTexCoord1fv)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord1i)( GLint s );
+typedef void       (GLAPIENTRY *PFN_glTexCoord1iv)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord1s)( GLshort s );
+typedef void       (GLAPIENTRY *PFN_glTexCoord1sv)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2d)( GLdouble s, GLdouble t );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2dv)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2f)( GLfloat s, GLfloat t );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2fv)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2i)( GLint s, GLint t );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2iv)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2s)( GLshort s, GLshort t );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2sv)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord3d)( GLdouble s, GLdouble t, GLdouble r );
+typedef void       (GLAPIENTRY *PFN_glTexCoord3dv)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord3f)( GLfloat s, GLfloat t, GLfloat r );
+typedef void       (GLAPIENTRY *PFN_glTexCoord3fv)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord3i)( GLint s, GLint t, GLint r );
+typedef void       (GLAPIENTRY *PFN_glTexCoord3iv)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord3s)( GLshort s, GLshort t, GLshort r );
+typedef void       (GLAPIENTRY *PFN_glTexCoord3sv)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord4d)( GLdouble s, GLdouble t, GLdouble r, GLdouble q );
+typedef void       (GLAPIENTRY *PFN_glTexCoord4dv)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord4f)( GLfloat s, GLfloat t, GLfloat r, GLfloat q );
+typedef void       (GLAPIENTRY *PFN_glTexCoord4fv)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord4i)( GLint s, GLint t, GLint r, GLint q );
+typedef void       (GLAPIENTRY *PFN_glTexCoord4iv)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord4s)( GLshort s, GLshort t, GLshort r, GLshort q );
+typedef void       (GLAPIENTRY *PFN_glTexCoord4sv)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoordPointer)( GLint size, GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glTexEnvf)( GLenum target, GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glTexEnvfv)( GLenum target, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glTexEnvi)( GLenum target, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glTexEnviv)( GLenum target, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glTexGend)( GLenum coord, GLenum pname, GLdouble param );
+typedef void       (GLAPIENTRY *PFN_glTexGendv)( GLenum coord, GLenum pname, const GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glTexGenf)( GLenum coord, GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glTexGenfv)( GLenum coord, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glTexGeni)( GLenum coord, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glTexGeniv)( GLenum coord, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glTexImage1D)( GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTexImage2D)( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTexParameterf)( GLenum target, GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glTexParameterfv)( GLenum target, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glTexParameteri)( GLenum target, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glTexParameteriv)( GLenum target, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glTexSubImage1D)( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTexSubImage2D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTranslated)( GLdouble x, GLdouble y, GLdouble z );
+typedef void       (GLAPIENTRY *PFN_glTranslatef)( GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glVertex2d)( GLdouble x, GLdouble y );
+typedef void       (GLAPIENTRY *PFN_glVertex2dv)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertex2f)( GLfloat x, GLfloat y );
+typedef void       (GLAPIENTRY *PFN_glVertex2fv)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glVertex2i)( GLint x, GLint y );
+typedef void       (GLAPIENTRY *PFN_glVertex2iv)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glVertex2s)( GLshort x, GLshort y );
+typedef void       (GLAPIENTRY *PFN_glVertex2sv)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertex3d)( GLdouble x, GLdouble y, GLdouble z );
+typedef void       (GLAPIENTRY *PFN_glVertex3dv)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertex3f)( GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glVertex3fv)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glVertex3i)( GLint x, GLint y, GLint z );
+typedef void       (GLAPIENTRY *PFN_glVertex3iv)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glVertex3s)( GLshort x, GLshort y, GLshort z );
+typedef void       (GLAPIENTRY *PFN_glVertex3sv)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertex4d)( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
+typedef void       (GLAPIENTRY *PFN_glVertex4dv)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertex4f)( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
+typedef void       (GLAPIENTRY *PFN_glVertex4fv)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glVertex4i)( GLint x, GLint y, GLint z, GLint w );
+typedef void       (GLAPIENTRY *PFN_glVertex4iv)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glVertex4s)( GLshort x, GLshort y, GLshort z, GLshort w );
+typedef void       (GLAPIENTRY *PFN_glVertex4sv)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexPointer)( GLint size, GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glViewport)( GLint x, GLint y, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glAccumxOES)( GLenum op, GLfixed value );
+typedef GLboolean  (GLAPIENTRY *PFN_glAcquireKeyedMutexWin32EXT)( GLuint memory, GLuint64 key, GLuint timeout );
+typedef void       (GLAPIENTRY *PFN_glActiveProgramEXT)( GLuint program );
+typedef void       (GLAPIENTRY *PFN_glActiveShaderProgram)( GLuint pipeline, GLuint program );
+typedef void       (GLAPIENTRY *PFN_glActiveStencilFaceEXT)( GLenum face );
+typedef void       (GLAPIENTRY *PFN_glActiveTexture)( GLenum texture );
+typedef void       (GLAPIENTRY *PFN_glActiveTextureARB)( GLenum texture );
+typedef void       (GLAPIENTRY *PFN_glActiveVaryingNV)( GLuint program, const GLchar *name );
+typedef void       (GLAPIENTRY *PFN_glAlphaFragmentOp1ATI)( GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod );
+typedef void       (GLAPIENTRY *PFN_glAlphaFragmentOp2ATI)( GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod );
+typedef void       (GLAPIENTRY *PFN_glAlphaFragmentOp3ATI)( GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod );
+typedef void       (GLAPIENTRY *PFN_glAlphaFuncxOES)( GLenum func, GLfixed ref );
+typedef void       (GLAPIENTRY *PFN_glAlphaToCoverageDitherControlNV)( GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glApplyFramebufferAttachmentCMAAINTEL)(void);
+typedef void       (GLAPIENTRY *PFN_glApplyTextureEXT)( GLenum mode );
+typedef GLboolean  (GLAPIENTRY *PFN_glAreProgramsResidentNV)( GLsizei n, const GLuint *programs, GLboolean *residences );
+typedef GLboolean  (GLAPIENTRY *PFN_glAreTexturesResidentEXT)( GLsizei n, const GLuint *textures, GLboolean *residences );
+typedef void       (GLAPIENTRY *PFN_glArrayElementEXT)( GLint i );
+typedef void       (GLAPIENTRY *PFN_glArrayObjectATI)( GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset );
+typedef GLuint     (GLAPIENTRY *PFN_glAsyncCopyBufferSubDataNVX)( GLsizei waitSemaphoreCount, const GLuint *waitSemaphoreArray, const GLuint64 *fenceValueArray, GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, GLsizei signalSemaphoreCount, const GLuint *signalSemaphoreArray, const GLuint64 *signalValueArray );
+typedef GLuint     (GLAPIENTRY *PFN_glAsyncCopyImageSubDataNVX)( GLsizei waitSemaphoreCount, const GLuint *waitSemaphoreArray, const GLuint64 *waitValueArray, GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, GLsizei signalSemaphoreCount, const GLuint *signalSemaphoreArray, const GLuint64 *signalValueArray );
+typedef void       (GLAPIENTRY *PFN_glAsyncMarkerSGIX)( GLuint marker );
+typedef void       (GLAPIENTRY *PFN_glAttachObjectARB)( GLhandleARB containerObj, GLhandleARB obj );
+typedef void       (GLAPIENTRY *PFN_glAttachShader)( GLuint program, GLuint shader );
+typedef void       (GLAPIENTRY *PFN_glBeginConditionalRender)( GLuint id, GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glBeginConditionalRenderNV)( GLuint id, GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glBeginConditionalRenderNVX)( GLuint id );
+typedef void       (GLAPIENTRY *PFN_glBeginFragmentShaderATI)(void);
+typedef void       (GLAPIENTRY *PFN_glBeginOcclusionQueryNV)( GLuint id );
+typedef void       (GLAPIENTRY *PFN_glBeginPerfMonitorAMD)( GLuint monitor );
+typedef void       (GLAPIENTRY *PFN_glBeginPerfQueryINTEL)( GLuint queryHandle );
+typedef void       (GLAPIENTRY *PFN_glBeginQuery)( GLenum target, GLuint id );
+typedef void       (GLAPIENTRY *PFN_glBeginQueryARB)( GLenum target, GLuint id );
+typedef void       (GLAPIENTRY *PFN_glBeginQueryIndexed)( GLenum target, GLuint index, GLuint id );
+typedef void       (GLAPIENTRY *PFN_glBeginTransformFeedback)( GLenum primitiveMode );
+typedef void       (GLAPIENTRY *PFN_glBeginTransformFeedbackEXT)( GLenum primitiveMode );
+typedef void       (GLAPIENTRY *PFN_glBeginTransformFeedbackNV)( GLenum primitiveMode );
+typedef void       (GLAPIENTRY *PFN_glBeginVertexShaderEXT)(void);
+typedef void       (GLAPIENTRY *PFN_glBeginVideoCaptureNV)( GLuint video_capture_slot );
+typedef void       (GLAPIENTRY *PFN_glBindAttribLocation)( GLuint program, GLuint index, const GLchar *name );
+typedef void       (GLAPIENTRY *PFN_glBindAttribLocationARB)( GLhandleARB programObj, GLuint index, const GLcharARB *name );
+typedef void       (GLAPIENTRY *PFN_glBindBuffer)( GLenum target, GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glBindBufferARB)( GLenum target, GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glBindBufferBase)( GLenum target, GLuint index, GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glBindBufferBaseEXT)( GLenum target, GLuint index, GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glBindBufferBaseNV)( GLenum target, GLuint index, GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glBindBufferOffsetEXT)( GLenum target, GLuint index, GLuint buffer, GLintptr offset );
+typedef void       (GLAPIENTRY *PFN_glBindBufferOffsetNV)( GLenum target, GLuint index, GLuint buffer, GLintptr offset );
+typedef void       (GLAPIENTRY *PFN_glBindBufferRange)( GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size );
+typedef void       (GLAPIENTRY *PFN_glBindBufferRangeEXT)( GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size );
+typedef void       (GLAPIENTRY *PFN_glBindBufferRangeNV)( GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size );
+typedef void       (GLAPIENTRY *PFN_glBindBuffersBase)( GLenum target, GLuint first, GLsizei count, const GLuint *buffers );
+typedef void       (GLAPIENTRY *PFN_glBindBuffersRange)( GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes );
+typedef void       (GLAPIENTRY *PFN_glBindFragDataLocation)( GLuint program, GLuint color, const GLchar *name );
+typedef void       (GLAPIENTRY *PFN_glBindFragDataLocationEXT)( GLuint program, GLuint color, const GLchar *name );
+typedef void       (GLAPIENTRY *PFN_glBindFragDataLocationIndexed)( GLuint program, GLuint colorNumber, GLuint index, const GLchar *name );
+typedef void       (GLAPIENTRY *PFN_glBindFragmentShaderATI)( GLuint id );
+typedef void       (GLAPIENTRY *PFN_glBindFramebuffer)( GLenum target, GLuint framebuffer );
+typedef void       (GLAPIENTRY *PFN_glBindFramebufferEXT)( GLenum target, GLuint framebuffer );
+typedef void       (GLAPIENTRY *PFN_glBindImageTexture)( GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format );
+typedef void       (GLAPIENTRY *PFN_glBindImageTextureEXT)( GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format );
+typedef void       (GLAPIENTRY *PFN_glBindImageTextures)( GLuint first, GLsizei count, const GLuint *textures );
+typedef GLuint     (GLAPIENTRY *PFN_glBindLightParameterEXT)( GLenum light, GLenum value );
+typedef GLuint     (GLAPIENTRY *PFN_glBindMaterialParameterEXT)( GLenum face, GLenum value );
+typedef void       (GLAPIENTRY *PFN_glBindMultiTextureEXT)( GLenum texunit, GLenum target, GLuint texture );
+typedef GLuint     (GLAPIENTRY *PFN_glBindParameterEXT)( GLenum value );
+typedef void       (GLAPIENTRY *PFN_glBindProgramARB)( GLenum target, GLuint program );
+typedef void       (GLAPIENTRY *PFN_glBindProgramNV)( GLenum target, GLuint id );
+typedef void       (GLAPIENTRY *PFN_glBindProgramPipeline)( GLuint pipeline );
+typedef void       (GLAPIENTRY *PFN_glBindRenderbuffer)( GLenum target, GLuint renderbuffer );
+typedef void       (GLAPIENTRY *PFN_glBindRenderbufferEXT)( GLenum target, GLuint renderbuffer );
+typedef void       (GLAPIENTRY *PFN_glBindSampler)( GLuint unit, GLuint sampler );
+typedef void       (GLAPIENTRY *PFN_glBindSamplers)( GLuint first, GLsizei count, const GLuint *samplers );
+typedef void       (GLAPIENTRY *PFN_glBindShadingRateImageNV)( GLuint texture );
+typedef GLuint     (GLAPIENTRY *PFN_glBindTexGenParameterEXT)( GLenum unit, GLenum coord, GLenum value );
+typedef void       (GLAPIENTRY *PFN_glBindTextureEXT)( GLenum target, GLuint texture );
+typedef void       (GLAPIENTRY *PFN_glBindTextureUnit)( GLuint unit, GLuint texture );
+typedef GLuint     (GLAPIENTRY *PFN_glBindTextureUnitParameterEXT)( GLenum unit, GLenum value );
+typedef void       (GLAPIENTRY *PFN_glBindTextures)( GLuint first, GLsizei count, const GLuint *textures );
+typedef void       (GLAPIENTRY *PFN_glBindTransformFeedback)( GLenum target, GLuint id );
+typedef void       (GLAPIENTRY *PFN_glBindTransformFeedbackNV)( GLenum target, GLuint id );
+typedef void       (GLAPIENTRY *PFN_glBindVertexArray)( GLuint array );
+typedef void       (GLAPIENTRY *PFN_glBindVertexArrayAPPLE)( GLuint array );
+typedef void       (GLAPIENTRY *PFN_glBindVertexBuffer)( GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glBindVertexBuffers)( GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides );
+typedef void       (GLAPIENTRY *PFN_glBindVertexShaderEXT)( GLuint id );
+typedef void       (GLAPIENTRY *PFN_glBindVideoCaptureStreamBufferNV)( GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset );
+typedef void       (GLAPIENTRY *PFN_glBindVideoCaptureStreamTextureNV)( GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture );
+typedef void       (GLAPIENTRY *PFN_glBinormal3bEXT)( GLbyte bx, GLbyte by, GLbyte bz );
+typedef void       (GLAPIENTRY *PFN_glBinormal3bvEXT)( const GLbyte *v );
+typedef void       (GLAPIENTRY *PFN_glBinormal3dEXT)( GLdouble bx, GLdouble by, GLdouble bz );
+typedef void       (GLAPIENTRY *PFN_glBinormal3dvEXT)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glBinormal3fEXT)( GLfloat bx, GLfloat by, GLfloat bz );
+typedef void       (GLAPIENTRY *PFN_glBinormal3fvEXT)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glBinormal3iEXT)( GLint bx, GLint by, GLint bz );
+typedef void       (GLAPIENTRY *PFN_glBinormal3ivEXT)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glBinormal3sEXT)( GLshort bx, GLshort by, GLshort bz );
+typedef void       (GLAPIENTRY *PFN_glBinormal3svEXT)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glBinormalPointerEXT)( GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glBitmapxOES)( GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap );
+typedef void       (GLAPIENTRY *PFN_glBlendBarrierKHR)(void);
+typedef void       (GLAPIENTRY *PFN_glBlendBarrierNV)(void);
+typedef void       (GLAPIENTRY *PFN_glBlendColor)( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
+typedef void       (GLAPIENTRY *PFN_glBlendColorEXT)( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
+typedef void       (GLAPIENTRY *PFN_glBlendColorxOES)( GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha );
+typedef void       (GLAPIENTRY *PFN_glBlendEquation)( GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glBlendEquationEXT)( GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glBlendEquationIndexedAMD)( GLuint buf, GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glBlendEquationSeparate)( GLenum modeRGB, GLenum modeAlpha );
+typedef void       (GLAPIENTRY *PFN_glBlendEquationSeparateEXT)( GLenum modeRGB, GLenum modeAlpha );
+typedef void       (GLAPIENTRY *PFN_glBlendEquationSeparateIndexedAMD)( GLuint buf, GLenum modeRGB, GLenum modeAlpha );
+typedef void       (GLAPIENTRY *PFN_glBlendEquationSeparatei)( GLuint buf, GLenum modeRGB, GLenum modeAlpha );
+typedef void       (GLAPIENTRY *PFN_glBlendEquationSeparateiARB)( GLuint buf, GLenum modeRGB, GLenum modeAlpha );
+typedef void       (GLAPIENTRY *PFN_glBlendEquationi)( GLuint buf, GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glBlendEquationiARB)( GLuint buf, GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glBlendFuncIndexedAMD)( GLuint buf, GLenum src, GLenum dst );
+typedef void       (GLAPIENTRY *PFN_glBlendFuncSeparate)( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha );
+typedef void       (GLAPIENTRY *PFN_glBlendFuncSeparateEXT)( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha );
+typedef void       (GLAPIENTRY *PFN_glBlendFuncSeparateINGR)( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha );
+typedef void       (GLAPIENTRY *PFN_glBlendFuncSeparateIndexedAMD)( GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha );
+typedef void       (GLAPIENTRY *PFN_glBlendFuncSeparatei)( GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha );
+typedef void       (GLAPIENTRY *PFN_glBlendFuncSeparateiARB)( GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha );
+typedef void       (GLAPIENTRY *PFN_glBlendFunci)( GLuint buf, GLenum src, GLenum dst );
+typedef void       (GLAPIENTRY *PFN_glBlendFunciARB)( GLuint buf, GLenum src, GLenum dst );
+typedef void       (GLAPIENTRY *PFN_glBlendParameteriNV)( GLenum pname, GLint value );
+typedef void       (GLAPIENTRY *PFN_glBlitFramebuffer)( GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter );
+typedef void       (GLAPIENTRY *PFN_glBlitFramebufferEXT)( GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter );
+typedef void       (GLAPIENTRY *PFN_glBlitNamedFramebuffer)( GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter );
+typedef void       (GLAPIENTRY *PFN_glBufferAddressRangeNV)( GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length );
+typedef void       (GLAPIENTRY *PFN_glBufferAttachMemoryNV)( GLenum target, GLuint memory, GLuint64 offset );
+typedef void       (GLAPIENTRY *PFN_glBufferData)( GLenum target, GLsizeiptr size, const void *data, GLenum usage );
+typedef void       (GLAPIENTRY *PFN_glBufferDataARB)( GLenum target, GLsizeiptrARB size, const void *data, GLenum usage );
+typedef void       (GLAPIENTRY *PFN_glBufferPageCommitmentARB)( GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit );
+typedef void       (GLAPIENTRY *PFN_glBufferParameteriAPPLE)( GLenum target, GLenum pname, GLint param );
+typedef GLuint     (GLAPIENTRY *PFN_glBufferRegionEnabled)(void);
+typedef void       (GLAPIENTRY *PFN_glBufferStorage)( GLenum target, GLsizeiptr size, const void *data, GLbitfield flags );
+typedef void       (GLAPIENTRY *PFN_glBufferStorageExternalEXT)( GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags );
+typedef void       (GLAPIENTRY *PFN_glBufferStorageMemEXT)( GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset );
+typedef void       (GLAPIENTRY *PFN_glBufferSubData)( GLenum target, GLintptr offset, GLsizeiptr size, const void *data );
+typedef void       (GLAPIENTRY *PFN_glBufferSubDataARB)( GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data );
+typedef void       (GLAPIENTRY *PFN_glCallCommandListNV)( GLuint list );
+typedef GLenum     (GLAPIENTRY *PFN_glCheckFramebufferStatus)( GLenum target );
+typedef GLenum     (GLAPIENTRY *PFN_glCheckFramebufferStatusEXT)( GLenum target );
+typedef GLenum     (GLAPIENTRY *PFN_glCheckNamedFramebufferStatus)( GLuint framebuffer, GLenum target );
+typedef GLenum     (GLAPIENTRY *PFN_glCheckNamedFramebufferStatusEXT)( GLuint framebuffer, GLenum target );
+typedef void       (GLAPIENTRY *PFN_glClampColor)( GLenum target, GLenum clamp );
+typedef void       (GLAPIENTRY *PFN_glClampColorARB)( GLenum target, GLenum clamp );
+typedef void       (GLAPIENTRY *PFN_glClearAccumxOES)( GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha );
+typedef void       (GLAPIENTRY *PFN_glClearBufferData)( GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data );
+typedef void       (GLAPIENTRY *PFN_glClearBufferSubData)( GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data );
+typedef void       (GLAPIENTRY *PFN_glClearBufferfi)( GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil );
+typedef void       (GLAPIENTRY *PFN_glClearBufferfv)( GLenum buffer, GLint drawbuffer, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glClearBufferiv)( GLenum buffer, GLint drawbuffer, const GLint *value );
+typedef void       (GLAPIENTRY *PFN_glClearBufferuiv)( GLenum buffer, GLint drawbuffer, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glClearColorIiEXT)( GLint red, GLint green, GLint blue, GLint alpha );
+typedef void       (GLAPIENTRY *PFN_glClearColorIuiEXT)( GLuint red, GLuint green, GLuint blue, GLuint alpha );
+typedef void       (GLAPIENTRY *PFN_glClearColorxOES)( GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha );
+typedef void       (GLAPIENTRY *PFN_glClearDepthdNV)( GLdouble depth );
+typedef void       (GLAPIENTRY *PFN_glClearDepthf)( GLfloat d );
+typedef void       (GLAPIENTRY *PFN_glClearDepthfOES)( GLclampf depth );
+typedef void       (GLAPIENTRY *PFN_glClearDepthxOES)( GLfixed depth );
+typedef void       (GLAPIENTRY *PFN_glClearNamedBufferData)( GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data );
+typedef void       (GLAPIENTRY *PFN_glClearNamedBufferDataEXT)( GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data );
+typedef void       (GLAPIENTRY *PFN_glClearNamedBufferSubData)( GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data );
+typedef void       (GLAPIENTRY *PFN_glClearNamedBufferSubDataEXT)( GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data );
+typedef void       (GLAPIENTRY *PFN_glClearNamedFramebufferfi)( GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil );
+typedef void       (GLAPIENTRY *PFN_glClearNamedFramebufferfv)( GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glClearNamedFramebufferiv)( GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value );
+typedef void       (GLAPIENTRY *PFN_glClearNamedFramebufferuiv)( GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glClearTexImage)( GLuint texture, GLint level, GLenum format, GLenum type, const void *data );
+typedef void       (GLAPIENTRY *PFN_glClearTexSubImage)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data );
+typedef void       (GLAPIENTRY *PFN_glClientActiveTexture)( GLenum texture );
+typedef void       (GLAPIENTRY *PFN_glClientActiveTextureARB)( GLenum texture );
+typedef void       (GLAPIENTRY *PFN_glClientActiveVertexStreamATI)( GLenum stream );
+typedef void       (GLAPIENTRY *PFN_glClientAttribDefaultEXT)( GLbitfield mask );
+typedef void       (GLAPIENTRY *PFN_glClientWaitSemaphoreui64NVX)( GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray );
+typedef GLenum     (GLAPIENTRY *PFN_glClientWaitSync)( GLsync sync, GLbitfield flags, GLuint64 timeout );
+typedef void       (GLAPIENTRY *PFN_glClipControl)( GLenum origin, GLenum depth );
+typedef void       (GLAPIENTRY *PFN_glClipPlanefOES)( GLenum plane, const GLfloat *equation );
+typedef void       (GLAPIENTRY *PFN_glClipPlanexOES)( GLenum plane, const GLfixed *equation );
+typedef void       (GLAPIENTRY *PFN_glColor3fVertex3fSUN)( GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glColor3fVertex3fvSUN)( const GLfloat *c, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glColor3hNV)( GLhalfNV red, GLhalfNV green, GLhalfNV blue );
+typedef void       (GLAPIENTRY *PFN_glColor3hvNV)( const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glColor3xOES)( GLfixed red, GLfixed green, GLfixed blue );
+typedef void       (GLAPIENTRY *PFN_glColor3xvOES)( const GLfixed *components );
+typedef void       (GLAPIENTRY *PFN_glColor4fNormal3fVertex3fSUN)( GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glColor4fNormal3fVertex3fvSUN)( const GLfloat *c, const GLfloat *n, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glColor4hNV)( GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha );
+typedef void       (GLAPIENTRY *PFN_glColor4hvNV)( const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glColor4ubVertex2fSUN)( GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y );
+typedef void       (GLAPIENTRY *PFN_glColor4ubVertex2fvSUN)( const GLubyte *c, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glColor4ubVertex3fSUN)( GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glColor4ubVertex3fvSUN)( const GLubyte *c, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glColor4xOES)( GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha );
+typedef void       (GLAPIENTRY *PFN_glColor4xvOES)( const GLfixed *components );
+typedef void       (GLAPIENTRY *PFN_glColorFormatNV)( GLint size, GLenum type, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glColorFragmentOp1ATI)( GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod );
+typedef void       (GLAPIENTRY *PFN_glColorFragmentOp2ATI)( GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod );
+typedef void       (GLAPIENTRY *PFN_glColorFragmentOp3ATI)( GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod );
+typedef void       (GLAPIENTRY *PFN_glColorMaskIndexedEXT)( GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a );
+typedef void       (GLAPIENTRY *PFN_glColorMaski)( GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a );
+typedef void       (GLAPIENTRY *PFN_glColorP3ui)( GLenum type, GLuint color );
+typedef void       (GLAPIENTRY *PFN_glColorP3uiv)( GLenum type, const GLuint *color );
+typedef void       (GLAPIENTRY *PFN_glColorP4ui)( GLenum type, GLuint color );
+typedef void       (GLAPIENTRY *PFN_glColorP4uiv)( GLenum type, const GLuint *color );
+typedef void       (GLAPIENTRY *PFN_glColorPointerEXT)( GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glColorPointerListIBM)( GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride );
+typedef void       (GLAPIENTRY *PFN_glColorPointervINTEL)( GLint size, GLenum type, const void **pointer );
+typedef void       (GLAPIENTRY *PFN_glColorSubTable)( GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data );
+typedef void       (GLAPIENTRY *PFN_glColorSubTableEXT)( GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data );
+typedef void       (GLAPIENTRY *PFN_glColorTable)( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table );
+typedef void       (GLAPIENTRY *PFN_glColorTableEXT)( GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table );
+typedef void       (GLAPIENTRY *PFN_glColorTableParameterfv)( GLenum target, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glColorTableParameterfvSGI)( GLenum target, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glColorTableParameteriv)( GLenum target, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glColorTableParameterivSGI)( GLenum target, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glColorTableSGI)( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table );
+typedef void       (GLAPIENTRY *PFN_glCombinerInputNV)( GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage );
+typedef void       (GLAPIENTRY *PFN_glCombinerOutputNV)( GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum );
+typedef void       (GLAPIENTRY *PFN_glCombinerParameterfNV)( GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glCombinerParameterfvNV)( GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glCombinerParameteriNV)( GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glCombinerParameterivNV)( GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glCombinerStageParameterfvNV)( GLenum stage, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glCommandListSegmentsNV)( GLuint list, GLuint segments );
+typedef void       (GLAPIENTRY *PFN_glCompileCommandListNV)( GLuint list );
+typedef void       (GLAPIENTRY *PFN_glCompileShader)( GLuint shader );
+typedef void       (GLAPIENTRY *PFN_glCompileShaderARB)( GLhandleARB shaderObj );
+typedef void       (GLAPIENTRY *PFN_glCompileShaderIncludeARB)( GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length );
+typedef void       (GLAPIENTRY *PFN_glCompressedMultiTexImage1DEXT)( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits );
+typedef void       (GLAPIENTRY *PFN_glCompressedMultiTexImage2DEXT)( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits );
+typedef void       (GLAPIENTRY *PFN_glCompressedMultiTexImage3DEXT)( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits );
+typedef void       (GLAPIENTRY *PFN_glCompressedMultiTexSubImage1DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits );
+typedef void       (GLAPIENTRY *PFN_glCompressedMultiTexSubImage2DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits );
+typedef void       (GLAPIENTRY *PFN_glCompressedMultiTexSubImage3DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits );
+typedef void       (GLAPIENTRY *PFN_glCompressedTexImage1D)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data );
+typedef void       (GLAPIENTRY *PFN_glCompressedTexImage1DARB)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data );
+typedef void       (GLAPIENTRY *PFN_glCompressedTexImage2D)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data );
+typedef void       (GLAPIENTRY *PFN_glCompressedTexImage2DARB)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data );
+typedef void       (GLAPIENTRY *PFN_glCompressedTexImage3D)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data );
+typedef void       (GLAPIENTRY *PFN_glCompressedTexImage3DARB)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data );
+typedef void       (GLAPIENTRY *PFN_glCompressedTexSubImage1D)( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data );
+typedef void       (GLAPIENTRY *PFN_glCompressedTexSubImage1DARB)( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data );
+typedef void       (GLAPIENTRY *PFN_glCompressedTexSubImage2D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data );
+typedef void       (GLAPIENTRY *PFN_glCompressedTexSubImage2DARB)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data );
+typedef void       (GLAPIENTRY *PFN_glCompressedTexSubImage3D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data );
+typedef void       (GLAPIENTRY *PFN_glCompressedTexSubImage3DARB)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data );
+typedef void       (GLAPIENTRY *PFN_glCompressedTextureImage1DEXT)( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits );
+typedef void       (GLAPIENTRY *PFN_glCompressedTextureImage2DEXT)( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits );
+typedef void       (GLAPIENTRY *PFN_glCompressedTextureImage3DEXT)( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits );
+typedef void       (GLAPIENTRY *PFN_glCompressedTextureSubImage1D)( GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data );
+typedef void       (GLAPIENTRY *PFN_glCompressedTextureSubImage1DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits );
+typedef void       (GLAPIENTRY *PFN_glCompressedTextureSubImage2D)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data );
+typedef void       (GLAPIENTRY *PFN_glCompressedTextureSubImage2DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits );
+typedef void       (GLAPIENTRY *PFN_glCompressedTextureSubImage3D)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data );
+typedef void       (GLAPIENTRY *PFN_glCompressedTextureSubImage3DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits );
+typedef void       (GLAPIENTRY *PFN_glConservativeRasterParameterfNV)( GLenum pname, GLfloat value );
+typedef void       (GLAPIENTRY *PFN_glConservativeRasterParameteriNV)( GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glConvolutionFilter1D)( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image );
+typedef void       (GLAPIENTRY *PFN_glConvolutionFilter1DEXT)( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image );
+typedef void       (GLAPIENTRY *PFN_glConvolutionFilter2D)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image );
+typedef void       (GLAPIENTRY *PFN_glConvolutionFilter2DEXT)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image );
+typedef void       (GLAPIENTRY *PFN_glConvolutionParameterf)( GLenum target, GLenum pname, GLfloat params );
+typedef void       (GLAPIENTRY *PFN_glConvolutionParameterfEXT)( GLenum target, GLenum pname, GLfloat params );
+typedef void       (GLAPIENTRY *PFN_glConvolutionParameterfv)( GLenum target, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glConvolutionParameterfvEXT)( GLenum target, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glConvolutionParameteri)( GLenum target, GLenum pname, GLint params );
+typedef void       (GLAPIENTRY *PFN_glConvolutionParameteriEXT)( GLenum target, GLenum pname, GLint params );
+typedef void       (GLAPIENTRY *PFN_glConvolutionParameteriv)( GLenum target, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glConvolutionParameterivEXT)( GLenum target, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glConvolutionParameterxOES)( GLenum target, GLenum pname, GLfixed param );
+typedef void       (GLAPIENTRY *PFN_glConvolutionParameterxvOES)( GLenum target, GLenum pname, const GLfixed *params );
+typedef void       (GLAPIENTRY *PFN_glCopyBufferSubData)( GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size );
+typedef void       (GLAPIENTRY *PFN_glCopyColorSubTable)( GLenum target, GLsizei start, GLint x, GLint y, GLsizei width );
+typedef void       (GLAPIENTRY *PFN_glCopyColorSubTableEXT)( GLenum target, GLsizei start, GLint x, GLint y, GLsizei width );
+typedef void       (GLAPIENTRY *PFN_glCopyColorTable)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
+typedef void       (GLAPIENTRY *PFN_glCopyColorTableSGI)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
+typedef void       (GLAPIENTRY *PFN_glCopyConvolutionFilter1D)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
+typedef void       (GLAPIENTRY *PFN_glCopyConvolutionFilter1DEXT)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
+typedef void       (GLAPIENTRY *PFN_glCopyConvolutionFilter2D)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glCopyConvolutionFilter2DEXT)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glCopyImageSubData)( GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth );
+typedef void       (GLAPIENTRY *PFN_glCopyImageSubDataNV)( GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth );
+typedef void       (GLAPIENTRY *PFN_glCopyMultiTexImage1DEXT)( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
+typedef void       (GLAPIENTRY *PFN_glCopyMultiTexImage2DEXT)( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
+typedef void       (GLAPIENTRY *PFN_glCopyMultiTexSubImage1DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
+typedef void       (GLAPIENTRY *PFN_glCopyMultiTexSubImage2DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glCopyMultiTexSubImage3DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glCopyNamedBufferSubData)( GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size );
+typedef void       (GLAPIENTRY *PFN_glCopyPathNV)( GLuint resultPath, GLuint srcPath );
+typedef void       (GLAPIENTRY *PFN_glCopyTexImage1DEXT)( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
+typedef void       (GLAPIENTRY *PFN_glCopyTexImage2DEXT)( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
+typedef void       (GLAPIENTRY *PFN_glCopyTexSubImage1DEXT)( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
+typedef void       (GLAPIENTRY *PFN_glCopyTexSubImage2DEXT)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glCopyTexSubImage3D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glCopyTexSubImage3DEXT)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glCopyTextureImage1DEXT)( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
+typedef void       (GLAPIENTRY *PFN_glCopyTextureImage2DEXT)( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
+typedef void       (GLAPIENTRY *PFN_glCopyTextureSubImage1D)( GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
+typedef void       (GLAPIENTRY *PFN_glCopyTextureSubImage1DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
+typedef void       (GLAPIENTRY *PFN_glCopyTextureSubImage2D)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glCopyTextureSubImage2DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glCopyTextureSubImage3D)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glCopyTextureSubImage3DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glCoverFillPathInstancedNV)( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues );
+typedef void       (GLAPIENTRY *PFN_glCoverFillPathNV)( GLuint path, GLenum coverMode );
+typedef void       (GLAPIENTRY *PFN_glCoverStrokePathInstancedNV)( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues );
+typedef void       (GLAPIENTRY *PFN_glCoverStrokePathNV)( GLuint path, GLenum coverMode );
+typedef void       (GLAPIENTRY *PFN_glCoverageModulationNV)( GLenum components );
+typedef void       (GLAPIENTRY *PFN_glCoverageModulationTableNV)( GLsizei n, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glCreateBuffers)( GLsizei n, GLuint *buffers );
+typedef void       (GLAPIENTRY *PFN_glCreateCommandListsNV)( GLsizei n, GLuint *lists );
+typedef void       (GLAPIENTRY *PFN_glCreateFramebuffers)( GLsizei n, GLuint *framebuffers );
+typedef void       (GLAPIENTRY *PFN_glCreateMemoryObjectsEXT)( GLsizei n, GLuint *memoryObjects );
+typedef void       (GLAPIENTRY *PFN_glCreatePerfQueryINTEL)( GLuint queryId, GLuint *queryHandle );
+typedef GLuint     (GLAPIENTRY *PFN_glCreateProgram)(void);
+typedef GLhandleARB (GLAPIENTRY *PFN_glCreateProgramObjectARB)(void);
+typedef void       (GLAPIENTRY *PFN_glCreateProgramPipelines)( GLsizei n, GLuint *pipelines );
+typedef GLuint     (GLAPIENTRY *PFN_glCreateProgressFenceNVX)(void);
+typedef void       (GLAPIENTRY *PFN_glCreateQueries)( GLenum target, GLsizei n, GLuint *ids );
+typedef void       (GLAPIENTRY *PFN_glCreateRenderbuffers)( GLsizei n, GLuint *renderbuffers );
+typedef void       (GLAPIENTRY *PFN_glCreateSamplers)( GLsizei n, GLuint *samplers );
+typedef GLuint     (GLAPIENTRY *PFN_glCreateShader)( GLenum type );
+typedef GLhandleARB (GLAPIENTRY *PFN_glCreateShaderObjectARB)( GLenum shaderType );
+typedef GLuint     (GLAPIENTRY *PFN_glCreateShaderProgramEXT)( GLenum type, const GLchar *string );
+typedef GLuint     (GLAPIENTRY *PFN_glCreateShaderProgramv)( GLenum type, GLsizei count, const GLchar *const*strings );
+typedef void       (GLAPIENTRY *PFN_glCreateStatesNV)( GLsizei n, GLuint *states );
+typedef GLsync     (GLAPIENTRY *PFN_glCreateSyncFromCLeventARB)( struct _cl_context *context, struct _cl_event *event, GLbitfield flags );
+typedef void       (GLAPIENTRY *PFN_glCreateTextures)( GLenum target, GLsizei n, GLuint *textures );
+typedef void       (GLAPIENTRY *PFN_glCreateTransformFeedbacks)( GLsizei n, GLuint *ids );
+typedef void       (GLAPIENTRY *PFN_glCreateVertexArrays)( GLsizei n, GLuint *arrays );
+typedef void       (GLAPIENTRY *PFN_glCullParameterdvEXT)( GLenum pname, GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glCullParameterfvEXT)( GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glCurrentPaletteMatrixARB)( GLint index );
+typedef void       (GLAPIENTRY *PFN_glDebugMessageCallback)( GLDEBUGPROC callback, const void *userParam );
+typedef void       (GLAPIENTRY *PFN_glDebugMessageCallbackAMD)( GLDEBUGPROCAMD callback, void *userParam );
+typedef void       (GLAPIENTRY *PFN_glDebugMessageCallbackARB)( GLDEBUGPROCARB callback, const void *userParam );
+typedef void       (GLAPIENTRY *PFN_glDebugMessageControl)( GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled );
+typedef void       (GLAPIENTRY *PFN_glDebugMessageControlARB)( GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled );
+typedef void       (GLAPIENTRY *PFN_glDebugMessageEnableAMD)( GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled );
+typedef void       (GLAPIENTRY *PFN_glDebugMessageInsert)( GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf );
+typedef void       (GLAPIENTRY *PFN_glDebugMessageInsertAMD)( GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf );
+typedef void       (GLAPIENTRY *PFN_glDebugMessageInsertARB)( GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf );
+typedef void       (GLAPIENTRY *PFN_glDeformSGIX)( GLbitfield mask );
+typedef void       (GLAPIENTRY *PFN_glDeformationMap3dSGIX)( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points );
+typedef void       (GLAPIENTRY *PFN_glDeformationMap3fSGIX)( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points );
+typedef void       (GLAPIENTRY *PFN_glDeleteAsyncMarkersSGIX)( GLuint marker, GLsizei range );
+typedef void       (GLAPIENTRY *PFN_glDeleteBufferRegion)( GLenum region );
+typedef void       (GLAPIENTRY *PFN_glDeleteBuffers)( GLsizei n, const GLuint *buffers );
+typedef void       (GLAPIENTRY *PFN_glDeleteBuffersARB)( GLsizei n, const GLuint *buffers );
+typedef void       (GLAPIENTRY *PFN_glDeleteCommandListsNV)( GLsizei n, const GLuint *lists );
+typedef void       (GLAPIENTRY *PFN_glDeleteFencesAPPLE)( GLsizei n, const GLuint *fences );
+typedef void       (GLAPIENTRY *PFN_glDeleteFencesNV)( GLsizei n, const GLuint *fences );
+typedef void       (GLAPIENTRY *PFN_glDeleteFragmentShaderATI)( GLuint id );
+typedef void       (GLAPIENTRY *PFN_glDeleteFramebuffers)( GLsizei n, const GLuint *framebuffers );
+typedef void       (GLAPIENTRY *PFN_glDeleteFramebuffersEXT)( GLsizei n, const GLuint *framebuffers );
+typedef void       (GLAPIENTRY *PFN_glDeleteMemoryObjectsEXT)( GLsizei n, const GLuint *memoryObjects );
+typedef void       (GLAPIENTRY *PFN_glDeleteNamedStringARB)( GLint namelen, const GLchar *name );
+typedef void       (GLAPIENTRY *PFN_glDeleteNamesAMD)( GLenum identifier, GLuint num, const GLuint *names );
+typedef void       (GLAPIENTRY *PFN_glDeleteObjectARB)( GLhandleARB obj );
+typedef void       (GLAPIENTRY *PFN_glDeleteObjectBufferATI)( GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glDeleteOcclusionQueriesNV)( GLsizei n, const GLuint *ids );
+typedef void       (GLAPIENTRY *PFN_glDeletePathsNV)( GLuint path, GLsizei range );
+typedef void       (GLAPIENTRY *PFN_glDeletePerfMonitorsAMD)( GLsizei n, GLuint *monitors );
+typedef void       (GLAPIENTRY *PFN_glDeletePerfQueryINTEL)( GLuint queryHandle );
+typedef void       (GLAPIENTRY *PFN_glDeleteProgram)( GLuint program );
+typedef void       (GLAPIENTRY *PFN_glDeleteProgramPipelines)( GLsizei n, const GLuint *pipelines );
+typedef void       (GLAPIENTRY *PFN_glDeleteProgramsARB)( GLsizei n, const GLuint *programs );
+typedef void       (GLAPIENTRY *PFN_glDeleteProgramsNV)( GLsizei n, const GLuint *programs );
+typedef void       (GLAPIENTRY *PFN_glDeleteQueries)( GLsizei n, const GLuint *ids );
+typedef void       (GLAPIENTRY *PFN_glDeleteQueriesARB)( GLsizei n, const GLuint *ids );
+typedef void       (GLAPIENTRY *PFN_glDeleteQueryResourceTagNV)( GLsizei n, const GLint *tagIds );
+typedef void       (GLAPIENTRY *PFN_glDeleteRenderbuffers)( GLsizei n, const GLuint *renderbuffers );
+typedef void       (GLAPIENTRY *PFN_glDeleteRenderbuffersEXT)( GLsizei n, const GLuint *renderbuffers );
+typedef void       (GLAPIENTRY *PFN_glDeleteSamplers)( GLsizei count, const GLuint *samplers );
+typedef void       (GLAPIENTRY *PFN_glDeleteSemaphoresEXT)( GLsizei n, const GLuint *semaphores );
+typedef void       (GLAPIENTRY *PFN_glDeleteShader)( GLuint shader );
+typedef void       (GLAPIENTRY *PFN_glDeleteStatesNV)( GLsizei n, const GLuint *states );
+typedef void       (GLAPIENTRY *PFN_glDeleteSync)( GLsync sync );
+typedef void       (GLAPIENTRY *PFN_glDeleteTexturesEXT)( GLsizei n, const GLuint *textures );
+typedef void       (GLAPIENTRY *PFN_glDeleteTransformFeedbacks)( GLsizei n, const GLuint *ids );
+typedef void       (GLAPIENTRY *PFN_glDeleteTransformFeedbacksNV)( GLsizei n, const GLuint *ids );
+typedef void       (GLAPIENTRY *PFN_glDeleteVertexArrays)( GLsizei n, const GLuint *arrays );
+typedef void       (GLAPIENTRY *PFN_glDeleteVertexArraysAPPLE)( GLsizei n, const GLuint *arrays );
+typedef void       (GLAPIENTRY *PFN_glDeleteVertexShaderEXT)( GLuint id );
+typedef void       (GLAPIENTRY *PFN_glDepthBoundsEXT)( GLclampd zmin, GLclampd zmax );
+typedef void       (GLAPIENTRY *PFN_glDepthBoundsdNV)( GLdouble zmin, GLdouble zmax );
+typedef void       (GLAPIENTRY *PFN_glDepthRangeArraydvNV)( GLuint first, GLsizei count, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glDepthRangeArrayv)( GLuint first, GLsizei count, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glDepthRangeIndexed)( GLuint index, GLdouble n, GLdouble f );
+typedef void       (GLAPIENTRY *PFN_glDepthRangeIndexeddNV)( GLuint index, GLdouble n, GLdouble f );
+typedef void       (GLAPIENTRY *PFN_glDepthRangedNV)( GLdouble zNear, GLdouble zFar );
+typedef void       (GLAPIENTRY *PFN_glDepthRangef)( GLfloat n, GLfloat f );
+typedef void       (GLAPIENTRY *PFN_glDepthRangefOES)( GLclampf n, GLclampf f );
+typedef void       (GLAPIENTRY *PFN_glDepthRangexOES)( GLfixed n, GLfixed f );
+typedef void       (GLAPIENTRY *PFN_glDetachObjectARB)( GLhandleARB containerObj, GLhandleARB attachedObj );
+typedef void       (GLAPIENTRY *PFN_glDetachShader)( GLuint program, GLuint shader );
+typedef void       (GLAPIENTRY *PFN_glDetailTexFuncSGIS)( GLenum target, GLsizei n, const GLfloat *points );
+typedef void       (GLAPIENTRY *PFN_glDisableClientStateIndexedEXT)( GLenum array, GLuint index );
+typedef void       (GLAPIENTRY *PFN_glDisableClientStateiEXT)( GLenum array, GLuint index );
+typedef void       (GLAPIENTRY *PFN_glDisableIndexedEXT)( GLenum target, GLuint index );
+typedef void       (GLAPIENTRY *PFN_glDisableVariantClientStateEXT)( GLuint id );
+typedef void       (GLAPIENTRY *PFN_glDisableVertexArrayAttrib)( GLuint vaobj, GLuint index );
+typedef void       (GLAPIENTRY *PFN_glDisableVertexArrayAttribEXT)( GLuint vaobj, GLuint index );
+typedef void       (GLAPIENTRY *PFN_glDisableVertexArrayEXT)( GLuint vaobj, GLenum array );
+typedef void       (GLAPIENTRY *PFN_glDisableVertexAttribAPPLE)( GLuint index, GLenum pname );
+typedef void       (GLAPIENTRY *PFN_glDisableVertexAttribArray)( GLuint index );
+typedef void       (GLAPIENTRY *PFN_glDisableVertexAttribArrayARB)( GLuint index );
+typedef void       (GLAPIENTRY *PFN_glDisablei)( GLenum target, GLuint index );
+typedef void       (GLAPIENTRY *PFN_glDispatchCompute)( GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z );
+typedef void       (GLAPIENTRY *PFN_glDispatchComputeGroupSizeARB)( GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z );
+typedef void       (GLAPIENTRY *PFN_glDispatchComputeIndirect)( GLintptr indirect );
+typedef void       (GLAPIENTRY *PFN_glDrawArraysEXT)( GLenum mode, GLint first, GLsizei count );
+typedef void       (GLAPIENTRY *PFN_glDrawArraysIndirect)( GLenum mode, const void *indirect );
+typedef void       (GLAPIENTRY *PFN_glDrawArraysInstanced)( GLenum mode, GLint first, GLsizei count, GLsizei instancecount );
+typedef void       (GLAPIENTRY *PFN_glDrawArraysInstancedARB)( GLenum mode, GLint first, GLsizei count, GLsizei primcount );
+typedef void       (GLAPIENTRY *PFN_glDrawArraysInstancedBaseInstance)( GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance );
+typedef void       (GLAPIENTRY *PFN_glDrawArraysInstancedEXT)( GLenum mode, GLint start, GLsizei count, GLsizei primcount );
+typedef void       (GLAPIENTRY *PFN_glDrawBufferRegion)( GLenum region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest );
+typedef void       (GLAPIENTRY *PFN_glDrawBuffers)( GLsizei n, const GLenum *bufs );
+typedef void       (GLAPIENTRY *PFN_glDrawBuffersARB)( GLsizei n, const GLenum *bufs );
+typedef void       (GLAPIENTRY *PFN_glDrawBuffersATI)( GLsizei n, const GLenum *bufs );
+typedef void       (GLAPIENTRY *PFN_glDrawCommandsAddressNV)( GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count );
+typedef void       (GLAPIENTRY *PFN_glDrawCommandsNV)( GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count );
+typedef void       (GLAPIENTRY *PFN_glDrawCommandsStatesAddressNV)( const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count );
+typedef void       (GLAPIENTRY *PFN_glDrawCommandsStatesNV)( GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count );
+typedef void       (GLAPIENTRY *PFN_glDrawElementArrayAPPLE)( GLenum mode, GLint first, GLsizei count );
+typedef void       (GLAPIENTRY *PFN_glDrawElementArrayATI)( GLenum mode, GLsizei count );
+typedef void       (GLAPIENTRY *PFN_glDrawElementsBaseVertex)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex );
+typedef void       (GLAPIENTRY *PFN_glDrawElementsIndirect)( GLenum mode, GLenum type, const void *indirect );
+typedef void       (GLAPIENTRY *PFN_glDrawElementsInstanced)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount );
+typedef void       (GLAPIENTRY *PFN_glDrawElementsInstancedARB)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount );
+typedef void       (GLAPIENTRY *PFN_glDrawElementsInstancedBaseInstance)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance );
+typedef void       (GLAPIENTRY *PFN_glDrawElementsInstancedBaseVertex)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex );
+typedef void       (GLAPIENTRY *PFN_glDrawElementsInstancedBaseVertexBaseInstance)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance );
+typedef void       (GLAPIENTRY *PFN_glDrawElementsInstancedEXT)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount );
+typedef void       (GLAPIENTRY *PFN_glDrawMeshArraysSUN)( GLenum mode, GLint first, GLsizei count, GLsizei width );
+typedef void       (GLAPIENTRY *PFN_glDrawMeshTasksIndirectNV)( GLintptr indirect );
+typedef void       (GLAPIENTRY *PFN_glDrawMeshTasksNV)( GLuint first, GLuint count );
+typedef void       (GLAPIENTRY *PFN_glDrawRangeElementArrayAPPLE)( GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count );
+typedef void       (GLAPIENTRY *PFN_glDrawRangeElementArrayATI)( GLenum mode, GLuint start, GLuint end, GLsizei count );
+typedef void       (GLAPIENTRY *PFN_glDrawRangeElements)( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices );
+typedef void       (GLAPIENTRY *PFN_glDrawRangeElementsBaseVertex)( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex );
+typedef void       (GLAPIENTRY *PFN_glDrawRangeElementsEXT)( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices );
+typedef void       (GLAPIENTRY *PFN_glDrawTextureNV)( GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1 );
+typedef void       (GLAPIENTRY *PFN_glDrawTransformFeedback)( GLenum mode, GLuint id );
+typedef void       (GLAPIENTRY *PFN_glDrawTransformFeedbackInstanced)( GLenum mode, GLuint id, GLsizei instancecount );
+typedef void       (GLAPIENTRY *PFN_glDrawTransformFeedbackNV)( GLenum mode, GLuint id );
+typedef void       (GLAPIENTRY *PFN_glDrawTransformFeedbackStream)( GLenum mode, GLuint id, GLuint stream );
+typedef void       (GLAPIENTRY *PFN_glDrawTransformFeedbackStreamInstanced)( GLenum mode, GLuint id, GLuint stream, GLsizei instancecount );
+typedef void       (GLAPIENTRY *PFN_glDrawVkImageNV)( GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1 );
+typedef void       (GLAPIENTRY *PFN_glEGLImageTargetTexStorageEXT)( GLenum target, GLeglImageOES image, const GLint* attrib_list );
+typedef void       (GLAPIENTRY *PFN_glEGLImageTargetTextureStorageEXT)( GLuint texture, GLeglImageOES image, const GLint* attrib_list );
+typedef void       (GLAPIENTRY *PFN_glEdgeFlagFormatNV)( GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glEdgeFlagPointerEXT)( GLsizei stride, GLsizei count, const GLboolean *pointer );
+typedef void       (GLAPIENTRY *PFN_glEdgeFlagPointerListIBM)( GLint stride, const GLboolean **pointer, GLint ptrstride );
+typedef void       (GLAPIENTRY *PFN_glElementPointerAPPLE)( GLenum type, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glElementPointerATI)( GLenum type, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glEnableClientStateIndexedEXT)( GLenum array, GLuint index );
+typedef void       (GLAPIENTRY *PFN_glEnableClientStateiEXT)( GLenum array, GLuint index );
+typedef void       (GLAPIENTRY *PFN_glEnableIndexedEXT)( GLenum target, GLuint index );
+typedef void       (GLAPIENTRY *PFN_glEnableVariantClientStateEXT)( GLuint id );
+typedef void       (GLAPIENTRY *PFN_glEnableVertexArrayAttrib)( GLuint vaobj, GLuint index );
+typedef void       (GLAPIENTRY *PFN_glEnableVertexArrayAttribEXT)( GLuint vaobj, GLuint index );
+typedef void       (GLAPIENTRY *PFN_glEnableVertexArrayEXT)( GLuint vaobj, GLenum array );
+typedef void       (GLAPIENTRY *PFN_glEnableVertexAttribAPPLE)( GLuint index, GLenum pname );
+typedef void       (GLAPIENTRY *PFN_glEnableVertexAttribArray)( GLuint index );
+typedef void       (GLAPIENTRY *PFN_glEnableVertexAttribArrayARB)( GLuint index );
+typedef void       (GLAPIENTRY *PFN_glEnablei)( GLenum target, GLuint index );
+typedef void       (GLAPIENTRY *PFN_glEndConditionalRender)(void);
+typedef void       (GLAPIENTRY *PFN_glEndConditionalRenderNV)(void);
+typedef void       (GLAPIENTRY *PFN_glEndConditionalRenderNVX)(void);
+typedef void       (GLAPIENTRY *PFN_glEndFragmentShaderATI)(void);
+typedef void       (GLAPIENTRY *PFN_glEndOcclusionQueryNV)(void);
+typedef void       (GLAPIENTRY *PFN_glEndPerfMonitorAMD)( GLuint monitor );
+typedef void       (GLAPIENTRY *PFN_glEndPerfQueryINTEL)( GLuint queryHandle );
+typedef void       (GLAPIENTRY *PFN_glEndQuery)( GLenum target );
+typedef void       (GLAPIENTRY *PFN_glEndQueryARB)( GLenum target );
+typedef void       (GLAPIENTRY *PFN_glEndQueryIndexed)( GLenum target, GLuint index );
+typedef void       (GLAPIENTRY *PFN_glEndTransformFeedback)(void);
+typedef void       (GLAPIENTRY *PFN_glEndTransformFeedbackEXT)(void);
+typedef void       (GLAPIENTRY *PFN_glEndTransformFeedbackNV)(void);
+typedef void       (GLAPIENTRY *PFN_glEndVertexShaderEXT)(void);
+typedef void       (GLAPIENTRY *PFN_glEndVideoCaptureNV)( GLuint video_capture_slot );
+typedef void       (GLAPIENTRY *PFN_glEvalCoord1xOES)( GLfixed u );
+typedef void       (GLAPIENTRY *PFN_glEvalCoord1xvOES)( const GLfixed *coords );
+typedef void       (GLAPIENTRY *PFN_glEvalCoord2xOES)( GLfixed u, GLfixed v );
+typedef void       (GLAPIENTRY *PFN_glEvalCoord2xvOES)( const GLfixed *coords );
+typedef void       (GLAPIENTRY *PFN_glEvalMapsNV)( GLenum target, GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glEvaluateDepthValuesARB)(void);
+typedef void       (GLAPIENTRY *PFN_glExecuteProgramNV)( GLenum target, GLuint id, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glExtractComponentEXT)( GLuint res, GLuint src, GLuint num );
+typedef void       (GLAPIENTRY *PFN_glFeedbackBufferxOES)( GLsizei n, GLenum type, const GLfixed *buffer );
+typedef GLsync     (GLAPIENTRY *PFN_glFenceSync)( GLenum condition, GLbitfield flags );
+typedef void       (GLAPIENTRY *PFN_glFinalCombinerInputNV)( GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage );
+typedef GLint      (GLAPIENTRY *PFN_glFinishAsyncSGIX)( GLuint *markerp );
+typedef void       (GLAPIENTRY *PFN_glFinishFenceAPPLE)( GLuint fence );
+typedef void       (GLAPIENTRY *PFN_glFinishFenceNV)( GLuint fence );
+typedef void       (GLAPIENTRY *PFN_glFinishObjectAPPLE)( GLenum object, GLint name );
+typedef void       (GLAPIENTRY *PFN_glFinishTextureSUNX)(void);
+typedef void       (GLAPIENTRY *PFN_glFlushMappedBufferRange)( GLenum target, GLintptr offset, GLsizeiptr length );
+typedef void       (GLAPIENTRY *PFN_glFlushMappedBufferRangeAPPLE)( GLenum target, GLintptr offset, GLsizeiptr size );
+typedef void       (GLAPIENTRY *PFN_glFlushMappedNamedBufferRange)( GLuint buffer, GLintptr offset, GLsizeiptr length );
+typedef void       (GLAPIENTRY *PFN_glFlushMappedNamedBufferRangeEXT)( GLuint buffer, GLintptr offset, GLsizeiptr length );
+typedef void       (GLAPIENTRY *PFN_glFlushPixelDataRangeNV)( GLenum target );
+typedef void       (GLAPIENTRY *PFN_glFlushRasterSGIX)(void);
+typedef void       (GLAPIENTRY *PFN_glFlushStaticDataIBM)( GLenum target );
+typedef void       (GLAPIENTRY *PFN_glFlushVertexArrayRangeAPPLE)( GLsizei length, void *pointer );
+typedef void       (GLAPIENTRY *PFN_glFlushVertexArrayRangeNV)(void);
+typedef void       (GLAPIENTRY *PFN_glFogCoordFormatNV)( GLenum type, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glFogCoordPointer)( GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glFogCoordPointerEXT)( GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glFogCoordPointerListIBM)( GLenum type, GLint stride, const void **pointer, GLint ptrstride );
+typedef void       (GLAPIENTRY *PFN_glFogCoordd)( GLdouble coord );
+typedef void       (GLAPIENTRY *PFN_glFogCoorddEXT)( GLdouble coord );
+typedef void       (GLAPIENTRY *PFN_glFogCoorddv)( const GLdouble *coord );
+typedef void       (GLAPIENTRY *PFN_glFogCoorddvEXT)( const GLdouble *coord );
+typedef void       (GLAPIENTRY *PFN_glFogCoordf)( GLfloat coord );
+typedef void       (GLAPIENTRY *PFN_glFogCoordfEXT)( GLfloat coord );
+typedef void       (GLAPIENTRY *PFN_glFogCoordfv)( const GLfloat *coord );
+typedef void       (GLAPIENTRY *PFN_glFogCoordfvEXT)( const GLfloat *coord );
+typedef void       (GLAPIENTRY *PFN_glFogCoordhNV)( GLhalfNV fog );
+typedef void       (GLAPIENTRY *PFN_glFogCoordhvNV)( const GLhalfNV *fog );
+typedef void       (GLAPIENTRY *PFN_glFogFuncSGIS)( GLsizei n, const GLfloat *points );
+typedef void       (GLAPIENTRY *PFN_glFogxOES)( GLenum pname, GLfixed param );
+typedef void       (GLAPIENTRY *PFN_glFogxvOES)( GLenum pname, const GLfixed *param );
+typedef void       (GLAPIENTRY *PFN_glFragmentColorMaterialSGIX)( GLenum face, GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glFragmentCoverageColorNV)( GLuint color );
+typedef void       (GLAPIENTRY *PFN_glFragmentLightModelfSGIX)( GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glFragmentLightModelfvSGIX)( GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glFragmentLightModeliSGIX)( GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glFragmentLightModelivSGIX)( GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glFragmentLightfSGIX)( GLenum light, GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glFragmentLightfvSGIX)( GLenum light, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glFragmentLightiSGIX)( GLenum light, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glFragmentLightivSGIX)( GLenum light, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glFragmentMaterialfSGIX)( GLenum face, GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glFragmentMaterialfvSGIX)( GLenum face, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glFragmentMaterialiSGIX)( GLenum face, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glFragmentMaterialivSGIX)( GLenum face, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glFrameTerminatorGREMEDY)(void);
+typedef void       (GLAPIENTRY *PFN_glFrameZoomSGIX)( GLint factor );
+typedef void       (GLAPIENTRY *PFN_glFramebufferDrawBufferEXT)( GLuint framebuffer, GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glFramebufferDrawBuffersEXT)( GLuint framebuffer, GLsizei n, const GLenum *bufs );
+typedef void       (GLAPIENTRY *PFN_glFramebufferFetchBarrierEXT)(void);
+typedef void       (GLAPIENTRY *PFN_glFramebufferParameteri)( GLenum target, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glFramebufferParameteriMESA)( GLenum target, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glFramebufferReadBufferEXT)( GLuint framebuffer, GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glFramebufferRenderbuffer)( GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer );
+typedef void       (GLAPIENTRY *PFN_glFramebufferRenderbufferEXT)( GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer );
+typedef void       (GLAPIENTRY *PFN_glFramebufferSampleLocationsfvARB)( GLenum target, GLuint start, GLsizei count, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glFramebufferSampleLocationsfvNV)( GLenum target, GLuint start, GLsizei count, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glFramebufferSamplePositionsfvAMD)( GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat *values );
+typedef void       (GLAPIENTRY *PFN_glFramebufferTexture)( GLenum target, GLenum attachment, GLuint texture, GLint level );
+typedef void       (GLAPIENTRY *PFN_glFramebufferTexture1D)( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
+typedef void       (GLAPIENTRY *PFN_glFramebufferTexture1DEXT)( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
+typedef void       (GLAPIENTRY *PFN_glFramebufferTexture2D)( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
+typedef void       (GLAPIENTRY *PFN_glFramebufferTexture2DEXT)( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
+typedef void       (GLAPIENTRY *PFN_glFramebufferTexture3D)( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset );
+typedef void       (GLAPIENTRY *PFN_glFramebufferTexture3DEXT)( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset );
+typedef void       (GLAPIENTRY *PFN_glFramebufferTextureARB)( GLenum target, GLenum attachment, GLuint texture, GLint level );
+typedef void       (GLAPIENTRY *PFN_glFramebufferTextureEXT)( GLenum target, GLenum attachment, GLuint texture, GLint level );
+typedef void       (GLAPIENTRY *PFN_glFramebufferTextureFaceARB)( GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face );
+typedef void       (GLAPIENTRY *PFN_glFramebufferTextureFaceEXT)( GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face );
+typedef void       (GLAPIENTRY *PFN_glFramebufferTextureLayer)( GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer );
+typedef void       (GLAPIENTRY *PFN_glFramebufferTextureLayerARB)( GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer );
+typedef void       (GLAPIENTRY *PFN_glFramebufferTextureLayerEXT)( GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer );
+typedef void       (GLAPIENTRY *PFN_glFramebufferTextureMultiviewOVR)( GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews );
+typedef void       (GLAPIENTRY *PFN_glFreeObjectBufferATI)( GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glFrustumfOES)( GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f );
+typedef void       (GLAPIENTRY *PFN_glFrustumxOES)( GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f );
+typedef GLuint     (GLAPIENTRY *PFN_glGenAsyncMarkersSGIX)( GLsizei range );
+typedef void       (GLAPIENTRY *PFN_glGenBuffers)( GLsizei n, GLuint *buffers );
+typedef void       (GLAPIENTRY *PFN_glGenBuffersARB)( GLsizei n, GLuint *buffers );
+typedef void       (GLAPIENTRY *PFN_glGenFencesAPPLE)( GLsizei n, GLuint *fences );
+typedef void       (GLAPIENTRY *PFN_glGenFencesNV)( GLsizei n, GLuint *fences );
+typedef GLuint     (GLAPIENTRY *PFN_glGenFragmentShadersATI)( GLuint range );
+typedef void       (GLAPIENTRY *PFN_glGenFramebuffers)( GLsizei n, GLuint *framebuffers );
+typedef void       (GLAPIENTRY *PFN_glGenFramebuffersEXT)( GLsizei n, GLuint *framebuffers );
+typedef void       (GLAPIENTRY *PFN_glGenNamesAMD)( GLenum identifier, GLuint num, GLuint *names );
+typedef void       (GLAPIENTRY *PFN_glGenOcclusionQueriesNV)( GLsizei n, GLuint *ids );
+typedef GLuint     (GLAPIENTRY *PFN_glGenPathsNV)( GLsizei range );
+typedef void       (GLAPIENTRY *PFN_glGenPerfMonitorsAMD)( GLsizei n, GLuint *monitors );
+typedef void       (GLAPIENTRY *PFN_glGenProgramPipelines)( GLsizei n, GLuint *pipelines );
+typedef void       (GLAPIENTRY *PFN_glGenProgramsARB)( GLsizei n, GLuint *programs );
+typedef void       (GLAPIENTRY *PFN_glGenProgramsNV)( GLsizei n, GLuint *programs );
+typedef void       (GLAPIENTRY *PFN_glGenQueries)( GLsizei n, GLuint *ids );
+typedef void       (GLAPIENTRY *PFN_glGenQueriesARB)( GLsizei n, GLuint *ids );
+typedef void       (GLAPIENTRY *PFN_glGenQueryResourceTagNV)( GLsizei n, GLint *tagIds );
+typedef void       (GLAPIENTRY *PFN_glGenRenderbuffers)( GLsizei n, GLuint *renderbuffers );
+typedef void       (GLAPIENTRY *PFN_glGenRenderbuffersEXT)( GLsizei n, GLuint *renderbuffers );
+typedef void       (GLAPIENTRY *PFN_glGenSamplers)( GLsizei count, GLuint *samplers );
+typedef void       (GLAPIENTRY *PFN_glGenSemaphoresEXT)( GLsizei n, GLuint *semaphores );
+typedef GLuint     (GLAPIENTRY *PFN_glGenSymbolsEXT)( GLenum datatype, GLenum storagetype, GLenum range, GLuint components );
+typedef void       (GLAPIENTRY *PFN_glGenTexturesEXT)( GLsizei n, GLuint *textures );
+typedef void       (GLAPIENTRY *PFN_glGenTransformFeedbacks)( GLsizei n, GLuint *ids );
+typedef void       (GLAPIENTRY *PFN_glGenTransformFeedbacksNV)( GLsizei n, GLuint *ids );
+typedef void       (GLAPIENTRY *PFN_glGenVertexArrays)( GLsizei n, GLuint *arrays );
+typedef void       (GLAPIENTRY *PFN_glGenVertexArraysAPPLE)( GLsizei n, GLuint *arrays );
+typedef GLuint     (GLAPIENTRY *PFN_glGenVertexShadersEXT)( GLuint range );
+typedef void       (GLAPIENTRY *PFN_glGenerateMipmap)( GLenum target );
+typedef void       (GLAPIENTRY *PFN_glGenerateMipmapEXT)( GLenum target );
+typedef void       (GLAPIENTRY *PFN_glGenerateMultiTexMipmapEXT)( GLenum texunit, GLenum target );
+typedef void       (GLAPIENTRY *PFN_glGenerateTextureMipmap)( GLuint texture );
+typedef void       (GLAPIENTRY *PFN_glGenerateTextureMipmapEXT)( GLuint texture, GLenum target );
+typedef void       (GLAPIENTRY *PFN_glGetActiveAtomicCounterBufferiv)( GLuint program, GLuint bufferIndex, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetActiveAttrib)( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name );
+typedef void       (GLAPIENTRY *PFN_glGetActiveAttribARB)( GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name );
+typedef void       (GLAPIENTRY *PFN_glGetActiveSubroutineName)( GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name );
+typedef void       (GLAPIENTRY *PFN_glGetActiveSubroutineUniformName)( GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name );
+typedef void       (GLAPIENTRY *PFN_glGetActiveSubroutineUniformiv)( GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values );
+typedef void       (GLAPIENTRY *PFN_glGetActiveUniform)( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name );
+typedef void       (GLAPIENTRY *PFN_glGetActiveUniformARB)( GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name );
+typedef void       (GLAPIENTRY *PFN_glGetActiveUniformBlockName)( GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName );
+typedef void       (GLAPIENTRY *PFN_glGetActiveUniformBlockiv)( GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetActiveUniformName)( GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName );
+typedef void       (GLAPIENTRY *PFN_glGetActiveUniformsiv)( GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetActiveVaryingNV)( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name );
+typedef void       (GLAPIENTRY *PFN_glGetArrayObjectfvATI)( GLenum array, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetArrayObjectivATI)( GLenum array, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetAttachedObjectsARB)( GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj );
+typedef void       (GLAPIENTRY *PFN_glGetAttachedShaders)( GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders );
+typedef GLint      (GLAPIENTRY *PFN_glGetAttribLocation)( GLuint program, const GLchar *name );
+typedef GLint      (GLAPIENTRY *PFN_glGetAttribLocationARB)( GLhandleARB programObj, const GLcharARB *name );
+typedef void       (GLAPIENTRY *PFN_glGetBooleanIndexedvEXT)( GLenum target, GLuint index, GLboolean *data );
+typedef void       (GLAPIENTRY *PFN_glGetBooleani_v)( GLenum target, GLuint index, GLboolean *data );
+typedef void       (GLAPIENTRY *PFN_glGetBufferParameteri64v)( GLenum target, GLenum pname, GLint64 *params );
+typedef void       (GLAPIENTRY *PFN_glGetBufferParameteriv)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetBufferParameterivARB)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetBufferParameterui64vNV)( GLenum target, GLenum pname, GLuint64EXT *params );
+typedef void       (GLAPIENTRY *PFN_glGetBufferPointerv)( GLenum target, GLenum pname, void **params );
+typedef void       (GLAPIENTRY *PFN_glGetBufferPointervARB)( GLenum target, GLenum pname, void **params );
+typedef void       (GLAPIENTRY *PFN_glGetBufferSubData)( GLenum target, GLintptr offset, GLsizeiptr size, void *data );
+typedef void       (GLAPIENTRY *PFN_glGetBufferSubDataARB)( GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data );
+typedef void       (GLAPIENTRY *PFN_glGetClipPlanefOES)( GLenum plane, GLfloat *equation );
+typedef void       (GLAPIENTRY *PFN_glGetClipPlanexOES)( GLenum plane, GLfixed *equation );
+typedef void       (GLAPIENTRY *PFN_glGetColorTable)( GLenum target, GLenum format, GLenum type, void *table );
+typedef void       (GLAPIENTRY *PFN_glGetColorTableEXT)( GLenum target, GLenum format, GLenum type, void *data );
+typedef void       (GLAPIENTRY *PFN_glGetColorTableParameterfv)( GLenum target, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetColorTableParameterfvEXT)( GLenum target, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetColorTableParameterfvSGI)( GLenum target, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetColorTableParameteriv)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetColorTableParameterivEXT)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetColorTableParameterivSGI)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetColorTableSGI)( GLenum target, GLenum format, GLenum type, void *table );
+typedef void       (GLAPIENTRY *PFN_glGetCombinerInputParameterfvNV)( GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetCombinerInputParameterivNV)( GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetCombinerOutputParameterfvNV)( GLenum stage, GLenum portion, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetCombinerOutputParameterivNV)( GLenum stage, GLenum portion, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetCombinerStageParameterfvNV)( GLenum stage, GLenum pname, GLfloat *params );
+typedef GLuint     (GLAPIENTRY *PFN_glGetCommandHeaderNV)( GLenum tokenID, GLuint size );
+typedef void       (GLAPIENTRY *PFN_glGetCompressedMultiTexImageEXT)( GLenum texunit, GLenum target, GLint lod, void *img );
+typedef void       (GLAPIENTRY *PFN_glGetCompressedTexImage)( GLenum target, GLint level, void *img );
+typedef void       (GLAPIENTRY *PFN_glGetCompressedTexImageARB)( GLenum target, GLint level, void *img );
+typedef void       (GLAPIENTRY *PFN_glGetCompressedTextureImage)( GLuint texture, GLint level, GLsizei bufSize, void *pixels );
+typedef void       (GLAPIENTRY *PFN_glGetCompressedTextureImageEXT)( GLuint texture, GLenum target, GLint lod, void *img );
+typedef void       (GLAPIENTRY *PFN_glGetCompressedTextureSubImage)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels );
+typedef void       (GLAPIENTRY *PFN_glGetConvolutionFilter)( GLenum target, GLenum format, GLenum type, void *image );
+typedef void       (GLAPIENTRY *PFN_glGetConvolutionFilterEXT)( GLenum target, GLenum format, GLenum type, void *image );
+typedef void       (GLAPIENTRY *PFN_glGetConvolutionParameterfv)( GLenum target, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetConvolutionParameterfvEXT)( GLenum target, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetConvolutionParameteriv)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetConvolutionParameterivEXT)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetConvolutionParameterxvOES)( GLenum target, GLenum pname, GLfixed *params );
+typedef void       (GLAPIENTRY *PFN_glGetCoverageModulationTableNV)( GLsizei bufSize, GLfloat *v );
+typedef GLuint     (GLAPIENTRY *PFN_glGetDebugMessageLog)( GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog );
+typedef GLuint     (GLAPIENTRY *PFN_glGetDebugMessageLogAMD)( GLuint count, GLsizei bufSize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message );
+typedef GLuint     (GLAPIENTRY *PFN_glGetDebugMessageLogARB)( GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog );
+typedef void       (GLAPIENTRY *PFN_glGetDetailTexFuncSGIS)( GLenum target, GLfloat *points );
+typedef void       (GLAPIENTRY *PFN_glGetDoubleIndexedvEXT)( GLenum target, GLuint index, GLdouble *data );
+typedef void       (GLAPIENTRY *PFN_glGetDoublei_v)( GLenum target, GLuint index, GLdouble *data );
+typedef void       (GLAPIENTRY *PFN_glGetDoublei_vEXT)( GLenum pname, GLuint index, GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glGetFenceivNV)( GLuint fence, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetFinalCombinerInputParameterfvNV)( GLenum variable, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetFinalCombinerInputParameterivNV)( GLenum variable, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetFirstPerfQueryIdINTEL)( GLuint *queryId );
+typedef void       (GLAPIENTRY *PFN_glGetFixedvOES)( GLenum pname, GLfixed *params );
+typedef void       (GLAPIENTRY *PFN_glGetFloatIndexedvEXT)( GLenum target, GLuint index, GLfloat *data );
+typedef void       (GLAPIENTRY *PFN_glGetFloati_v)( GLenum target, GLuint index, GLfloat *data );
+typedef void       (GLAPIENTRY *PFN_glGetFloati_vEXT)( GLenum pname, GLuint index, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetFogFuncSGIS)( GLfloat *points );
+typedef GLint      (GLAPIENTRY *PFN_glGetFragDataIndex)( GLuint program, const GLchar *name );
+typedef GLint      (GLAPIENTRY *PFN_glGetFragDataLocation)( GLuint program, const GLchar *name );
+typedef GLint      (GLAPIENTRY *PFN_glGetFragDataLocationEXT)( GLuint program, const GLchar *name );
+typedef void       (GLAPIENTRY *PFN_glGetFragmentLightfvSGIX)( GLenum light, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetFragmentLightivSGIX)( GLenum light, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetFragmentMaterialfvSGIX)( GLenum face, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetFragmentMaterialivSGIX)( GLenum face, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetFramebufferAttachmentParameteriv)( GLenum target, GLenum attachment, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetFramebufferAttachmentParameterivEXT)( GLenum target, GLenum attachment, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetFramebufferParameterfvAMD)( GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values );
+typedef void       (GLAPIENTRY *PFN_glGetFramebufferParameteriv)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetFramebufferParameterivEXT)( GLuint framebuffer, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetFramebufferParameterivMESA)( GLenum target, GLenum pname, GLint *params );
+typedef GLenum     (GLAPIENTRY *PFN_glGetGraphicsResetStatus)(void);
+typedef GLenum     (GLAPIENTRY *PFN_glGetGraphicsResetStatusARB)(void);
+typedef GLhandleARB (GLAPIENTRY *PFN_glGetHandleARB)( GLenum pname );
+typedef void       (GLAPIENTRY *PFN_glGetHistogram)( GLenum target, GLboolean reset, GLenum format, GLenum type, void *values );
+typedef void       (GLAPIENTRY *PFN_glGetHistogramEXT)( GLenum target, GLboolean reset, GLenum format, GLenum type, void *values );
+typedef void       (GLAPIENTRY *PFN_glGetHistogramParameterfv)( GLenum target, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetHistogramParameterfvEXT)( GLenum target, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetHistogramParameteriv)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetHistogramParameterivEXT)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetHistogramParameterxvOES)( GLenum target, GLenum pname, GLfixed *params );
+typedef GLuint64   (GLAPIENTRY *PFN_glGetImageHandleARB)( GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format );
+typedef GLuint64   (GLAPIENTRY *PFN_glGetImageHandleNV)( GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format );
+typedef void       (GLAPIENTRY *PFN_glGetImageTransformParameterfvHP)( GLenum target, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetImageTransformParameterivHP)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetInfoLogARB)( GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog );
+typedef GLint      (GLAPIENTRY *PFN_glGetInstrumentsSGIX)(void);
+typedef void       (GLAPIENTRY *PFN_glGetInteger64i_v)( GLenum target, GLuint index, GLint64 *data );
+typedef void       (GLAPIENTRY *PFN_glGetInteger64v)( GLenum pname, GLint64 *data );
+typedef void       (GLAPIENTRY *PFN_glGetIntegerIndexedvEXT)( GLenum target, GLuint index, GLint *data );
+typedef void       (GLAPIENTRY *PFN_glGetIntegeri_v)( GLenum target, GLuint index, GLint *data );
+typedef void       (GLAPIENTRY *PFN_glGetIntegerui64i_vNV)( GLenum value, GLuint index, GLuint64EXT *result );
+typedef void       (GLAPIENTRY *PFN_glGetIntegerui64vNV)( GLenum value, GLuint64EXT *result );
+typedef void       (GLAPIENTRY *PFN_glGetInternalformatSampleivNV)( GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetInternalformati64v)( GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params );
+typedef void       (GLAPIENTRY *PFN_glGetInternalformativ)( GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetInvariantBooleanvEXT)( GLuint id, GLenum value, GLboolean *data );
+typedef void       (GLAPIENTRY *PFN_glGetInvariantFloatvEXT)( GLuint id, GLenum value, GLfloat *data );
+typedef void       (GLAPIENTRY *PFN_glGetInvariantIntegervEXT)( GLuint id, GLenum value, GLint *data );
+typedef void       (GLAPIENTRY *PFN_glGetLightxOES)( GLenum light, GLenum pname, GLfixed *params );
+typedef void       (GLAPIENTRY *PFN_glGetListParameterfvSGIX)( GLuint list, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetListParameterivSGIX)( GLuint list, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetLocalConstantBooleanvEXT)( GLuint id, GLenum value, GLboolean *data );
+typedef void       (GLAPIENTRY *PFN_glGetLocalConstantFloatvEXT)( GLuint id, GLenum value, GLfloat *data );
+typedef void       (GLAPIENTRY *PFN_glGetLocalConstantIntegervEXT)( GLuint id, GLenum value, GLint *data );
+typedef void       (GLAPIENTRY *PFN_glGetMapAttribParameterfvNV)( GLenum target, GLuint index, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetMapAttribParameterivNV)( GLenum target, GLuint index, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetMapControlPointsNV)( GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points );
+typedef void       (GLAPIENTRY *PFN_glGetMapParameterfvNV)( GLenum target, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetMapParameterivNV)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetMapxvOES)( GLenum target, GLenum query, GLfixed *v );
+typedef void       (GLAPIENTRY *PFN_glGetMaterialxOES)( GLenum face, GLenum pname, GLfixed param );
+typedef void       (GLAPIENTRY *PFN_glGetMemoryObjectDetachedResourcesuivNV)( GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGetMemoryObjectParameterivEXT)( GLuint memoryObject, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetMinmax)( GLenum target, GLboolean reset, GLenum format, GLenum type, void *values );
+typedef void       (GLAPIENTRY *PFN_glGetMinmaxEXT)( GLenum target, GLboolean reset, GLenum format, GLenum type, void *values );
+typedef void       (GLAPIENTRY *PFN_glGetMinmaxParameterfv)( GLenum target, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetMinmaxParameterfvEXT)( GLenum target, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetMinmaxParameteriv)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetMinmaxParameterivEXT)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetMultiTexEnvfvEXT)( GLenum texunit, GLenum target, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetMultiTexEnvivEXT)( GLenum texunit, GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetMultiTexGendvEXT)( GLenum texunit, GLenum coord, GLenum pname, GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glGetMultiTexGenfvEXT)( GLenum texunit, GLenum coord, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetMultiTexGenivEXT)( GLenum texunit, GLenum coord, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetMultiTexImageEXT)( GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels );
+typedef void       (GLAPIENTRY *PFN_glGetMultiTexLevelParameterfvEXT)( GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetMultiTexLevelParameterivEXT)( GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetMultiTexParameterIivEXT)( GLenum texunit, GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetMultiTexParameterIuivEXT)( GLenum texunit, GLenum target, GLenum pname, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGetMultiTexParameterfvEXT)( GLenum texunit, GLenum target, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetMultiTexParameterivEXT)( GLenum texunit, GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetMultisamplefv)( GLenum pname, GLuint index, GLfloat *val );
+typedef void       (GLAPIENTRY *PFN_glGetMultisamplefvNV)( GLenum pname, GLuint index, GLfloat *val );
+typedef void       (GLAPIENTRY *PFN_glGetNamedBufferParameteri64v)( GLuint buffer, GLenum pname, GLint64 *params );
+typedef void       (GLAPIENTRY *PFN_glGetNamedBufferParameteriv)( GLuint buffer, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetNamedBufferParameterivEXT)( GLuint buffer, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetNamedBufferParameterui64vNV)( GLuint buffer, GLenum pname, GLuint64EXT *params );
+typedef void       (GLAPIENTRY *PFN_glGetNamedBufferPointerv)( GLuint buffer, GLenum pname, void **params );
+typedef void       (GLAPIENTRY *PFN_glGetNamedBufferPointervEXT)( GLuint buffer, GLenum pname, void **params );
+typedef void       (GLAPIENTRY *PFN_glGetNamedBufferSubData)( GLuint buffer, GLintptr offset, GLsizeiptr size, void *data );
+typedef void       (GLAPIENTRY *PFN_glGetNamedBufferSubDataEXT)( GLuint buffer, GLintptr offset, GLsizeiptr size, void *data );
+typedef void       (GLAPIENTRY *PFN_glGetNamedFramebufferAttachmentParameteriv)( GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetNamedFramebufferAttachmentParameterivEXT)( GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetNamedFramebufferParameterfvAMD)( GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values );
+typedef void       (GLAPIENTRY *PFN_glGetNamedFramebufferParameteriv)( GLuint framebuffer, GLenum pname, GLint *param );
+typedef void       (GLAPIENTRY *PFN_glGetNamedFramebufferParameterivEXT)( GLuint framebuffer, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetNamedProgramLocalParameterIivEXT)( GLuint program, GLenum target, GLuint index, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetNamedProgramLocalParameterIuivEXT)( GLuint program, GLenum target, GLuint index, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGetNamedProgramLocalParameterdvEXT)( GLuint program, GLenum target, GLuint index, GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glGetNamedProgramLocalParameterfvEXT)( GLuint program, GLenum target, GLuint index, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetNamedProgramStringEXT)( GLuint program, GLenum target, GLenum pname, void *string );
+typedef void       (GLAPIENTRY *PFN_glGetNamedProgramivEXT)( GLuint program, GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetNamedRenderbufferParameteriv)( GLuint renderbuffer, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetNamedRenderbufferParameterivEXT)( GLuint renderbuffer, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetNamedStringARB)( GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string );
+typedef void       (GLAPIENTRY *PFN_glGetNamedStringivARB)( GLint namelen, const GLchar *name, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetNextPerfQueryIdINTEL)( GLuint queryId, GLuint *nextQueryId );
+typedef void       (GLAPIENTRY *PFN_glGetObjectBufferfvATI)( GLuint buffer, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetObjectBufferivATI)( GLuint buffer, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetObjectLabel)( GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label );
+typedef void       (GLAPIENTRY *PFN_glGetObjectLabelEXT)( GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label );
+typedef void       (GLAPIENTRY *PFN_glGetObjectParameterfvARB)( GLhandleARB obj, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetObjectParameterivAPPLE)( GLenum objectType, GLuint name, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetObjectParameterivARB)( GLhandleARB obj, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetObjectPtrLabel)( const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label );
+typedef void       (GLAPIENTRY *PFN_glGetOcclusionQueryivNV)( GLuint id, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetOcclusionQueryuivNV)( GLuint id, GLenum pname, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGetPathColorGenfvNV)( GLenum color, GLenum pname, GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glGetPathColorGenivNV)( GLenum color, GLenum pname, GLint *value );
+typedef void       (GLAPIENTRY *PFN_glGetPathCommandsNV)( GLuint path, GLubyte *commands );
+typedef void       (GLAPIENTRY *PFN_glGetPathCoordsNV)( GLuint path, GLfloat *coords );
+typedef void       (GLAPIENTRY *PFN_glGetPathDashArrayNV)( GLuint path, GLfloat *dashArray );
+typedef GLfloat    (GLAPIENTRY *PFN_glGetPathLengthNV)( GLuint path, GLsizei startSegment, GLsizei numSegments );
+typedef void       (GLAPIENTRY *PFN_glGetPathMetricRangeNV)( GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics );
+typedef void       (GLAPIENTRY *PFN_glGetPathMetricsNV)( GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics );
+typedef void       (GLAPIENTRY *PFN_glGetPathParameterfvNV)( GLuint path, GLenum pname, GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glGetPathParameterivNV)( GLuint path, GLenum pname, GLint *value );
+typedef void       (GLAPIENTRY *PFN_glGetPathSpacingNV)( GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing );
+typedef void       (GLAPIENTRY *PFN_glGetPathTexGenfvNV)( GLenum texCoordSet, GLenum pname, GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glGetPathTexGenivNV)( GLenum texCoordSet, GLenum pname, GLint *value );
+typedef void       (GLAPIENTRY *PFN_glGetPerfCounterInfoINTEL)( GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue );
+typedef void       (GLAPIENTRY *PFN_glGetPerfMonitorCounterDataAMD)( GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten );
+typedef void       (GLAPIENTRY *PFN_glGetPerfMonitorCounterInfoAMD)( GLuint group, GLuint counter, GLenum pname, void *data );
+typedef void       (GLAPIENTRY *PFN_glGetPerfMonitorCounterStringAMD)( GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString );
+typedef void       (GLAPIENTRY *PFN_glGetPerfMonitorCountersAMD)( GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters );
+typedef void       (GLAPIENTRY *PFN_glGetPerfMonitorGroupStringAMD)( GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString );
+typedef void       (GLAPIENTRY *PFN_glGetPerfMonitorGroupsAMD)( GLint *numGroups, GLsizei groupsSize, GLuint *groups );
+typedef void       (GLAPIENTRY *PFN_glGetPerfQueryDataINTEL)( GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten );
+typedef void       (GLAPIENTRY *PFN_glGetPerfQueryIdByNameINTEL)( GLchar *queryName, GLuint *queryId );
+typedef void       (GLAPIENTRY *PFN_glGetPerfQueryInfoINTEL)( GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask );
+typedef void       (GLAPIENTRY *PFN_glGetPixelMapxv)( GLenum map, GLint size, GLfixed *values );
+typedef void       (GLAPIENTRY *PFN_glGetPixelTexGenParameterfvSGIS)( GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetPixelTexGenParameterivSGIS)( GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetPixelTransformParameterfvEXT)( GLenum target, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetPixelTransformParameterivEXT)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetPointerIndexedvEXT)( GLenum target, GLuint index, void **data );
+typedef void       (GLAPIENTRY *PFN_glGetPointeri_vEXT)( GLenum pname, GLuint index, void **params );
+typedef void       (GLAPIENTRY *PFN_glGetPointervEXT)( GLenum pname, void **params );
+typedef void       (GLAPIENTRY *PFN_glGetProgramBinary)( GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary );
+typedef void       (GLAPIENTRY *PFN_glGetProgramEnvParameterIivNV)( GLenum target, GLuint index, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetProgramEnvParameterIuivNV)( GLenum target, GLuint index, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGetProgramEnvParameterdvARB)( GLenum target, GLuint index, GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glGetProgramEnvParameterfvARB)( GLenum target, GLuint index, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetProgramInfoLog)( GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog );
+typedef void       (GLAPIENTRY *PFN_glGetProgramInterfaceiv)( GLuint program, GLenum programInterface, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetProgramLocalParameterIivNV)( GLenum target, GLuint index, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetProgramLocalParameterIuivNV)( GLenum target, GLuint index, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGetProgramLocalParameterdvARB)( GLenum target, GLuint index, GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glGetProgramLocalParameterfvARB)( GLenum target, GLuint index, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetProgramNamedParameterdvNV)( GLuint id, GLsizei len, const GLubyte *name, GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glGetProgramNamedParameterfvNV)( GLuint id, GLsizei len, const GLubyte *name, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetProgramParameterdvNV)( GLenum target, GLuint index, GLenum pname, GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glGetProgramParameterfvNV)( GLenum target, GLuint index, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetProgramPipelineInfoLog)( GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog );
+typedef void       (GLAPIENTRY *PFN_glGetProgramPipelineiv)( GLuint pipeline, GLenum pname, GLint *params );
+typedef GLuint     (GLAPIENTRY *PFN_glGetProgramResourceIndex)( GLuint program, GLenum programInterface, const GLchar *name );
+typedef GLint      (GLAPIENTRY *PFN_glGetProgramResourceLocation)( GLuint program, GLenum programInterface, const GLchar *name );
+typedef GLint      (GLAPIENTRY *PFN_glGetProgramResourceLocationIndex)( GLuint program, GLenum programInterface, const GLchar *name );
+typedef void       (GLAPIENTRY *PFN_glGetProgramResourceName)( GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name );
+typedef void       (GLAPIENTRY *PFN_glGetProgramResourcefvNV)( GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetProgramResourceiv)( GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetProgramStageiv)( GLuint program, GLenum shadertype, GLenum pname, GLint *values );
+typedef void       (GLAPIENTRY *PFN_glGetProgramStringARB)( GLenum target, GLenum pname, void *string );
+typedef void       (GLAPIENTRY *PFN_glGetProgramStringNV)( GLuint id, GLenum pname, GLubyte *program );
+typedef void       (GLAPIENTRY *PFN_glGetProgramSubroutineParameteruivNV)( GLenum target, GLuint index, GLuint *param );
+typedef void       (GLAPIENTRY *PFN_glGetProgramiv)( GLuint program, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetProgramivARB)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetProgramivNV)( GLuint id, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetQueryBufferObjecti64v)( GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
+typedef void       (GLAPIENTRY *PFN_glGetQueryBufferObjectiv)( GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
+typedef void       (GLAPIENTRY *PFN_glGetQueryBufferObjectui64v)( GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
+typedef void       (GLAPIENTRY *PFN_glGetQueryBufferObjectuiv)( GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
+typedef void       (GLAPIENTRY *PFN_glGetQueryIndexediv)( GLenum target, GLuint index, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetQueryObjecti64v)( GLuint id, GLenum pname, GLint64 *params );
+typedef void       (GLAPIENTRY *PFN_glGetQueryObjecti64vEXT)( GLuint id, GLenum pname, GLint64 *params );
+typedef void       (GLAPIENTRY *PFN_glGetQueryObjectiv)( GLuint id, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetQueryObjectivARB)( GLuint id, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetQueryObjectui64v)( GLuint id, GLenum pname, GLuint64 *params );
+typedef void       (GLAPIENTRY *PFN_glGetQueryObjectui64vEXT)( GLuint id, GLenum pname, GLuint64 *params );
+typedef void       (GLAPIENTRY *PFN_glGetQueryObjectuiv)( GLuint id, GLenum pname, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGetQueryObjectuivARB)( GLuint id, GLenum pname, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGetQueryiv)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetQueryivARB)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetRenderbufferParameteriv)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetRenderbufferParameterivEXT)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetSamplerParameterIiv)( GLuint sampler, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetSamplerParameterIuiv)( GLuint sampler, GLenum pname, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGetSamplerParameterfv)( GLuint sampler, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetSamplerParameteriv)( GLuint sampler, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetSemaphoreParameterui64vEXT)( GLuint semaphore, GLenum pname, GLuint64 *params );
+typedef void       (GLAPIENTRY *PFN_glGetSeparableFilter)( GLenum target, GLenum format, GLenum type, void *row, void *column, void *span );
+typedef void       (GLAPIENTRY *PFN_glGetSeparableFilterEXT)( GLenum target, GLenum format, GLenum type, void *row, void *column, void *span );
+typedef void       (GLAPIENTRY *PFN_glGetShaderInfoLog)( GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog );
+typedef void       (GLAPIENTRY *PFN_glGetShaderPrecisionFormat)( GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision );
+typedef void       (GLAPIENTRY *PFN_glGetShaderSource)( GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source );
+typedef void       (GLAPIENTRY *PFN_glGetShaderSourceARB)( GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source );
+typedef void       (GLAPIENTRY *PFN_glGetShaderiv)( GLuint shader, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetShadingRateImagePaletteNV)( GLuint viewport, GLuint entry, GLenum *rate );
+typedef void       (GLAPIENTRY *PFN_glGetShadingRateSampleLocationivNV)( GLenum rate, GLuint samples, GLuint index, GLint *location );
+typedef void       (GLAPIENTRY *PFN_glGetSharpenTexFuncSGIS)( GLenum target, GLfloat *points );
+typedef GLushort   (GLAPIENTRY *PFN_glGetStageIndexNV)( GLenum shadertype );
+typedef const GLubyte * (GLAPIENTRY *PFN_glGetStringi)( GLenum name, GLuint index );
+typedef GLuint     (GLAPIENTRY *PFN_glGetSubroutineIndex)( GLuint program, GLenum shadertype, const GLchar *name );
+typedef GLint      (GLAPIENTRY *PFN_glGetSubroutineUniformLocation)( GLuint program, GLenum shadertype, const GLchar *name );
+typedef void       (GLAPIENTRY *PFN_glGetSynciv)( GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values );
+typedef void       (GLAPIENTRY *PFN_glGetTexBumpParameterfvATI)( GLenum pname, GLfloat *param );
+typedef void       (GLAPIENTRY *PFN_glGetTexBumpParameterivATI)( GLenum pname, GLint *param );
+typedef void       (GLAPIENTRY *PFN_glGetTexEnvxvOES)( GLenum target, GLenum pname, GLfixed *params );
+typedef void       (GLAPIENTRY *PFN_glGetTexFilterFuncSGIS)( GLenum target, GLenum filter, GLfloat *weights );
+typedef void       (GLAPIENTRY *PFN_glGetTexGenxvOES)( GLenum coord, GLenum pname, GLfixed *params );
+typedef void       (GLAPIENTRY *PFN_glGetTexLevelParameterxvOES)( GLenum target, GLint level, GLenum pname, GLfixed *params );
+typedef void       (GLAPIENTRY *PFN_glGetTexParameterIiv)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetTexParameterIivEXT)( GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetTexParameterIuiv)( GLenum target, GLenum pname, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGetTexParameterIuivEXT)( GLenum target, GLenum pname, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGetTexParameterPointervAPPLE)( GLenum target, GLenum pname, void **params );
+typedef void       (GLAPIENTRY *PFN_glGetTexParameterxvOES)( GLenum target, GLenum pname, GLfixed *params );
+typedef GLuint64   (GLAPIENTRY *PFN_glGetTextureHandleARB)( GLuint texture );
+typedef GLuint64   (GLAPIENTRY *PFN_glGetTextureHandleNV)( GLuint texture );
+typedef void       (GLAPIENTRY *PFN_glGetTextureImage)( GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels );
+typedef void       (GLAPIENTRY *PFN_glGetTextureImageEXT)( GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels );
+typedef void       (GLAPIENTRY *PFN_glGetTextureLevelParameterfv)( GLuint texture, GLint level, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetTextureLevelParameterfvEXT)( GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetTextureLevelParameteriv)( GLuint texture, GLint level, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetTextureLevelParameterivEXT)( GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetTextureParameterIiv)( GLuint texture, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetTextureParameterIivEXT)( GLuint texture, GLenum target, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetTextureParameterIuiv)( GLuint texture, GLenum pname, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGetTextureParameterIuivEXT)( GLuint texture, GLenum target, GLenum pname, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGetTextureParameterfv)( GLuint texture, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetTextureParameterfvEXT)( GLuint texture, GLenum target, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetTextureParameteriv)( GLuint texture, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetTextureParameterivEXT)( GLuint texture, GLenum target, GLenum pname, GLint *params );
+typedef GLuint64   (GLAPIENTRY *PFN_glGetTextureSamplerHandleARB)( GLuint texture, GLuint sampler );
+typedef GLuint64   (GLAPIENTRY *PFN_glGetTextureSamplerHandleNV)( GLuint texture, GLuint sampler );
+typedef void       (GLAPIENTRY *PFN_glGetTextureSubImage)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels );
+typedef void       (GLAPIENTRY *PFN_glGetTrackMatrixivNV)( GLenum target, GLuint address, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetTransformFeedbackVarying)( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name );
+typedef void       (GLAPIENTRY *PFN_glGetTransformFeedbackVaryingEXT)( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name );
+typedef void       (GLAPIENTRY *PFN_glGetTransformFeedbackVaryingNV)( GLuint program, GLuint index, GLint *location );
+typedef void       (GLAPIENTRY *PFN_glGetTransformFeedbacki64_v)( GLuint xfb, GLenum pname, GLuint index, GLint64 *param );
+typedef void       (GLAPIENTRY *PFN_glGetTransformFeedbacki_v)( GLuint xfb, GLenum pname, GLuint index, GLint *param );
+typedef void       (GLAPIENTRY *PFN_glGetTransformFeedbackiv)( GLuint xfb, GLenum pname, GLint *param );
+typedef GLuint     (GLAPIENTRY *PFN_glGetUniformBlockIndex)( GLuint program, const GLchar *uniformBlockName );
+typedef GLint      (GLAPIENTRY *PFN_glGetUniformBufferSizeEXT)( GLuint program, GLint location );
+typedef void       (GLAPIENTRY *PFN_glGetUniformIndices)( GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices );
+typedef GLint      (GLAPIENTRY *PFN_glGetUniformLocation)( GLuint program, const GLchar *name );
+typedef GLint      (GLAPIENTRY *PFN_glGetUniformLocationARB)( GLhandleARB programObj, const GLcharARB *name );
+typedef GLintptr   (GLAPIENTRY *PFN_glGetUniformOffsetEXT)( GLuint program, GLint location );
+typedef void       (GLAPIENTRY *PFN_glGetUniformSubroutineuiv)( GLenum shadertype, GLint location, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGetUniformdv)( GLuint program, GLint location, GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glGetUniformfv)( GLuint program, GLint location, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetUniformfvARB)( GLhandleARB programObj, GLint location, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetUniformi64vARB)( GLuint program, GLint location, GLint64 *params );
+typedef void       (GLAPIENTRY *PFN_glGetUniformi64vNV)( GLuint program, GLint location, GLint64EXT *params );
+typedef void       (GLAPIENTRY *PFN_glGetUniformiv)( GLuint program, GLint location, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetUniformivARB)( GLhandleARB programObj, GLint location, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetUniformui64vARB)( GLuint program, GLint location, GLuint64 *params );
+typedef void       (GLAPIENTRY *PFN_glGetUniformui64vNV)( GLuint program, GLint location, GLuint64EXT *params );
+typedef void       (GLAPIENTRY *PFN_glGetUniformuiv)( GLuint program, GLint location, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGetUniformuivEXT)( GLuint program, GLint location, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGetUnsignedBytei_vEXT)( GLenum target, GLuint index, GLubyte *data );
+typedef void       (GLAPIENTRY *PFN_glGetUnsignedBytevEXT)( GLenum pname, GLubyte *data );
+typedef void       (GLAPIENTRY *PFN_glGetVariantArrayObjectfvATI)( GLuint id, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetVariantArrayObjectivATI)( GLuint id, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetVariantBooleanvEXT)( GLuint id, GLenum value, GLboolean *data );
+typedef void       (GLAPIENTRY *PFN_glGetVariantFloatvEXT)( GLuint id, GLenum value, GLfloat *data );
+typedef void       (GLAPIENTRY *PFN_glGetVariantIntegervEXT)( GLuint id, GLenum value, GLint *data );
+typedef void       (GLAPIENTRY *PFN_glGetVariantPointervEXT)( GLuint id, GLenum value, void **data );
+typedef GLint      (GLAPIENTRY *PFN_glGetVaryingLocationNV)( GLuint program, const GLchar *name );
+typedef void       (GLAPIENTRY *PFN_glGetVertexArrayIndexed64iv)( GLuint vaobj, GLuint index, GLenum pname, GLint64 *param );
+typedef void       (GLAPIENTRY *PFN_glGetVertexArrayIndexediv)( GLuint vaobj, GLuint index, GLenum pname, GLint *param );
+typedef void       (GLAPIENTRY *PFN_glGetVertexArrayIntegeri_vEXT)( GLuint vaobj, GLuint index, GLenum pname, GLint *param );
+typedef void       (GLAPIENTRY *PFN_glGetVertexArrayIntegervEXT)( GLuint vaobj, GLenum pname, GLint *param );
+typedef void       (GLAPIENTRY *PFN_glGetVertexArrayPointeri_vEXT)( GLuint vaobj, GLuint index, GLenum pname, void **param );
+typedef void       (GLAPIENTRY *PFN_glGetVertexArrayPointervEXT)( GLuint vaobj, GLenum pname, void **param );
+typedef void       (GLAPIENTRY *PFN_glGetVertexArrayiv)( GLuint vaobj, GLenum pname, GLint *param );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribArrayObjectfvATI)( GLuint index, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribArrayObjectivATI)( GLuint index, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribIiv)( GLuint index, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribIivEXT)( GLuint index, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribIuiv)( GLuint index, GLenum pname, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribIuivEXT)( GLuint index, GLenum pname, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribLdv)( GLuint index, GLenum pname, GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribLdvEXT)( GLuint index, GLenum pname, GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribLi64vNV)( GLuint index, GLenum pname, GLint64EXT *params );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribLui64vARB)( GLuint index, GLenum pname, GLuint64EXT *params );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribLui64vNV)( GLuint index, GLenum pname, GLuint64EXT *params );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribPointerv)( GLuint index, GLenum pname, void **pointer );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribPointervARB)( GLuint index, GLenum pname, void **pointer );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribPointervNV)( GLuint index, GLenum pname, void **pointer );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribdv)( GLuint index, GLenum pname, GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribdvARB)( GLuint index, GLenum pname, GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribdvNV)( GLuint index, GLenum pname, GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribfv)( GLuint index, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribfvARB)( GLuint index, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribfvNV)( GLuint index, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribiv)( GLuint index, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribivARB)( GLuint index, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetVertexAttribivNV)( GLuint index, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetVideoCaptureStreamdvNV)( GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glGetVideoCaptureStreamfvNV)( GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetVideoCaptureStreamivNV)( GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetVideoCaptureivNV)( GLuint video_capture_slot, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetVideoi64vNV)( GLuint video_slot, GLenum pname, GLint64EXT *params );
+typedef void       (GLAPIENTRY *PFN_glGetVideoivNV)( GLuint video_slot, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetVideoui64vNV)( GLuint video_slot, GLenum pname, GLuint64EXT *params );
+typedef void       (GLAPIENTRY *PFN_glGetVideouivNV)( GLuint video_slot, GLenum pname, GLuint *params );
+typedef GLVULKANPROCNV (GLAPIENTRY *PFN_glGetVkProcAddrNV)( const GLchar *name );
+typedef void       (GLAPIENTRY *PFN_glGetnColorTable)( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table );
+typedef void       (GLAPIENTRY *PFN_glGetnColorTableARB)( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table );
+typedef void       (GLAPIENTRY *PFN_glGetnCompressedTexImage)( GLenum target, GLint lod, GLsizei bufSize, void *pixels );
+typedef void       (GLAPIENTRY *PFN_glGetnCompressedTexImageARB)( GLenum target, GLint lod, GLsizei bufSize, void *img );
+typedef void       (GLAPIENTRY *PFN_glGetnConvolutionFilter)( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image );
+typedef void       (GLAPIENTRY *PFN_glGetnConvolutionFilterARB)( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image );
+typedef void       (GLAPIENTRY *PFN_glGetnHistogram)( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values );
+typedef void       (GLAPIENTRY *PFN_glGetnHistogramARB)( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values );
+typedef void       (GLAPIENTRY *PFN_glGetnMapdv)( GLenum target, GLenum query, GLsizei bufSize, GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glGetnMapdvARB)( GLenum target, GLenum query, GLsizei bufSize, GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glGetnMapfv)( GLenum target, GLenum query, GLsizei bufSize, GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glGetnMapfvARB)( GLenum target, GLenum query, GLsizei bufSize, GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glGetnMapiv)( GLenum target, GLenum query, GLsizei bufSize, GLint *v );
+typedef void       (GLAPIENTRY *PFN_glGetnMapivARB)( GLenum target, GLenum query, GLsizei bufSize, GLint *v );
+typedef void       (GLAPIENTRY *PFN_glGetnMinmax)( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values );
+typedef void       (GLAPIENTRY *PFN_glGetnMinmaxARB)( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values );
+typedef void       (GLAPIENTRY *PFN_glGetnPixelMapfv)( GLenum map, GLsizei bufSize, GLfloat *values );
+typedef void       (GLAPIENTRY *PFN_glGetnPixelMapfvARB)( GLenum map, GLsizei bufSize, GLfloat *values );
+typedef void       (GLAPIENTRY *PFN_glGetnPixelMapuiv)( GLenum map, GLsizei bufSize, GLuint *values );
+typedef void       (GLAPIENTRY *PFN_glGetnPixelMapuivARB)( GLenum map, GLsizei bufSize, GLuint *values );
+typedef void       (GLAPIENTRY *PFN_glGetnPixelMapusv)( GLenum map, GLsizei bufSize, GLushort *values );
+typedef void       (GLAPIENTRY *PFN_glGetnPixelMapusvARB)( GLenum map, GLsizei bufSize, GLushort *values );
+typedef void       (GLAPIENTRY *PFN_glGetnPolygonStipple)( GLsizei bufSize, GLubyte *pattern );
+typedef void       (GLAPIENTRY *PFN_glGetnPolygonStippleARB)( GLsizei bufSize, GLubyte *pattern );
+typedef void       (GLAPIENTRY *PFN_glGetnSeparableFilter)( GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span );
+typedef void       (GLAPIENTRY *PFN_glGetnSeparableFilterARB)( GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span );
+typedef void       (GLAPIENTRY *PFN_glGetnTexImage)( GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels );
+typedef void       (GLAPIENTRY *PFN_glGetnTexImageARB)( GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img );
+typedef void       (GLAPIENTRY *PFN_glGetnUniformdv)( GLuint program, GLint location, GLsizei bufSize, GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glGetnUniformdvARB)( GLuint program, GLint location, GLsizei bufSize, GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glGetnUniformfv)( GLuint program, GLint location, GLsizei bufSize, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetnUniformfvARB)( GLuint program, GLint location, GLsizei bufSize, GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glGetnUniformi64vARB)( GLuint program, GLint location, GLsizei bufSize, GLint64 *params );
+typedef void       (GLAPIENTRY *PFN_glGetnUniformiv)( GLuint program, GLint location, GLsizei bufSize, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetnUniformivARB)( GLuint program, GLint location, GLsizei bufSize, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glGetnUniformui64vARB)( GLuint program, GLint location, GLsizei bufSize, GLuint64 *params );
+typedef void       (GLAPIENTRY *PFN_glGetnUniformuiv)( GLuint program, GLint location, GLsizei bufSize, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGetnUniformuivARB)( GLuint program, GLint location, GLsizei bufSize, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glGlobalAlphaFactorbSUN)( GLbyte factor );
+typedef void       (GLAPIENTRY *PFN_glGlobalAlphaFactordSUN)( GLdouble factor );
+typedef void       (GLAPIENTRY *PFN_glGlobalAlphaFactorfSUN)( GLfloat factor );
+typedef void       (GLAPIENTRY *PFN_glGlobalAlphaFactoriSUN)( GLint factor );
+typedef void       (GLAPIENTRY *PFN_glGlobalAlphaFactorsSUN)( GLshort factor );
+typedef void       (GLAPIENTRY *PFN_glGlobalAlphaFactorubSUN)( GLubyte factor );
+typedef void       (GLAPIENTRY *PFN_glGlobalAlphaFactoruiSUN)( GLuint factor );
+typedef void       (GLAPIENTRY *PFN_glGlobalAlphaFactorusSUN)( GLushort factor );
+typedef void       (GLAPIENTRY *PFN_glHintPGI)( GLenum target, GLint mode );
+typedef void       (GLAPIENTRY *PFN_glHistogram)( GLenum target, GLsizei width, GLenum internalformat, GLboolean sink );
+typedef void       (GLAPIENTRY *PFN_glHistogramEXT)( GLenum target, GLsizei width, GLenum internalformat, GLboolean sink );
+typedef void       (GLAPIENTRY *PFN_glIglooInterfaceSGIX)( GLenum pname, const void *params );
+typedef void       (GLAPIENTRY *PFN_glImageTransformParameterfHP)( GLenum target, GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glImageTransformParameterfvHP)( GLenum target, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glImageTransformParameteriHP)( GLenum target, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glImageTransformParameterivHP)( GLenum target, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glImportMemoryFdEXT)( GLuint memory, GLuint64 size, GLenum handleType, GLint fd );
+typedef void       (GLAPIENTRY *PFN_glImportMemoryWin32HandleEXT)( GLuint memory, GLuint64 size, GLenum handleType, void *handle );
+typedef void       (GLAPIENTRY *PFN_glImportMemoryWin32NameEXT)( GLuint memory, GLuint64 size, GLenum handleType, const void *name );
+typedef void       (GLAPIENTRY *PFN_glImportSemaphoreFdEXT)( GLuint semaphore, GLenum handleType, GLint fd );
+typedef void       (GLAPIENTRY *PFN_glImportSemaphoreWin32HandleEXT)( GLuint semaphore, GLenum handleType, void *handle );
+typedef void       (GLAPIENTRY *PFN_glImportSemaphoreWin32NameEXT)( GLuint semaphore, GLenum handleType, const void *name );
+typedef GLsync     (GLAPIENTRY *PFN_glImportSyncEXT)( GLenum external_sync_type, GLintptr external_sync, GLbitfield flags );
+typedef void       (GLAPIENTRY *PFN_glIndexFormatNV)( GLenum type, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glIndexFuncEXT)( GLenum func, GLclampf ref );
+typedef void       (GLAPIENTRY *PFN_glIndexMaterialEXT)( GLenum face, GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glIndexPointerEXT)( GLenum type, GLsizei stride, GLsizei count, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glIndexPointerListIBM)( GLenum type, GLint stride, const void **pointer, GLint ptrstride );
+typedef void       (GLAPIENTRY *PFN_glIndexxOES)( GLfixed component );
+typedef void       (GLAPIENTRY *PFN_glIndexxvOES)( const GLfixed *component );
+typedef void       (GLAPIENTRY *PFN_glInsertComponentEXT)( GLuint res, GLuint src, GLuint num );
+typedef void       (GLAPIENTRY *PFN_glInsertEventMarkerEXT)( GLsizei length, const GLchar *marker );
+typedef void       (GLAPIENTRY *PFN_glInstrumentsBufferSGIX)( GLsizei size, GLint *buffer );
+typedef void       (GLAPIENTRY *PFN_glInterpolatePathsNV)( GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight );
+typedef void       (GLAPIENTRY *PFN_glInvalidateBufferData)( GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glInvalidateBufferSubData)( GLuint buffer, GLintptr offset, GLsizeiptr length );
+typedef void       (GLAPIENTRY *PFN_glInvalidateFramebuffer)( GLenum target, GLsizei numAttachments, const GLenum *attachments );
+typedef void       (GLAPIENTRY *PFN_glInvalidateNamedFramebufferData)( GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments );
+typedef void       (GLAPIENTRY *PFN_glInvalidateNamedFramebufferSubData)( GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glInvalidateSubFramebuffer)( GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glInvalidateTexImage)( GLuint texture, GLint level );
+typedef void       (GLAPIENTRY *PFN_glInvalidateTexSubImage)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsAsyncMarkerSGIX)( GLuint marker );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsBuffer)( GLuint buffer );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsBufferARB)( GLuint buffer );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsBufferResidentNV)( GLenum target );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsCommandListNV)( GLuint list );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsEnabledIndexedEXT)( GLenum target, GLuint index );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsEnabledi)( GLenum target, GLuint index );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsFenceAPPLE)( GLuint fence );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsFenceNV)( GLuint fence );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsFramebuffer)( GLuint framebuffer );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsFramebufferEXT)( GLuint framebuffer );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsImageHandleResidentARB)( GLuint64 handle );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsImageHandleResidentNV)( GLuint64 handle );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsMemoryObjectEXT)( GLuint memoryObject );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsNameAMD)( GLenum identifier, GLuint name );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsNamedBufferResidentNV)( GLuint buffer );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsNamedStringARB)( GLint namelen, const GLchar *name );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsObjectBufferATI)( GLuint buffer );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsOcclusionQueryNV)( GLuint id );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsPathNV)( GLuint path );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsPointInFillPathNV)( GLuint path, GLuint mask, GLfloat x, GLfloat y );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsPointInStrokePathNV)( GLuint path, GLfloat x, GLfloat y );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsProgram)( GLuint program );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsProgramARB)( GLuint program );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsProgramNV)( GLuint id );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsProgramPipeline)( GLuint pipeline );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsQuery)( GLuint id );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsQueryARB)( GLuint id );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsRenderbuffer)( GLuint renderbuffer );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsRenderbufferEXT)( GLuint renderbuffer );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsSampler)( GLuint sampler );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsSemaphoreEXT)( GLuint semaphore );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsShader)( GLuint shader );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsStateNV)( GLuint state );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsSync)( GLsync sync );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsTextureEXT)( GLuint texture );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsTextureHandleResidentARB)( GLuint64 handle );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsTextureHandleResidentNV)( GLuint64 handle );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsTransformFeedback)( GLuint id );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsTransformFeedbackNV)( GLuint id );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsVariantEnabledEXT)( GLuint id, GLenum cap );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsVertexArray)( GLuint array );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsVertexArrayAPPLE)( GLuint array );
+typedef GLboolean  (GLAPIENTRY *PFN_glIsVertexAttribEnabledAPPLE)( GLuint index, GLenum pname );
+typedef void       (GLAPIENTRY *PFN_glLGPUCopyImageSubDataNVX)( GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth );
+typedef void       (GLAPIENTRY *PFN_glLGPUInterlockNVX)(void);
+typedef void       (GLAPIENTRY *PFN_glLGPUNamedBufferSubDataNVX)( GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data );
+typedef void       (GLAPIENTRY *PFN_glLabelObjectEXT)( GLenum type, GLuint object, GLsizei length, const GLchar *label );
+typedef void       (GLAPIENTRY *PFN_glLightEnviSGIX)( GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glLightModelxOES)( GLenum pname, GLfixed param );
+typedef void       (GLAPIENTRY *PFN_glLightModelxvOES)( GLenum pname, const GLfixed *param );
+typedef void       (GLAPIENTRY *PFN_glLightxOES)( GLenum light, GLenum pname, GLfixed param );
+typedef void       (GLAPIENTRY *PFN_glLightxvOES)( GLenum light, GLenum pname, const GLfixed *params );
+typedef void       (GLAPIENTRY *PFN_glLineWidthxOES)( GLfixed width );
+typedef void       (GLAPIENTRY *PFN_glLinkProgram)( GLuint program );
+typedef void       (GLAPIENTRY *PFN_glLinkProgramARB)( GLhandleARB programObj );
+typedef void       (GLAPIENTRY *PFN_glListDrawCommandsStatesClientNV)( GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count );
+typedef void       (GLAPIENTRY *PFN_glListParameterfSGIX)( GLuint list, GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glListParameterfvSGIX)( GLuint list, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glListParameteriSGIX)( GLuint list, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glListParameterivSGIX)( GLuint list, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glLoadIdentityDeformationMapSGIX)( GLbitfield mask );
+typedef void       (GLAPIENTRY *PFN_glLoadMatrixxOES)( const GLfixed *m );
+typedef void       (GLAPIENTRY *PFN_glLoadProgramNV)( GLenum target, GLuint id, GLsizei len, const GLubyte *program );
+typedef void       (GLAPIENTRY *PFN_glLoadTransposeMatrixd)( const GLdouble *m );
+typedef void       (GLAPIENTRY *PFN_glLoadTransposeMatrixdARB)( const GLdouble *m );
+typedef void       (GLAPIENTRY *PFN_glLoadTransposeMatrixf)( const GLfloat *m );
+typedef void       (GLAPIENTRY *PFN_glLoadTransposeMatrixfARB)( const GLfloat *m );
+typedef void       (GLAPIENTRY *PFN_glLoadTransposeMatrixxOES)( const GLfixed *m );
+typedef void       (GLAPIENTRY *PFN_glLockArraysEXT)( GLint first, GLsizei count );
+typedef void       (GLAPIENTRY *PFN_glMTexCoord2fSGIS)( GLenum target, GLfloat s, GLfloat t );
+typedef void       (GLAPIENTRY *PFN_glMTexCoord2fvSGIS)( GLenum target, GLfloat * v );
+typedef void       (GLAPIENTRY *PFN_glMakeBufferNonResidentNV)( GLenum target );
+typedef void       (GLAPIENTRY *PFN_glMakeBufferResidentNV)( GLenum target, GLenum access );
+typedef void       (GLAPIENTRY *PFN_glMakeImageHandleNonResidentARB)( GLuint64 handle );
+typedef void       (GLAPIENTRY *PFN_glMakeImageHandleNonResidentNV)( GLuint64 handle );
+typedef void       (GLAPIENTRY *PFN_glMakeImageHandleResidentARB)( GLuint64 handle, GLenum access );
+typedef void       (GLAPIENTRY *PFN_glMakeImageHandleResidentNV)( GLuint64 handle, GLenum access );
+typedef void       (GLAPIENTRY *PFN_glMakeNamedBufferNonResidentNV)( GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glMakeNamedBufferResidentNV)( GLuint buffer, GLenum access );
+typedef void       (GLAPIENTRY *PFN_glMakeTextureHandleNonResidentARB)( GLuint64 handle );
+typedef void       (GLAPIENTRY *PFN_glMakeTextureHandleNonResidentNV)( GLuint64 handle );
+typedef void       (GLAPIENTRY *PFN_glMakeTextureHandleResidentARB)( GLuint64 handle );
+typedef void       (GLAPIENTRY *PFN_glMakeTextureHandleResidentNV)( GLuint64 handle );
+typedef void       (GLAPIENTRY *PFN_glMap1xOES)( GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points );
+typedef void       (GLAPIENTRY *PFN_glMap2xOES)( GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points );
+typedef void *     (GLAPIENTRY *PFN_glMapBuffer)( GLenum target, GLenum access );
+typedef void *     (GLAPIENTRY *PFN_glMapBufferARB)( GLenum target, GLenum access );
+typedef void *     (GLAPIENTRY *PFN_glMapBufferRange)( GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access );
+typedef void       (GLAPIENTRY *PFN_glMapControlPointsNV)( GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points );
+typedef void       (GLAPIENTRY *PFN_glMapGrid1xOES)( GLint n, GLfixed u1, GLfixed u2 );
+typedef void       (GLAPIENTRY *PFN_glMapGrid2xOES)( GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2 );
+typedef void *     (GLAPIENTRY *PFN_glMapNamedBuffer)( GLuint buffer, GLenum access );
+typedef void *     (GLAPIENTRY *PFN_glMapNamedBufferEXT)( GLuint buffer, GLenum access );
+typedef void *     (GLAPIENTRY *PFN_glMapNamedBufferRange)( GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access );
+typedef void *     (GLAPIENTRY *PFN_glMapNamedBufferRangeEXT)( GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access );
+typedef void *     (GLAPIENTRY *PFN_glMapObjectBufferATI)( GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glMapParameterfvNV)( GLenum target, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glMapParameterivNV)( GLenum target, GLenum pname, const GLint *params );
+typedef void *     (GLAPIENTRY *PFN_glMapTexture2DINTEL)( GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout );
+typedef void       (GLAPIENTRY *PFN_glMapVertexAttrib1dAPPLE)( GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points );
+typedef void       (GLAPIENTRY *PFN_glMapVertexAttrib1fAPPLE)( GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points );
+typedef void       (GLAPIENTRY *PFN_glMapVertexAttrib2dAPPLE)( GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points );
+typedef void       (GLAPIENTRY *PFN_glMapVertexAttrib2fAPPLE)( GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points );
+typedef void       (GLAPIENTRY *PFN_glMaterialxOES)( GLenum face, GLenum pname, GLfixed param );
+typedef void       (GLAPIENTRY *PFN_glMaterialxvOES)( GLenum face, GLenum pname, const GLfixed *param );
+typedef void       (GLAPIENTRY *PFN_glMatrixFrustumEXT)( GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
+typedef void       (GLAPIENTRY *PFN_glMatrixIndexPointerARB)( GLint size, GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glMatrixIndexubvARB)( GLint size, const GLubyte *indices );
+typedef void       (GLAPIENTRY *PFN_glMatrixIndexuivARB)( GLint size, const GLuint *indices );
+typedef void       (GLAPIENTRY *PFN_glMatrixIndexusvARB)( GLint size, const GLushort *indices );
+typedef void       (GLAPIENTRY *PFN_glMatrixLoad3x2fNV)( GLenum matrixMode, const GLfloat *m );
+typedef void       (GLAPIENTRY *PFN_glMatrixLoad3x3fNV)( GLenum matrixMode, const GLfloat *m );
+typedef void       (GLAPIENTRY *PFN_glMatrixLoadIdentityEXT)( GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glMatrixLoadTranspose3x3fNV)( GLenum matrixMode, const GLfloat *m );
+typedef void       (GLAPIENTRY *PFN_glMatrixLoadTransposedEXT)( GLenum mode, const GLdouble *m );
+typedef void       (GLAPIENTRY *PFN_glMatrixLoadTransposefEXT)( GLenum mode, const GLfloat *m );
+typedef void       (GLAPIENTRY *PFN_glMatrixLoaddEXT)( GLenum mode, const GLdouble *m );
+typedef void       (GLAPIENTRY *PFN_glMatrixLoadfEXT)( GLenum mode, const GLfloat *m );
+typedef void       (GLAPIENTRY *PFN_glMatrixMult3x2fNV)( GLenum matrixMode, const GLfloat *m );
+typedef void       (GLAPIENTRY *PFN_glMatrixMult3x3fNV)( GLenum matrixMode, const GLfloat *m );
+typedef void       (GLAPIENTRY *PFN_glMatrixMultTranspose3x3fNV)( GLenum matrixMode, const GLfloat *m );
+typedef void       (GLAPIENTRY *PFN_glMatrixMultTransposedEXT)( GLenum mode, const GLdouble *m );
+typedef void       (GLAPIENTRY *PFN_glMatrixMultTransposefEXT)( GLenum mode, const GLfloat *m );
+typedef void       (GLAPIENTRY *PFN_glMatrixMultdEXT)( GLenum mode, const GLdouble *m );
+typedef void       (GLAPIENTRY *PFN_glMatrixMultfEXT)( GLenum mode, const GLfloat *m );
+typedef void       (GLAPIENTRY *PFN_glMatrixOrthoEXT)( GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
+typedef void       (GLAPIENTRY *PFN_glMatrixPopEXT)( GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glMatrixPushEXT)( GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glMatrixRotatedEXT)( GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z );
+typedef void       (GLAPIENTRY *PFN_glMatrixRotatefEXT)( GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glMatrixScaledEXT)( GLenum mode, GLdouble x, GLdouble y, GLdouble z );
+typedef void       (GLAPIENTRY *PFN_glMatrixScalefEXT)( GLenum mode, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glMatrixTranslatedEXT)( GLenum mode, GLdouble x, GLdouble y, GLdouble z );
+typedef void       (GLAPIENTRY *PFN_glMatrixTranslatefEXT)( GLenum mode, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glMaxShaderCompilerThreadsARB)( GLuint count );
+typedef void       (GLAPIENTRY *PFN_glMaxShaderCompilerThreadsKHR)( GLuint count );
+typedef void       (GLAPIENTRY *PFN_glMemoryBarrier)( GLbitfield barriers );
+typedef void       (GLAPIENTRY *PFN_glMemoryBarrierByRegion)( GLbitfield barriers );
+typedef void       (GLAPIENTRY *PFN_glMemoryBarrierEXT)( GLbitfield barriers );
+typedef void       (GLAPIENTRY *PFN_glMemoryObjectParameterivEXT)( GLuint memoryObject, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glMinSampleShading)( GLfloat value );
+typedef void       (GLAPIENTRY *PFN_glMinSampleShadingARB)( GLfloat value );
+typedef void       (GLAPIENTRY *PFN_glMinmax)( GLenum target, GLenum internalformat, GLboolean sink );
+typedef void       (GLAPIENTRY *PFN_glMinmaxEXT)( GLenum target, GLenum internalformat, GLboolean sink );
+typedef void       (GLAPIENTRY *PFN_glMultMatrixxOES)( const GLfixed *m );
+typedef void       (GLAPIENTRY *PFN_glMultTransposeMatrixd)( const GLdouble *m );
+typedef void       (GLAPIENTRY *PFN_glMultTransposeMatrixdARB)( const GLdouble *m );
+typedef void       (GLAPIENTRY *PFN_glMultTransposeMatrixf)( const GLfloat *m );
+typedef void       (GLAPIENTRY *PFN_glMultTransposeMatrixfARB)( const GLfloat *m );
+typedef void       (GLAPIENTRY *PFN_glMultTransposeMatrixxOES)( const GLfixed *m );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawArrays)( GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawArraysEXT)( GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawArraysIndirect)( GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawArraysIndirectAMD)( GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawArraysIndirectBindlessCountNV)( GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawArraysIndirectBindlessNV)( GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawArraysIndirectCount)( GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawArraysIndirectCountARB)( GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawElementArrayAPPLE)( GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawElements)( GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawElementsBaseVertex)( GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawElementsEXT)( GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawElementsIndirect)( GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawElementsIndirectAMD)( GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawElementsIndirectBindlessCountNV)( GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawElementsIndirectBindlessNV)( GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawElementsIndirectCount)( GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawElementsIndirectCountARB)( GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawMeshTasksIndirectCountNV)( GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawMeshTasksIndirectNV)( GLintptr indirect, GLsizei drawcount, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glMultiDrawRangeElementArrayAPPLE)( GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount );
+typedef void       (GLAPIENTRY *PFN_glMultiModeDrawArraysIBM)( const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride );
+typedef void       (GLAPIENTRY *PFN_glMultiModeDrawElementsIBM)( const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride );
+typedef void       (GLAPIENTRY *PFN_glMultiTexBufferEXT)( GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1bOES)( GLenum texture, GLbyte s );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1bvOES)( GLenum texture, const GLbyte *coords );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1d)( GLenum target, GLdouble s );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1dARB)( GLenum target, GLdouble s );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1dSGIS)( GLenum target, GLdouble s );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1dv)( GLenum target, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1dvARB)( GLenum target, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1dvSGIS)( GLenum target, GLdouble * v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1f)( GLenum target, GLfloat s );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1fARB)( GLenum target, GLfloat s );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1fSGIS)( GLenum target, GLfloat s );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1fv)( GLenum target, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1fvARB)( GLenum target, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1fvSGIS)( GLenum target, const GLfloat * v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1hNV)( GLenum target, GLhalfNV s );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1hvNV)( GLenum target, const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1i)( GLenum target, GLint s );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1iARB)( GLenum target, GLint s );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1iSGIS)( GLenum target, GLint s );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1iv)( GLenum target, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1ivARB)( GLenum target, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1ivSGIS)( GLenum target, GLint * v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1s)( GLenum target, GLshort s );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1sARB)( GLenum target, GLshort s );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1sSGIS)( GLenum target, GLshort s );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1sv)( GLenum target, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1svARB)( GLenum target, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1svSGIS)( GLenum target, GLshort * v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1xOES)( GLenum texture, GLfixed s );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord1xvOES)( GLenum texture, const GLfixed *coords );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2bOES)( GLenum texture, GLbyte s, GLbyte t );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2bvOES)( GLenum texture, const GLbyte *coords );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2d)( GLenum target, GLdouble s, GLdouble t );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2dARB)( GLenum target, GLdouble s, GLdouble t );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2dSGIS)( GLenum target, GLdouble s, GLdouble t );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2dv)( GLenum target, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2dvARB)( GLenum target, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2dvSGIS)( GLenum target, GLdouble * v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2f)( GLenum target, GLfloat s, GLfloat t );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2fARB)( GLenum target, GLfloat s, GLfloat t );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2fSGIS)( GLenum target, GLfloat s, GLfloat t );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2fv)( GLenum target, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2fvARB)( GLenum target, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2fvSGIS)( GLenum target, GLfloat * v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2hNV)( GLenum target, GLhalfNV s, GLhalfNV t );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2hvNV)( GLenum target, const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2i)( GLenum target, GLint s, GLint t );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2iARB)( GLenum target, GLint s, GLint t );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2iSGIS)( GLenum target, GLint s, GLint t );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2iv)( GLenum target, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2ivARB)( GLenum target, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2ivSGIS)( GLenum target, GLint * v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2s)( GLenum target, GLshort s, GLshort t );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2sARB)( GLenum target, GLshort s, GLshort t );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2sSGIS)( GLenum target, GLshort s, GLshort t );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2sv)( GLenum target, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2svARB)( GLenum target, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2svSGIS)( GLenum target, GLshort * v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2xOES)( GLenum texture, GLfixed s, GLfixed t );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord2xvOES)( GLenum texture, const GLfixed *coords );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3bOES)( GLenum texture, GLbyte s, GLbyte t, GLbyte r );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3bvOES)( GLenum texture, const GLbyte *coords );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3d)( GLenum target, GLdouble s, GLdouble t, GLdouble r );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3dARB)( GLenum target, GLdouble s, GLdouble t, GLdouble r );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3dSGIS)( GLenum target, GLdouble s, GLdouble t, GLdouble r );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3dv)( GLenum target, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3dvARB)( GLenum target, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3dvSGIS)( GLenum target, GLdouble * v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3f)( GLenum target, GLfloat s, GLfloat t, GLfloat r );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3fARB)( GLenum target, GLfloat s, GLfloat t, GLfloat r );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3fSGIS)( GLenum target, GLfloat s, GLfloat t, GLfloat r );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3fv)( GLenum target, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3fvARB)( GLenum target, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3fvSGIS)( GLenum target, GLfloat * v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3hNV)( GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3hvNV)( GLenum target, const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3i)( GLenum target, GLint s, GLint t, GLint r );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3iARB)( GLenum target, GLint s, GLint t, GLint r );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3iSGIS)( GLenum target, GLint s, GLint t, GLint r );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3iv)( GLenum target, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3ivARB)( GLenum target, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3ivSGIS)( GLenum target, GLint * v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3s)( GLenum target, GLshort s, GLshort t, GLshort r );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3sARB)( GLenum target, GLshort s, GLshort t, GLshort r );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3sSGIS)( GLenum target, GLshort s, GLshort t, GLshort r );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3sv)( GLenum target, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3svARB)( GLenum target, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3svSGIS)( GLenum target, GLshort * v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3xOES)( GLenum texture, GLfixed s, GLfixed t, GLfixed r );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord3xvOES)( GLenum texture, const GLfixed *coords );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4bOES)( GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4bvOES)( GLenum texture, const GLbyte *coords );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4d)( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4dARB)( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4dSGIS)( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4dv)( GLenum target, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4dvARB)( GLenum target, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4dvSGIS)( GLenum target, GLdouble * v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4f)( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4fARB)( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4fSGIS)( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4fv)( GLenum target, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4fvARB)( GLenum target, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4fvSGIS)( GLenum target, GLfloat * v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4hNV)( GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4hvNV)( GLenum target, const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4i)( GLenum target, GLint s, GLint t, GLint r, GLint q );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4iARB)( GLenum target, GLint s, GLint t, GLint r, GLint q );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4iSGIS)( GLenum target, GLint s, GLint t, GLint r, GLint q );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4iv)( GLenum target, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4ivARB)( GLenum target, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4ivSGIS)( GLenum target, GLint * v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4s)( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4sARB)( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4sSGIS)( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4sv)( GLenum target, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4svARB)( GLenum target, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4svSGIS)( GLenum target, GLshort * v );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4xOES)( GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoord4xvOES)( GLenum texture, const GLfixed *coords );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoordP1ui)( GLenum texture, GLenum type, GLuint coords );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoordP1uiv)( GLenum texture, GLenum type, const GLuint *coords );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoordP2ui)( GLenum texture, GLenum type, GLuint coords );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoordP2uiv)( GLenum texture, GLenum type, const GLuint *coords );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoordP3ui)( GLenum texture, GLenum type, GLuint coords );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoordP3uiv)( GLenum texture, GLenum type, const GLuint *coords );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoordP4ui)( GLenum texture, GLenum type, GLuint coords );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoordP4uiv)( GLenum texture, GLenum type, const GLuint *coords );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoordPointerEXT)( GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glMultiTexCoordPointerSGIS)( GLenum target, GLint size, GLenum type, GLsizei stride, GLvoid * pointer );
+typedef void       (GLAPIENTRY *PFN_glMultiTexEnvfEXT)( GLenum texunit, GLenum target, GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glMultiTexEnvfvEXT)( GLenum texunit, GLenum target, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glMultiTexEnviEXT)( GLenum texunit, GLenum target, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glMultiTexEnvivEXT)( GLenum texunit, GLenum target, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glMultiTexGendEXT)( GLenum texunit, GLenum coord, GLenum pname, GLdouble param );
+typedef void       (GLAPIENTRY *PFN_glMultiTexGendvEXT)( GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glMultiTexGenfEXT)( GLenum texunit, GLenum coord, GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glMultiTexGenfvEXT)( GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glMultiTexGeniEXT)( GLenum texunit, GLenum coord, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glMultiTexGenivEXT)( GLenum texunit, GLenum coord, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glMultiTexImage1DEXT)( GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glMultiTexImage2DEXT)( GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glMultiTexImage3DEXT)( GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glMultiTexParameterIivEXT)( GLenum texunit, GLenum target, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glMultiTexParameterIuivEXT)( GLenum texunit, GLenum target, GLenum pname, const GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glMultiTexParameterfEXT)( GLenum texunit, GLenum target, GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glMultiTexParameterfvEXT)( GLenum texunit, GLenum target, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glMultiTexParameteriEXT)( GLenum texunit, GLenum target, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glMultiTexParameterivEXT)( GLenum texunit, GLenum target, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glMultiTexRenderbufferEXT)( GLenum texunit, GLenum target, GLuint renderbuffer );
+typedef void       (GLAPIENTRY *PFN_glMultiTexSubImage1DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glMultiTexSubImage2DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glMultiTexSubImage3DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glMulticastBarrierNV)(void);
+typedef void       (GLAPIENTRY *PFN_glMulticastBlitFramebufferNV)( GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter );
+typedef void       (GLAPIENTRY *PFN_glMulticastBufferSubDataNV)( GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data );
+typedef void       (GLAPIENTRY *PFN_glMulticastCopyBufferSubDataNV)( GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size );
+typedef void       (GLAPIENTRY *PFN_glMulticastCopyImageSubDataNV)( GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth );
+typedef void       (GLAPIENTRY *PFN_glMulticastFramebufferSampleLocationsfvNV)( GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glMulticastGetQueryObjecti64vNV)( GLuint gpu, GLuint id, GLenum pname, GLint64 *params );
+typedef void       (GLAPIENTRY *PFN_glMulticastGetQueryObjectivNV)( GLuint gpu, GLuint id, GLenum pname, GLint *params );
+typedef void       (GLAPIENTRY *PFN_glMulticastGetQueryObjectui64vNV)( GLuint gpu, GLuint id, GLenum pname, GLuint64 *params );
+typedef void       (GLAPIENTRY *PFN_glMulticastGetQueryObjectuivNV)( GLuint gpu, GLuint id, GLenum pname, GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glMulticastScissorArrayvNVX)( GLuint gpu, GLuint first, GLsizei count, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glMulticastViewportArrayvNVX)( GLuint gpu, GLuint first, GLsizei count, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glMulticastViewportPositionWScaleNVX)( GLuint gpu, GLuint index, GLfloat xcoeff, GLfloat ycoeff );
+typedef void       (GLAPIENTRY *PFN_glMulticastWaitSyncNV)( GLuint signalGpu, GLbitfield waitGpuMask );
+typedef void       (GLAPIENTRY *PFN_glNamedBufferAttachMemoryNV)( GLuint buffer, GLuint memory, GLuint64 offset );
+typedef void       (GLAPIENTRY *PFN_glNamedBufferData)( GLuint buffer, GLsizeiptr size, const void *data, GLenum usage );
+typedef void       (GLAPIENTRY *PFN_glNamedBufferDataEXT)( GLuint buffer, GLsizeiptr size, const void *data, GLenum usage );
+typedef void       (GLAPIENTRY *PFN_glNamedBufferPageCommitmentARB)( GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit );
+typedef void       (GLAPIENTRY *PFN_glNamedBufferPageCommitmentEXT)( GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit );
+typedef void       (GLAPIENTRY *PFN_glNamedBufferStorage)( GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags );
+typedef void       (GLAPIENTRY *PFN_glNamedBufferStorageEXT)( GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags );
+typedef void       (GLAPIENTRY *PFN_glNamedBufferStorageExternalEXT)( GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags );
+typedef void       (GLAPIENTRY *PFN_glNamedBufferStorageMemEXT)( GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset );
+typedef void       (GLAPIENTRY *PFN_glNamedBufferSubData)( GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data );
+typedef void       (GLAPIENTRY *PFN_glNamedBufferSubDataEXT)( GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data );
+typedef void       (GLAPIENTRY *PFN_glNamedCopyBufferSubDataEXT)( GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size );
+typedef void       (GLAPIENTRY *PFN_glNamedFramebufferDrawBuffer)( GLuint framebuffer, GLenum buf );
+typedef void       (GLAPIENTRY *PFN_glNamedFramebufferDrawBuffers)( GLuint framebuffer, GLsizei n, const GLenum *bufs );
+typedef void       (GLAPIENTRY *PFN_glNamedFramebufferParameteri)( GLuint framebuffer, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glNamedFramebufferParameteriEXT)( GLuint framebuffer, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glNamedFramebufferReadBuffer)( GLuint framebuffer, GLenum src );
+typedef void       (GLAPIENTRY *PFN_glNamedFramebufferRenderbuffer)( GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer );
+typedef void       (GLAPIENTRY *PFN_glNamedFramebufferRenderbufferEXT)( GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer );
+typedef void       (GLAPIENTRY *PFN_glNamedFramebufferSampleLocationsfvARB)( GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glNamedFramebufferSampleLocationsfvNV)( GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glNamedFramebufferSamplePositionsfvAMD)( GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values );
+typedef void       (GLAPIENTRY *PFN_glNamedFramebufferTexture)( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level );
+typedef void       (GLAPIENTRY *PFN_glNamedFramebufferTexture1DEXT)( GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
+typedef void       (GLAPIENTRY *PFN_glNamedFramebufferTexture2DEXT)( GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
+typedef void       (GLAPIENTRY *PFN_glNamedFramebufferTexture3DEXT)( GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset );
+typedef void       (GLAPIENTRY *PFN_glNamedFramebufferTextureEXT)( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level );
+typedef void       (GLAPIENTRY *PFN_glNamedFramebufferTextureFaceEXT)( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face );
+typedef void       (GLAPIENTRY *PFN_glNamedFramebufferTextureLayer)( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer );
+typedef void       (GLAPIENTRY *PFN_glNamedFramebufferTextureLayerEXT)( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer );
+typedef void       (GLAPIENTRY *PFN_glNamedProgramLocalParameter4dEXT)( GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
+typedef void       (GLAPIENTRY *PFN_glNamedProgramLocalParameter4dvEXT)( GLuint program, GLenum target, GLuint index, const GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glNamedProgramLocalParameter4fEXT)( GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
+typedef void       (GLAPIENTRY *PFN_glNamedProgramLocalParameter4fvEXT)( GLuint program, GLenum target, GLuint index, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glNamedProgramLocalParameterI4iEXT)( GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w );
+typedef void       (GLAPIENTRY *PFN_glNamedProgramLocalParameterI4ivEXT)( GLuint program, GLenum target, GLuint index, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glNamedProgramLocalParameterI4uiEXT)( GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
+typedef void       (GLAPIENTRY *PFN_glNamedProgramLocalParameterI4uivEXT)( GLuint program, GLenum target, GLuint index, const GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glNamedProgramLocalParameters4fvEXT)( GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glNamedProgramLocalParametersI4ivEXT)( GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glNamedProgramLocalParametersI4uivEXT)( GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glNamedProgramStringEXT)( GLuint program, GLenum target, GLenum format, GLsizei len, const void *string );
+typedef void       (GLAPIENTRY *PFN_glNamedRenderbufferStorage)( GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glNamedRenderbufferStorageEXT)( GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glNamedRenderbufferStorageMultisample)( GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glNamedRenderbufferStorageMultisampleAdvancedAMD)( GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glNamedRenderbufferStorageMultisampleCoverageEXT)( GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glNamedRenderbufferStorageMultisampleEXT)( GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glNamedStringARB)( GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string );
+typedef GLuint     (GLAPIENTRY *PFN_glNewBufferRegion)( GLenum type );
+typedef GLuint     (GLAPIENTRY *PFN_glNewObjectBufferATI)( GLsizei size, const void *pointer, GLenum usage );
+typedef void       (GLAPIENTRY *PFN_glNormal3fVertex3fSUN)( GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glNormal3fVertex3fvSUN)( const GLfloat *n, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glNormal3hNV)( GLhalfNV nx, GLhalfNV ny, GLhalfNV nz );
+typedef void       (GLAPIENTRY *PFN_glNormal3hvNV)( const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glNormal3xOES)( GLfixed nx, GLfixed ny, GLfixed nz );
+typedef void       (GLAPIENTRY *PFN_glNormal3xvOES)( const GLfixed *coords );
+typedef void       (GLAPIENTRY *PFN_glNormalFormatNV)( GLenum type, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glNormalP3ui)( GLenum type, GLuint coords );
+typedef void       (GLAPIENTRY *PFN_glNormalP3uiv)( GLenum type, const GLuint *coords );
+typedef void       (GLAPIENTRY *PFN_glNormalPointerEXT)( GLenum type, GLsizei stride, GLsizei count, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glNormalPointerListIBM)( GLenum type, GLint stride, const void **pointer, GLint ptrstride );
+typedef void       (GLAPIENTRY *PFN_glNormalPointervINTEL)( GLenum type, const void **pointer );
+typedef void       (GLAPIENTRY *PFN_glNormalStream3bATI)( GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz );
+typedef void       (GLAPIENTRY *PFN_glNormalStream3bvATI)( GLenum stream, const GLbyte *coords );
+typedef void       (GLAPIENTRY *PFN_glNormalStream3dATI)( GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz );
+typedef void       (GLAPIENTRY *PFN_glNormalStream3dvATI)( GLenum stream, const GLdouble *coords );
+typedef void       (GLAPIENTRY *PFN_glNormalStream3fATI)( GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz );
+typedef void       (GLAPIENTRY *PFN_glNormalStream3fvATI)( GLenum stream, const GLfloat *coords );
+typedef void       (GLAPIENTRY *PFN_glNormalStream3iATI)( GLenum stream, GLint nx, GLint ny, GLint nz );
+typedef void       (GLAPIENTRY *PFN_glNormalStream3ivATI)( GLenum stream, const GLint *coords );
+typedef void       (GLAPIENTRY *PFN_glNormalStream3sATI)( GLenum stream, GLshort nx, GLshort ny, GLshort nz );
+typedef void       (GLAPIENTRY *PFN_glNormalStream3svATI)( GLenum stream, const GLshort *coords );
+typedef void       (GLAPIENTRY *PFN_glObjectLabel)( GLenum identifier, GLuint name, GLsizei length, const GLchar *label );
+typedef void       (GLAPIENTRY *PFN_glObjectPtrLabel)( const void *ptr, GLsizei length, const GLchar *label );
+typedef GLenum     (GLAPIENTRY *PFN_glObjectPurgeableAPPLE)( GLenum objectType, GLuint name, GLenum option );
+typedef GLenum     (GLAPIENTRY *PFN_glObjectUnpurgeableAPPLE)( GLenum objectType, GLuint name, GLenum option );
+typedef void       (GLAPIENTRY *PFN_glOrthofOES)( GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f );
+typedef void       (GLAPIENTRY *PFN_glOrthoxOES)( GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f );
+typedef void       (GLAPIENTRY *PFN_glPNTrianglesfATI)( GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glPNTrianglesiATI)( GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glPassTexCoordATI)( GLuint dst, GLuint coord, GLenum swizzle );
+typedef void       (GLAPIENTRY *PFN_glPassThroughxOES)( GLfixed token );
+typedef void       (GLAPIENTRY *PFN_glPatchParameterfv)( GLenum pname, const GLfloat *values );
+typedef void       (GLAPIENTRY *PFN_glPatchParameteri)( GLenum pname, GLint value );
+typedef void       (GLAPIENTRY *PFN_glPathColorGenNV)( GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs );
+typedef void       (GLAPIENTRY *PFN_glPathCommandsNV)( GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords );
+typedef void       (GLAPIENTRY *PFN_glPathCoordsNV)( GLuint path, GLsizei numCoords, GLenum coordType, const void *coords );
+typedef void       (GLAPIENTRY *PFN_glPathCoverDepthFuncNV)( GLenum func );
+typedef void       (GLAPIENTRY *PFN_glPathDashArrayNV)( GLuint path, GLsizei dashCount, const GLfloat *dashArray );
+typedef void       (GLAPIENTRY *PFN_glPathFogGenNV)( GLenum genMode );
+typedef GLenum     (GLAPIENTRY *PFN_glPathGlyphIndexArrayNV)( GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale );
+typedef GLenum     (GLAPIENTRY *PFN_glPathGlyphIndexRangeNV)( GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2] );
+typedef void       (GLAPIENTRY *PFN_glPathGlyphRangeNV)( GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale );
+typedef void       (GLAPIENTRY *PFN_glPathGlyphsNV)( GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale );
+typedef GLenum     (GLAPIENTRY *PFN_glPathMemoryGlyphIndexArrayNV)( GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale );
+typedef void       (GLAPIENTRY *PFN_glPathParameterfNV)( GLuint path, GLenum pname, GLfloat value );
+typedef void       (GLAPIENTRY *PFN_glPathParameterfvNV)( GLuint path, GLenum pname, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glPathParameteriNV)( GLuint path, GLenum pname, GLint value );
+typedef void       (GLAPIENTRY *PFN_glPathParameterivNV)( GLuint path, GLenum pname, const GLint *value );
+typedef void       (GLAPIENTRY *PFN_glPathStencilDepthOffsetNV)( GLfloat factor, GLfloat units );
+typedef void       (GLAPIENTRY *PFN_glPathStencilFuncNV)( GLenum func, GLint ref, GLuint mask );
+typedef void       (GLAPIENTRY *PFN_glPathStringNV)( GLuint path, GLenum format, GLsizei length, const void *pathString );
+typedef void       (GLAPIENTRY *PFN_glPathSubCommandsNV)( GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords );
+typedef void       (GLAPIENTRY *PFN_glPathSubCoordsNV)( GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords );
+typedef void       (GLAPIENTRY *PFN_glPathTexGenNV)( GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs );
+typedef void       (GLAPIENTRY *PFN_glPauseTransformFeedback)(void);
+typedef void       (GLAPIENTRY *PFN_glPauseTransformFeedbackNV)(void);
+typedef void       (GLAPIENTRY *PFN_glPixelDataRangeNV)( GLenum target, GLsizei length, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glPixelMapx)( GLenum map, GLint size, const GLfixed *values );
+typedef void       (GLAPIENTRY *PFN_glPixelStorex)( GLenum pname, GLfixed param );
+typedef void       (GLAPIENTRY *PFN_glPixelTexGenParameterfSGIS)( GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glPixelTexGenParameterfvSGIS)( GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glPixelTexGenParameteriSGIS)( GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glPixelTexGenParameterivSGIS)( GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glPixelTexGenSGIX)( GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glPixelTransferxOES)( GLenum pname, GLfixed param );
+typedef void       (GLAPIENTRY *PFN_glPixelTransformParameterfEXT)( GLenum target, GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glPixelTransformParameterfvEXT)( GLenum target, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glPixelTransformParameteriEXT)( GLenum target, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glPixelTransformParameterivEXT)( GLenum target, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glPixelZoomxOES)( GLfixed xfactor, GLfixed yfactor );
+typedef GLboolean  (GLAPIENTRY *PFN_glPointAlongPathNV)( GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY );
+typedef void       (GLAPIENTRY *PFN_glPointParameterf)( GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glPointParameterfARB)( GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glPointParameterfEXT)( GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glPointParameterfSGIS)( GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glPointParameterfv)( GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glPointParameterfvARB)( GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glPointParameterfvEXT)( GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glPointParameterfvSGIS)( GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glPointParameteri)( GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glPointParameteriNV)( GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glPointParameteriv)( GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glPointParameterivNV)( GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glPointParameterxvOES)( GLenum pname, const GLfixed *params );
+typedef void       (GLAPIENTRY *PFN_glPointSizexOES)( GLfixed size );
+typedef GLint      (GLAPIENTRY *PFN_glPollAsyncSGIX)( GLuint *markerp );
+typedef GLint      (GLAPIENTRY *PFN_glPollInstrumentsSGIX)( GLint *marker_p );
+typedef void       (GLAPIENTRY *PFN_glPolygonOffsetClamp)( GLfloat factor, GLfloat units, GLfloat clamp );
+typedef void       (GLAPIENTRY *PFN_glPolygonOffsetClampEXT)( GLfloat factor, GLfloat units, GLfloat clamp );
+typedef void       (GLAPIENTRY *PFN_glPolygonOffsetEXT)( GLfloat factor, GLfloat bias );
+typedef void       (GLAPIENTRY *PFN_glPolygonOffsetxOES)( GLfixed factor, GLfixed units );
+typedef void       (GLAPIENTRY *PFN_glPopDebugGroup)(void);
+typedef void       (GLAPIENTRY *PFN_glPopGroupMarkerEXT)(void);
+typedef void       (GLAPIENTRY *PFN_glPresentFrameDualFillNV)( GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3 );
+typedef void       (GLAPIENTRY *PFN_glPresentFrameKeyedNV)( GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1 );
+typedef void       (GLAPIENTRY *PFN_glPrimitiveBoundingBoxARB)( GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW );
+typedef void       (GLAPIENTRY *PFN_glPrimitiveRestartIndex)( GLuint index );
+typedef void       (GLAPIENTRY *PFN_glPrimitiveRestartIndexNV)( GLuint index );
+typedef void       (GLAPIENTRY *PFN_glPrimitiveRestartNV)(void);
+typedef void       (GLAPIENTRY *PFN_glPrioritizeTexturesEXT)( GLsizei n, const GLuint *textures, const GLclampf *priorities );
+typedef void       (GLAPIENTRY *PFN_glPrioritizeTexturesxOES)( GLsizei n, const GLuint *textures, const GLfixed *priorities );
+typedef void       (GLAPIENTRY *PFN_glProgramBinary)( GLuint program, GLenum binaryFormat, const void *binary, GLsizei length );
+typedef void       (GLAPIENTRY *PFN_glProgramBufferParametersIivNV)( GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glProgramBufferParametersIuivNV)( GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glProgramBufferParametersfvNV)( GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glProgramEnvParameter4dARB)( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
+typedef void       (GLAPIENTRY *PFN_glProgramEnvParameter4dvARB)( GLenum target, GLuint index, const GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glProgramEnvParameter4fARB)( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
+typedef void       (GLAPIENTRY *PFN_glProgramEnvParameter4fvARB)( GLenum target, GLuint index, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glProgramEnvParameterI4iNV)( GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w );
+typedef void       (GLAPIENTRY *PFN_glProgramEnvParameterI4ivNV)( GLenum target, GLuint index, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glProgramEnvParameterI4uiNV)( GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
+typedef void       (GLAPIENTRY *PFN_glProgramEnvParameterI4uivNV)( GLenum target, GLuint index, const GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glProgramEnvParameters4fvEXT)( GLenum target, GLuint index, GLsizei count, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glProgramEnvParametersI4ivNV)( GLenum target, GLuint index, GLsizei count, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glProgramEnvParametersI4uivNV)( GLenum target, GLuint index, GLsizei count, const GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glProgramLocalParameter4dARB)( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
+typedef void       (GLAPIENTRY *PFN_glProgramLocalParameter4dvARB)( GLenum target, GLuint index, const GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glProgramLocalParameter4fARB)( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
+typedef void       (GLAPIENTRY *PFN_glProgramLocalParameter4fvARB)( GLenum target, GLuint index, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glProgramLocalParameterI4iNV)( GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w );
+typedef void       (GLAPIENTRY *PFN_glProgramLocalParameterI4ivNV)( GLenum target, GLuint index, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glProgramLocalParameterI4uiNV)( GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
+typedef void       (GLAPIENTRY *PFN_glProgramLocalParameterI4uivNV)( GLenum target, GLuint index, const GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glProgramLocalParameters4fvEXT)( GLenum target, GLuint index, GLsizei count, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glProgramLocalParametersI4ivNV)( GLenum target, GLuint index, GLsizei count, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glProgramLocalParametersI4uivNV)( GLenum target, GLuint index, GLsizei count, const GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glProgramNamedParameter4dNV)( GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
+typedef void       (GLAPIENTRY *PFN_glProgramNamedParameter4dvNV)( GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glProgramNamedParameter4fNV)( GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
+typedef void       (GLAPIENTRY *PFN_glProgramNamedParameter4fvNV)( GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glProgramParameter4dNV)( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
+typedef void       (GLAPIENTRY *PFN_glProgramParameter4dvNV)( GLenum target, GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glProgramParameter4fNV)( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
+typedef void       (GLAPIENTRY *PFN_glProgramParameter4fvNV)( GLenum target, GLuint index, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glProgramParameteri)( GLuint program, GLenum pname, GLint value );
+typedef void       (GLAPIENTRY *PFN_glProgramParameteriARB)( GLuint program, GLenum pname, GLint value );
+typedef void       (GLAPIENTRY *PFN_glProgramParameteriEXT)( GLuint program, GLenum pname, GLint value );
+typedef void       (GLAPIENTRY *PFN_glProgramParameters4dvNV)( GLenum target, GLuint index, GLsizei count, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glProgramParameters4fvNV)( GLenum target, GLuint index, GLsizei count, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glProgramPathFragmentInputGenNV)( GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs );
+typedef void       (GLAPIENTRY *PFN_glProgramStringARB)( GLenum target, GLenum format, GLsizei len, const void *string );
+typedef void       (GLAPIENTRY *PFN_glProgramSubroutineParametersuivNV)( GLenum target, GLsizei count, const GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1d)( GLuint program, GLint location, GLdouble v0 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1dEXT)( GLuint program, GLint location, GLdouble x );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1dv)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1dvEXT)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1f)( GLuint program, GLint location, GLfloat v0 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1fEXT)( GLuint program, GLint location, GLfloat v0 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1fv)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1fvEXT)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1i)( GLuint program, GLint location, GLint v0 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1i64ARB)( GLuint program, GLint location, GLint64 x );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1i64NV)( GLuint program, GLint location, GLint64EXT x );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1i64vARB)( GLuint program, GLint location, GLsizei count, const GLint64 *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1i64vNV)( GLuint program, GLint location, GLsizei count, const GLint64EXT *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1iEXT)( GLuint program, GLint location, GLint v0 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1iv)( GLuint program, GLint location, GLsizei count, const GLint *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1ivEXT)( GLuint program, GLint location, GLsizei count, const GLint *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1ui)( GLuint program, GLint location, GLuint v0 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1ui64ARB)( GLuint program, GLint location, GLuint64 x );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1ui64NV)( GLuint program, GLint location, GLuint64EXT x );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1ui64vARB)( GLuint program, GLint location, GLsizei count, const GLuint64 *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1ui64vNV)( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1uiEXT)( GLuint program, GLint location, GLuint v0 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1uiv)( GLuint program, GLint location, GLsizei count, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform1uivEXT)( GLuint program, GLint location, GLsizei count, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2d)( GLuint program, GLint location, GLdouble v0, GLdouble v1 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2dEXT)( GLuint program, GLint location, GLdouble x, GLdouble y );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2dv)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2dvEXT)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2f)( GLuint program, GLint location, GLfloat v0, GLfloat v1 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2fEXT)( GLuint program, GLint location, GLfloat v0, GLfloat v1 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2fv)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2fvEXT)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2i)( GLuint program, GLint location, GLint v0, GLint v1 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2i64ARB)( GLuint program, GLint location, GLint64 x, GLint64 y );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2i64NV)( GLuint program, GLint location, GLint64EXT x, GLint64EXT y );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2i64vARB)( GLuint program, GLint location, GLsizei count, const GLint64 *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2i64vNV)( GLuint program, GLint location, GLsizei count, const GLint64EXT *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2iEXT)( GLuint program, GLint location, GLint v0, GLint v1 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2iv)( GLuint program, GLint location, GLsizei count, const GLint *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2ivEXT)( GLuint program, GLint location, GLsizei count, const GLint *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2ui)( GLuint program, GLint location, GLuint v0, GLuint v1 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2ui64ARB)( GLuint program, GLint location, GLuint64 x, GLuint64 y );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2ui64NV)( GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2ui64vARB)( GLuint program, GLint location, GLsizei count, const GLuint64 *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2ui64vNV)( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2uiEXT)( GLuint program, GLint location, GLuint v0, GLuint v1 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2uiv)( GLuint program, GLint location, GLsizei count, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform2uivEXT)( GLuint program, GLint location, GLsizei count, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3d)( GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3dEXT)( GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3dv)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3dvEXT)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3f)( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3fEXT)( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3fv)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3fvEXT)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3i)( GLuint program, GLint location, GLint v0, GLint v1, GLint v2 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3i64ARB)( GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3i64NV)( GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3i64vARB)( GLuint program, GLint location, GLsizei count, const GLint64 *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3i64vNV)( GLuint program, GLint location, GLsizei count, const GLint64EXT *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3iEXT)( GLuint program, GLint location, GLint v0, GLint v1, GLint v2 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3iv)( GLuint program, GLint location, GLsizei count, const GLint *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3ivEXT)( GLuint program, GLint location, GLsizei count, const GLint *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3ui)( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3ui64ARB)( GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3ui64NV)( GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3ui64vARB)( GLuint program, GLint location, GLsizei count, const GLuint64 *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3ui64vNV)( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3uiEXT)( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3uiv)( GLuint program, GLint location, GLsizei count, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform3uivEXT)( GLuint program, GLint location, GLsizei count, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4d)( GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4dEXT)( GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4dv)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4dvEXT)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4f)( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4fEXT)( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4fv)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4fvEXT)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4i)( GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4i64ARB)( GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4i64NV)( GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4i64vARB)( GLuint program, GLint location, GLsizei count, const GLint64 *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4i64vNV)( GLuint program, GLint location, GLsizei count, const GLint64EXT *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4iEXT)( GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4iv)( GLuint program, GLint location, GLsizei count, const GLint *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4ivEXT)( GLuint program, GLint location, GLsizei count, const GLint *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4ui)( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4ui64ARB)( GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4ui64NV)( GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4ui64vARB)( GLuint program, GLint location, GLsizei count, const GLuint64 *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4ui64vNV)( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4uiEXT)( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4uiv)( GLuint program, GLint location, GLsizei count, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniform4uivEXT)( GLuint program, GLint location, GLsizei count, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformHandleui64ARB)( GLuint program, GLint location, GLuint64 value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformHandleui64NV)( GLuint program, GLint location, GLuint64 value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformHandleui64vARB)( GLuint program, GLint location, GLsizei count, const GLuint64 *values );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformHandleui64vNV)( GLuint program, GLint location, GLsizei count, const GLuint64 *values );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix2dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix2dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix2fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix2fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix2x3dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix2x3dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix2x3fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix2x3fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix2x4dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix2x4dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix2x4fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix2x4fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix3dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix3dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix3fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix3fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix3x2dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix3x2dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix3x2fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix3x2fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix3x4dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix3x4dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix3x4fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix3x4fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix4dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix4dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix4fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix4fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix4x2dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix4x2dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix4x2fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix4x2fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix4x3dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix4x3dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix4x3fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformMatrix4x3fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformui64NV)( GLuint program, GLint location, GLuint64EXT value );
+typedef void       (GLAPIENTRY *PFN_glProgramUniformui64vNV)( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
+typedef void       (GLAPIENTRY *PFN_glProgramVertexLimitNV)( GLenum target, GLint limit );
+typedef void       (GLAPIENTRY *PFN_glProvokingVertex)( GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glProvokingVertexEXT)( GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glPushClientAttribDefaultEXT)( GLbitfield mask );
+typedef void       (GLAPIENTRY *PFN_glPushDebugGroup)( GLenum source, GLuint id, GLsizei length, const GLchar *message );
+typedef void       (GLAPIENTRY *PFN_glPushGroupMarkerEXT)( GLsizei length, const GLchar *marker );
+typedef void       (GLAPIENTRY *PFN_glQueryCounter)( GLuint id, GLenum target );
+typedef GLbitfield (GLAPIENTRY *PFN_glQueryMatrixxOES)( GLfixed *mantissa, GLint *exponent );
+typedef void       (GLAPIENTRY *PFN_glQueryObjectParameteruiAMD)( GLenum target, GLuint id, GLenum pname, GLuint param );
+typedef GLint      (GLAPIENTRY *PFN_glQueryResourceNV)( GLenum queryType, GLint tagId, GLuint count, GLint *buffer );
+typedef void       (GLAPIENTRY *PFN_glQueryResourceTagNV)( GLint tagId, const GLchar *tagString );
+typedef void       (GLAPIENTRY *PFN_glRasterPos2xOES)( GLfixed x, GLfixed y );
+typedef void       (GLAPIENTRY *PFN_glRasterPos2xvOES)( const GLfixed *coords );
+typedef void       (GLAPIENTRY *PFN_glRasterPos3xOES)( GLfixed x, GLfixed y, GLfixed z );
+typedef void       (GLAPIENTRY *PFN_glRasterPos3xvOES)( const GLfixed *coords );
+typedef void       (GLAPIENTRY *PFN_glRasterPos4xOES)( GLfixed x, GLfixed y, GLfixed z, GLfixed w );
+typedef void       (GLAPIENTRY *PFN_glRasterPos4xvOES)( const GLfixed *coords );
+typedef void       (GLAPIENTRY *PFN_glRasterSamplesEXT)( GLuint samples, GLboolean fixedsamplelocations );
+typedef void       (GLAPIENTRY *PFN_glReadBufferRegion)( GLenum region, GLint x, GLint y, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glReadInstrumentsSGIX)( GLint marker );
+typedef void       (GLAPIENTRY *PFN_glReadnPixels)( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data );
+typedef void       (GLAPIENTRY *PFN_glReadnPixelsARB)( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data );
+typedef void       (GLAPIENTRY *PFN_glRectxOES)( GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2 );
+typedef void       (GLAPIENTRY *PFN_glRectxvOES)( const GLfixed *v1, const GLfixed *v2 );
+typedef void       (GLAPIENTRY *PFN_glReferencePlaneSGIX)( const GLdouble *equation );
+typedef GLboolean  (GLAPIENTRY *PFN_glReleaseKeyedMutexWin32EXT)( GLuint memory, GLuint64 key );
+typedef void       (GLAPIENTRY *PFN_glReleaseShaderCompiler)(void);
+typedef void       (GLAPIENTRY *PFN_glRenderGpuMaskNV)( GLbitfield mask );
+typedef void       (GLAPIENTRY *PFN_glRenderbufferStorage)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glRenderbufferStorageEXT)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glRenderbufferStorageMultisample)( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glRenderbufferStorageMultisampleAdvancedAMD)( GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glRenderbufferStorageMultisampleCoverageNV)( GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glRenderbufferStorageMultisampleEXT)( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodePointerSUN)( GLenum type, GLsizei stride, const void **pointer );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeubSUN)( GLubyte code );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeubvSUN)( const GLubyte *code );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeuiColor3fVertex3fSUN)( GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeuiColor3fVertex3fvSUN)( const GLuint *rc, const GLfloat *c, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeuiColor4fNormal3fVertex3fSUN)( GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeuiColor4fNormal3fVertex3fvSUN)( const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeuiColor4ubVertex3fSUN)( GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeuiColor4ubVertex3fvSUN)( const GLuint *rc, const GLubyte *c, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeuiNormal3fVertex3fSUN)( GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeuiNormal3fVertex3fvSUN)( const GLuint *rc, const GLfloat *n, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeuiSUN)( GLuint code );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)( GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)( const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)( GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)( const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeuiTexCoord2fVertex3fSUN)( GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeuiTexCoord2fVertex3fvSUN)( const GLuint *rc, const GLfloat *tc, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeuiVertex3fSUN)( GLuint rc, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeuiVertex3fvSUN)( const GLuint *rc, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeuivSUN)( const GLuint *code );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeusSUN)( GLushort code );
+typedef void       (GLAPIENTRY *PFN_glReplacementCodeusvSUN)( const GLushort *code );
+typedef void       (GLAPIENTRY *PFN_glRequestResidentProgramsNV)( GLsizei n, const GLuint *programs );
+typedef void       (GLAPIENTRY *PFN_glResetHistogram)( GLenum target );
+typedef void       (GLAPIENTRY *PFN_glResetHistogramEXT)( GLenum target );
+typedef void       (GLAPIENTRY *PFN_glResetMemoryObjectParameterNV)( GLuint memory, GLenum pname );
+typedef void       (GLAPIENTRY *PFN_glResetMinmax)( GLenum target );
+typedef void       (GLAPIENTRY *PFN_glResetMinmaxEXT)( GLenum target );
+typedef void       (GLAPIENTRY *PFN_glResizeBuffersMESA)(void);
+typedef void       (GLAPIENTRY *PFN_glResolveDepthValuesNV)(void);
+typedef void       (GLAPIENTRY *PFN_glResumeTransformFeedback)(void);
+typedef void       (GLAPIENTRY *PFN_glResumeTransformFeedbackNV)(void);
+typedef void       (GLAPIENTRY *PFN_glRotatexOES)( GLfixed angle, GLfixed x, GLfixed y, GLfixed z );
+typedef void       (GLAPIENTRY *PFN_glSampleCoverage)( GLfloat value, GLboolean invert );
+typedef void       (GLAPIENTRY *PFN_glSampleCoverageARB)( GLfloat value, GLboolean invert );
+typedef void       (GLAPIENTRY *PFN_glSampleMapATI)( GLuint dst, GLuint interp, GLenum swizzle );
+typedef void       (GLAPIENTRY *PFN_glSampleMaskEXT)( GLclampf value, GLboolean invert );
+typedef void       (GLAPIENTRY *PFN_glSampleMaskIndexedNV)( GLuint index, GLbitfield mask );
+typedef void       (GLAPIENTRY *PFN_glSampleMaskSGIS)( GLclampf value, GLboolean invert );
+typedef void       (GLAPIENTRY *PFN_glSampleMaski)( GLuint maskNumber, GLbitfield mask );
+typedef void       (GLAPIENTRY *PFN_glSamplePatternEXT)( GLenum pattern );
+typedef void       (GLAPIENTRY *PFN_glSamplePatternSGIS)( GLenum pattern );
+typedef void       (GLAPIENTRY *PFN_glSamplerParameterIiv)( GLuint sampler, GLenum pname, const GLint *param );
+typedef void       (GLAPIENTRY *PFN_glSamplerParameterIuiv)( GLuint sampler, GLenum pname, const GLuint *param );
+typedef void       (GLAPIENTRY *PFN_glSamplerParameterf)( GLuint sampler, GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glSamplerParameterfv)( GLuint sampler, GLenum pname, const GLfloat *param );
+typedef void       (GLAPIENTRY *PFN_glSamplerParameteri)( GLuint sampler, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glSamplerParameteriv)( GLuint sampler, GLenum pname, const GLint *param );
+typedef void       (GLAPIENTRY *PFN_glScalexOES)( GLfixed x, GLfixed y, GLfixed z );
+typedef void       (GLAPIENTRY *PFN_glScissorArrayv)( GLuint first, GLsizei count, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glScissorExclusiveArrayvNV)( GLuint first, GLsizei count, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glScissorExclusiveNV)( GLint x, GLint y, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glScissorIndexed)( GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glScissorIndexedv)( GLuint index, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3b)( GLbyte red, GLbyte green, GLbyte blue );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3bEXT)( GLbyte red, GLbyte green, GLbyte blue );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3bv)( const GLbyte *v );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3bvEXT)( const GLbyte *v );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3d)( GLdouble red, GLdouble green, GLdouble blue );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3dEXT)( GLdouble red, GLdouble green, GLdouble blue );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3dv)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3dvEXT)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3f)( GLfloat red, GLfloat green, GLfloat blue );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3fEXT)( GLfloat red, GLfloat green, GLfloat blue );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3fv)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3fvEXT)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3hNV)( GLhalfNV red, GLhalfNV green, GLhalfNV blue );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3hvNV)( const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3i)( GLint red, GLint green, GLint blue );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3iEXT)( GLint red, GLint green, GLint blue );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3iv)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3ivEXT)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3s)( GLshort red, GLshort green, GLshort blue );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3sEXT)( GLshort red, GLshort green, GLshort blue );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3sv)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3svEXT)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3ub)( GLubyte red, GLubyte green, GLubyte blue );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3ubEXT)( GLubyte red, GLubyte green, GLubyte blue );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3ubv)( const GLubyte *v );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3ubvEXT)( const GLubyte *v );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3ui)( GLuint red, GLuint green, GLuint blue );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3uiEXT)( GLuint red, GLuint green, GLuint blue );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3uiv)( const GLuint *v );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3uivEXT)( const GLuint *v );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3us)( GLushort red, GLushort green, GLushort blue );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3usEXT)( GLushort red, GLushort green, GLushort blue );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3usv)( const GLushort *v );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColor3usvEXT)( const GLushort *v );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColorFormatNV)( GLint size, GLenum type, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColorP3ui)( GLenum type, GLuint color );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColorP3uiv)( GLenum type, const GLuint *color );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColorPointer)( GLint size, GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColorPointerEXT)( GLint size, GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glSecondaryColorPointerListIBM)( GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride );
+typedef void       (GLAPIENTRY *PFN_glSelectPerfMonitorCountersAMD)( GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList );
+typedef void       (GLAPIENTRY *PFN_glSelectTextureCoordSetSGIS)( GLenum target );
+typedef void       (GLAPIENTRY *PFN_glSelectTextureSGIS)( GLenum target );
+typedef void       (GLAPIENTRY *PFN_glSemaphoreParameterui64vEXT)( GLuint semaphore, GLenum pname, const GLuint64 *params );
+typedef void       (GLAPIENTRY *PFN_glSeparableFilter2D)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column );
+typedef void       (GLAPIENTRY *PFN_glSeparableFilter2DEXT)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column );
+typedef void       (GLAPIENTRY *PFN_glSetFenceAPPLE)( GLuint fence );
+typedef void       (GLAPIENTRY *PFN_glSetFenceNV)( GLuint fence, GLenum condition );
+typedef void       (GLAPIENTRY *PFN_glSetFragmentShaderConstantATI)( GLuint dst, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glSetInvariantEXT)( GLuint id, GLenum type, const void *addr );
+typedef void       (GLAPIENTRY *PFN_glSetLocalConstantEXT)( GLuint id, GLenum type, const void *addr );
+typedef void       (GLAPIENTRY *PFN_glSetMultisamplefvAMD)( GLenum pname, GLuint index, const GLfloat *val );
+typedef void       (GLAPIENTRY *PFN_glShaderBinary)( GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length );
+typedef void       (GLAPIENTRY *PFN_glShaderOp1EXT)( GLenum op, GLuint res, GLuint arg1 );
+typedef void       (GLAPIENTRY *PFN_glShaderOp2EXT)( GLenum op, GLuint res, GLuint arg1, GLuint arg2 );
+typedef void       (GLAPIENTRY *PFN_glShaderOp3EXT)( GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3 );
+typedef void       (GLAPIENTRY *PFN_glShaderSource)( GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length );
+typedef void       (GLAPIENTRY *PFN_glShaderSourceARB)( GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length );
+typedef void       (GLAPIENTRY *PFN_glShaderStorageBlockBinding)( GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding );
+typedef void       (GLAPIENTRY *PFN_glShadingRateImageBarrierNV)( GLboolean synchronize );
+typedef void       (GLAPIENTRY *PFN_glShadingRateImagePaletteNV)( GLuint viewport, GLuint first, GLsizei count, const GLenum *rates );
+typedef void       (GLAPIENTRY *PFN_glShadingRateSampleOrderCustomNV)( GLenum rate, GLuint samples, const GLint *locations );
+typedef void       (GLAPIENTRY *PFN_glShadingRateSampleOrderNV)( GLenum order );
+typedef void       (GLAPIENTRY *PFN_glSharpenTexFuncSGIS)( GLenum target, GLsizei n, const GLfloat *points );
+typedef void       (GLAPIENTRY *PFN_glSignalSemaphoreEXT)( GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts );
+typedef void       (GLAPIENTRY *PFN_glSignalSemaphoreui64NVX)( GLuint signalGpu, GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray );
+typedef void       (GLAPIENTRY *PFN_glSignalVkFenceNV)( GLuint64 vkFence );
+typedef void       (GLAPIENTRY *PFN_glSignalVkSemaphoreNV)( GLuint64 vkSemaphore );
+typedef void       (GLAPIENTRY *PFN_glSpecializeShader)( GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue );
+typedef void       (GLAPIENTRY *PFN_glSpecializeShaderARB)( GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue );
+typedef void       (GLAPIENTRY *PFN_glSpriteParameterfSGIX)( GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glSpriteParameterfvSGIX)( GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glSpriteParameteriSGIX)( GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glSpriteParameterivSGIX)( GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glStartInstrumentsSGIX)(void);
+typedef void       (GLAPIENTRY *PFN_glStateCaptureNV)( GLuint state, GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glStencilClearTagEXT)( GLsizei stencilTagBits, GLuint stencilClearTag );
+typedef void       (GLAPIENTRY *PFN_glStencilFillPathInstancedNV)( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues );
+typedef void       (GLAPIENTRY *PFN_glStencilFillPathNV)( GLuint path, GLenum fillMode, GLuint mask );
+typedef void       (GLAPIENTRY *PFN_glStencilFuncSeparate)( GLenum face, GLenum func, GLint ref, GLuint mask );
+typedef void       (GLAPIENTRY *PFN_glStencilFuncSeparateATI)( GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask );
+typedef void       (GLAPIENTRY *PFN_glStencilMaskSeparate)( GLenum face, GLuint mask );
+typedef void       (GLAPIENTRY *PFN_glStencilOpSeparate)( GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass );
+typedef void       (GLAPIENTRY *PFN_glStencilOpSeparateATI)( GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass );
+typedef void       (GLAPIENTRY *PFN_glStencilOpValueAMD)( GLenum face, GLuint value );
+typedef void       (GLAPIENTRY *PFN_glStencilStrokePathInstancedNV)( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues );
+typedef void       (GLAPIENTRY *PFN_glStencilStrokePathNV)( GLuint path, GLint reference, GLuint mask );
+typedef void       (GLAPIENTRY *PFN_glStencilThenCoverFillPathInstancedNV)( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues );
+typedef void       (GLAPIENTRY *PFN_glStencilThenCoverFillPathNV)( GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode );
+typedef void       (GLAPIENTRY *PFN_glStencilThenCoverStrokePathInstancedNV)( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues );
+typedef void       (GLAPIENTRY *PFN_glStencilThenCoverStrokePathNV)( GLuint path, GLint reference, GLuint mask, GLenum coverMode );
+typedef void       (GLAPIENTRY *PFN_glStopInstrumentsSGIX)( GLint marker );
+typedef void       (GLAPIENTRY *PFN_glStringMarkerGREMEDY)( GLsizei len, const void *string );
+typedef void       (GLAPIENTRY *PFN_glSubpixelPrecisionBiasNV)( GLuint xbits, GLuint ybits );
+typedef void       (GLAPIENTRY *PFN_glSwizzleEXT)( GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW );
+typedef void       (GLAPIENTRY *PFN_glSyncTextureINTEL)( GLuint texture );
+typedef void       (GLAPIENTRY *PFN_glTagSampleBufferSGIX)(void);
+typedef void       (GLAPIENTRY *PFN_glTangent3bEXT)( GLbyte tx, GLbyte ty, GLbyte tz );
+typedef void       (GLAPIENTRY *PFN_glTangent3bvEXT)( const GLbyte *v );
+typedef void       (GLAPIENTRY *PFN_glTangent3dEXT)( GLdouble tx, GLdouble ty, GLdouble tz );
+typedef void       (GLAPIENTRY *PFN_glTangent3dvEXT)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glTangent3fEXT)( GLfloat tx, GLfloat ty, GLfloat tz );
+typedef void       (GLAPIENTRY *PFN_glTangent3fvEXT)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glTangent3iEXT)( GLint tx, GLint ty, GLint tz );
+typedef void       (GLAPIENTRY *PFN_glTangent3ivEXT)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glTangent3sEXT)( GLshort tx, GLshort ty, GLshort tz );
+typedef void       (GLAPIENTRY *PFN_glTangent3svEXT)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glTangentPointerEXT)( GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glTbufferMask3DFX)( GLuint mask );
+typedef void       (GLAPIENTRY *PFN_glTessellationFactorAMD)( GLfloat factor );
+typedef void       (GLAPIENTRY *PFN_glTessellationModeAMD)( GLenum mode );
+typedef GLboolean  (GLAPIENTRY *PFN_glTestFenceAPPLE)( GLuint fence );
+typedef GLboolean  (GLAPIENTRY *PFN_glTestFenceNV)( GLuint fence );
+typedef GLboolean  (GLAPIENTRY *PFN_glTestObjectAPPLE)( GLenum object, GLuint name );
+typedef void       (GLAPIENTRY *PFN_glTexAttachMemoryNV)( GLenum target, GLuint memory, GLuint64 offset );
+typedef void       (GLAPIENTRY *PFN_glTexBuffer)( GLenum target, GLenum internalformat, GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glTexBufferARB)( GLenum target, GLenum internalformat, GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glTexBufferEXT)( GLenum target, GLenum internalformat, GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glTexBufferRange)( GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size );
+typedef void       (GLAPIENTRY *PFN_glTexBumpParameterfvATI)( GLenum pname, const GLfloat *param );
+typedef void       (GLAPIENTRY *PFN_glTexBumpParameterivATI)( GLenum pname, const GLint *param );
+typedef void       (GLAPIENTRY *PFN_glTexCoord1bOES)( GLbyte s );
+typedef void       (GLAPIENTRY *PFN_glTexCoord1bvOES)( const GLbyte *coords );
+typedef void       (GLAPIENTRY *PFN_glTexCoord1hNV)( GLhalfNV s );
+typedef void       (GLAPIENTRY *PFN_glTexCoord1hvNV)( const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord1xOES)( GLfixed s );
+typedef void       (GLAPIENTRY *PFN_glTexCoord1xvOES)( const GLfixed *coords );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2bOES)( GLbyte s, GLbyte t );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2bvOES)( const GLbyte *coords );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2fColor3fVertex3fSUN)( GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2fColor3fVertex3fvSUN)( const GLfloat *tc, const GLfloat *c, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2fColor4fNormal3fVertex3fSUN)( GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2fColor4fNormal3fVertex3fvSUN)( const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2fColor4ubVertex3fSUN)( GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2fColor4ubVertex3fvSUN)( const GLfloat *tc, const GLubyte *c, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2fNormal3fVertex3fSUN)( GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2fNormal3fVertex3fvSUN)( const GLfloat *tc, const GLfloat *n, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2fVertex3fSUN)( GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2fVertex3fvSUN)( const GLfloat *tc, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2hNV)( GLhalfNV s, GLhalfNV t );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2hvNV)( const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2xOES)( GLfixed s, GLfixed t );
+typedef void       (GLAPIENTRY *PFN_glTexCoord2xvOES)( const GLfixed *coords );
+typedef void       (GLAPIENTRY *PFN_glTexCoord3bOES)( GLbyte s, GLbyte t, GLbyte r );
+typedef void       (GLAPIENTRY *PFN_glTexCoord3bvOES)( const GLbyte *coords );
+typedef void       (GLAPIENTRY *PFN_glTexCoord3hNV)( GLhalfNV s, GLhalfNV t, GLhalfNV r );
+typedef void       (GLAPIENTRY *PFN_glTexCoord3hvNV)( const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord3xOES)( GLfixed s, GLfixed t, GLfixed r );
+typedef void       (GLAPIENTRY *PFN_glTexCoord3xvOES)( const GLfixed *coords );
+typedef void       (GLAPIENTRY *PFN_glTexCoord4bOES)( GLbyte s, GLbyte t, GLbyte r, GLbyte q );
+typedef void       (GLAPIENTRY *PFN_glTexCoord4bvOES)( const GLbyte *coords );
+typedef void       (GLAPIENTRY *PFN_glTexCoord4fColor4fNormal3fVertex4fSUN)( GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
+typedef void       (GLAPIENTRY *PFN_glTexCoord4fColor4fNormal3fVertex4fvSUN)( const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord4fVertex4fSUN)( GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
+typedef void       (GLAPIENTRY *PFN_glTexCoord4fVertex4fvSUN)( const GLfloat *tc, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord4hNV)( GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q );
+typedef void       (GLAPIENTRY *PFN_glTexCoord4hvNV)( const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glTexCoord4xOES)( GLfixed s, GLfixed t, GLfixed r, GLfixed q );
+typedef void       (GLAPIENTRY *PFN_glTexCoord4xvOES)( const GLfixed *coords );
+typedef void       (GLAPIENTRY *PFN_glTexCoordFormatNV)( GLint size, GLenum type, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glTexCoordP1ui)( GLenum type, GLuint coords );
+typedef void       (GLAPIENTRY *PFN_glTexCoordP1uiv)( GLenum type, const GLuint *coords );
+typedef void       (GLAPIENTRY *PFN_glTexCoordP2ui)( GLenum type, GLuint coords );
+typedef void       (GLAPIENTRY *PFN_glTexCoordP2uiv)( GLenum type, const GLuint *coords );
+typedef void       (GLAPIENTRY *PFN_glTexCoordP3ui)( GLenum type, GLuint coords );
+typedef void       (GLAPIENTRY *PFN_glTexCoordP3uiv)( GLenum type, const GLuint *coords );
+typedef void       (GLAPIENTRY *PFN_glTexCoordP4ui)( GLenum type, GLuint coords );
+typedef void       (GLAPIENTRY *PFN_glTexCoordP4uiv)( GLenum type, const GLuint *coords );
+typedef void       (GLAPIENTRY *PFN_glTexCoordPointerEXT)( GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glTexCoordPointerListIBM)( GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride );
+typedef void       (GLAPIENTRY *PFN_glTexCoordPointervINTEL)( GLint size, GLenum type, const void **pointer );
+typedef void       (GLAPIENTRY *PFN_glTexEnvxOES)( GLenum target, GLenum pname, GLfixed param );
+typedef void       (GLAPIENTRY *PFN_glTexEnvxvOES)( GLenum target, GLenum pname, const GLfixed *params );
+typedef void       (GLAPIENTRY *PFN_glTexFilterFuncSGIS)( GLenum target, GLenum filter, GLsizei n, const GLfloat *weights );
+typedef void       (GLAPIENTRY *PFN_glTexGenxOES)( GLenum coord, GLenum pname, GLfixed param );
+typedef void       (GLAPIENTRY *PFN_glTexGenxvOES)( GLenum coord, GLenum pname, const GLfixed *params );
+typedef void       (GLAPIENTRY *PFN_glTexImage2DMultisample)( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations );
+typedef void       (GLAPIENTRY *PFN_glTexImage2DMultisampleCoverageNV)( GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations );
+typedef void       (GLAPIENTRY *PFN_glTexImage3D)( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTexImage3DEXT)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTexImage3DMultisample)( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations );
+typedef void       (GLAPIENTRY *PFN_glTexImage3DMultisampleCoverageNV)( GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations );
+typedef void       (GLAPIENTRY *PFN_glTexImage4DSGIS)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTexPageCommitmentARB)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit );
+typedef void       (GLAPIENTRY *PFN_glTexParameterIiv)( GLenum target, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glTexParameterIivEXT)( GLenum target, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glTexParameterIuiv)( GLenum target, GLenum pname, const GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glTexParameterIuivEXT)( GLenum target, GLenum pname, const GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glTexParameterxOES)( GLenum target, GLenum pname, GLfixed param );
+typedef void       (GLAPIENTRY *PFN_glTexParameterxvOES)( GLenum target, GLenum pname, const GLfixed *params );
+typedef void       (GLAPIENTRY *PFN_glTexRenderbufferNV)( GLenum target, GLuint renderbuffer );
+typedef void       (GLAPIENTRY *PFN_glTexStorage1D)( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width );
+typedef void       (GLAPIENTRY *PFN_glTexStorage2D)( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glTexStorage2DMultisample)( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations );
+typedef void       (GLAPIENTRY *PFN_glTexStorage3D)( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth );
+typedef void       (GLAPIENTRY *PFN_glTexStorage3DMultisample)( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations );
+typedef void       (GLAPIENTRY *PFN_glTexStorageMem1DEXT)( GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset );
+typedef void       (GLAPIENTRY *PFN_glTexStorageMem2DEXT)( GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset );
+typedef void       (GLAPIENTRY *PFN_glTexStorageMem2DMultisampleEXT)( GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset );
+typedef void       (GLAPIENTRY *PFN_glTexStorageMem3DEXT)( GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset );
+typedef void       (GLAPIENTRY *PFN_glTexStorageMem3DMultisampleEXT)( GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset );
+typedef void       (GLAPIENTRY *PFN_glTexStorageSparseAMD)( GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags );
+typedef void       (GLAPIENTRY *PFN_glTexSubImage1DEXT)( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTexSubImage2DEXT)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTexSubImage3D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTexSubImage3DEXT)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTexSubImage4DSGIS)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTextureAttachMemoryNV)( GLuint texture, GLuint memory, GLuint64 offset );
+typedef void       (GLAPIENTRY *PFN_glTextureBarrier)(void);
+typedef void       (GLAPIENTRY *PFN_glTextureBarrierNV)(void);
+typedef void       (GLAPIENTRY *PFN_glTextureBuffer)( GLuint texture, GLenum internalformat, GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glTextureBufferEXT)( GLuint texture, GLenum target, GLenum internalformat, GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glTextureBufferRange)( GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size );
+typedef void       (GLAPIENTRY *PFN_glTextureBufferRangeEXT)( GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size );
+typedef void       (GLAPIENTRY *PFN_glTextureColorMaskSGIS)( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
+typedef void       (GLAPIENTRY *PFN_glTextureImage1DEXT)( GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTextureImage2DEXT)( GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTextureImage2DMultisampleCoverageNV)( GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations );
+typedef void       (GLAPIENTRY *PFN_glTextureImage2DMultisampleNV)( GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations );
+typedef void       (GLAPIENTRY *PFN_glTextureImage3DEXT)( GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTextureImage3DMultisampleCoverageNV)( GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations );
+typedef void       (GLAPIENTRY *PFN_glTextureImage3DMultisampleNV)( GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations );
+typedef void       (GLAPIENTRY *PFN_glTextureLightEXT)( GLenum pname );
+typedef void       (GLAPIENTRY *PFN_glTextureMaterialEXT)( GLenum face, GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glTextureNormalEXT)( GLenum mode );
+typedef void       (GLAPIENTRY *PFN_glTexturePageCommitmentEXT)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit );
+typedef void       (GLAPIENTRY *PFN_glTextureParameterIiv)( GLuint texture, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glTextureParameterIivEXT)( GLuint texture, GLenum target, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glTextureParameterIuiv)( GLuint texture, GLenum pname, const GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glTextureParameterIuivEXT)( GLuint texture, GLenum target, GLenum pname, const GLuint *params );
+typedef void       (GLAPIENTRY *PFN_glTextureParameterf)( GLuint texture, GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glTextureParameterfEXT)( GLuint texture, GLenum target, GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glTextureParameterfv)( GLuint texture, GLenum pname, const GLfloat *param );
+typedef void       (GLAPIENTRY *PFN_glTextureParameterfvEXT)( GLuint texture, GLenum target, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glTextureParameteri)( GLuint texture, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glTextureParameteriEXT)( GLuint texture, GLenum target, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glTextureParameteriv)( GLuint texture, GLenum pname, const GLint *param );
+typedef void       (GLAPIENTRY *PFN_glTextureParameterivEXT)( GLuint texture, GLenum target, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glTextureRangeAPPLE)( GLenum target, GLsizei length, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glTextureRenderbufferEXT)( GLuint texture, GLenum target, GLuint renderbuffer );
+typedef void       (GLAPIENTRY *PFN_glTextureStorage1D)( GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width );
+typedef void       (GLAPIENTRY *PFN_glTextureStorage1DEXT)( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width );
+typedef void       (GLAPIENTRY *PFN_glTextureStorage2D)( GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glTextureStorage2DEXT)( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height );
+typedef void       (GLAPIENTRY *PFN_glTextureStorage2DMultisample)( GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations );
+typedef void       (GLAPIENTRY *PFN_glTextureStorage2DMultisampleEXT)( GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations );
+typedef void       (GLAPIENTRY *PFN_glTextureStorage3D)( GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth );
+typedef void       (GLAPIENTRY *PFN_glTextureStorage3DEXT)( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth );
+typedef void       (GLAPIENTRY *PFN_glTextureStorage3DMultisample)( GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations );
+typedef void       (GLAPIENTRY *PFN_glTextureStorage3DMultisampleEXT)( GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations );
+typedef void       (GLAPIENTRY *PFN_glTextureStorageMem1DEXT)( GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset );
+typedef void       (GLAPIENTRY *PFN_glTextureStorageMem2DEXT)( GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset );
+typedef void       (GLAPIENTRY *PFN_glTextureStorageMem2DMultisampleEXT)( GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset );
+typedef void       (GLAPIENTRY *PFN_glTextureStorageMem3DEXT)( GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset );
+typedef void       (GLAPIENTRY *PFN_glTextureStorageMem3DMultisampleEXT)( GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset );
+typedef void       (GLAPIENTRY *PFN_glTextureStorageSparseAMD)( GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags );
+typedef void       (GLAPIENTRY *PFN_glTextureSubImage1D)( GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTextureSubImage1DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTextureSubImage2D)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTextureSubImage2DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTextureSubImage3D)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTextureSubImage3DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
+typedef void       (GLAPIENTRY *PFN_glTextureView)( GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers );
+typedef void       (GLAPIENTRY *PFN_glTrackMatrixNV)( GLenum target, GLuint address, GLenum matrix, GLenum transform );
+typedef void       (GLAPIENTRY *PFN_glTransformFeedbackAttribsNV)( GLsizei count, const GLint *attribs, GLenum bufferMode );
+typedef void       (GLAPIENTRY *PFN_glTransformFeedbackBufferBase)( GLuint xfb, GLuint index, GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glTransformFeedbackBufferRange)( GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size );
+typedef void       (GLAPIENTRY *PFN_glTransformFeedbackStreamAttribsNV)( GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode );
+typedef void       (GLAPIENTRY *PFN_glTransformFeedbackVaryings)( GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode );
+typedef void       (GLAPIENTRY *PFN_glTransformFeedbackVaryingsEXT)( GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode );
+typedef void       (GLAPIENTRY *PFN_glTransformFeedbackVaryingsNV)( GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode );
+typedef void       (GLAPIENTRY *PFN_glTransformPathNV)( GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues );
+typedef void       (GLAPIENTRY *PFN_glTranslatexOES)( GLfixed x, GLfixed y, GLfixed z );
+typedef void       (GLAPIENTRY *PFN_glUniform1d)( GLint location, GLdouble x );
+typedef void       (GLAPIENTRY *PFN_glUniform1dv)( GLint location, GLsizei count, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glUniform1f)( GLint location, GLfloat v0 );
+typedef void       (GLAPIENTRY *PFN_glUniform1fARB)( GLint location, GLfloat v0 );
+typedef void       (GLAPIENTRY *PFN_glUniform1fv)( GLint location, GLsizei count, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniform1fvARB)( GLint location, GLsizei count, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniform1i)( GLint location, GLint v0 );
+typedef void       (GLAPIENTRY *PFN_glUniform1i64ARB)( GLint location, GLint64 x );
+typedef void       (GLAPIENTRY *PFN_glUniform1i64NV)( GLint location, GLint64EXT x );
+typedef void       (GLAPIENTRY *PFN_glUniform1i64vARB)( GLint location, GLsizei count, const GLint64 *value );
+typedef void       (GLAPIENTRY *PFN_glUniform1i64vNV)( GLint location, GLsizei count, const GLint64EXT *value );
+typedef void       (GLAPIENTRY *PFN_glUniform1iARB)( GLint location, GLint v0 );
+typedef void       (GLAPIENTRY *PFN_glUniform1iv)( GLint location, GLsizei count, const GLint *value );
+typedef void       (GLAPIENTRY *PFN_glUniform1ivARB)( GLint location, GLsizei count, const GLint *value );
+typedef void       (GLAPIENTRY *PFN_glUniform1ui)( GLint location, GLuint v0 );
+typedef void       (GLAPIENTRY *PFN_glUniform1ui64ARB)( GLint location, GLuint64 x );
+typedef void       (GLAPIENTRY *PFN_glUniform1ui64NV)( GLint location, GLuint64EXT x );
+typedef void       (GLAPIENTRY *PFN_glUniform1ui64vARB)( GLint location, GLsizei count, const GLuint64 *value );
+typedef void       (GLAPIENTRY *PFN_glUniform1ui64vNV)( GLint location, GLsizei count, const GLuint64EXT *value );
+typedef void       (GLAPIENTRY *PFN_glUniform1uiEXT)( GLint location, GLuint v0 );
+typedef void       (GLAPIENTRY *PFN_glUniform1uiv)( GLint location, GLsizei count, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glUniform1uivEXT)( GLint location, GLsizei count, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glUniform2d)( GLint location, GLdouble x, GLdouble y );
+typedef void       (GLAPIENTRY *PFN_glUniform2dv)( GLint location, GLsizei count, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glUniform2f)( GLint location, GLfloat v0, GLfloat v1 );
+typedef void       (GLAPIENTRY *PFN_glUniform2fARB)( GLint location, GLfloat v0, GLfloat v1 );
+typedef void       (GLAPIENTRY *PFN_glUniform2fv)( GLint location, GLsizei count, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniform2fvARB)( GLint location, GLsizei count, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniform2i)( GLint location, GLint v0, GLint v1 );
+typedef void       (GLAPIENTRY *PFN_glUniform2i64ARB)( GLint location, GLint64 x, GLint64 y );
+typedef void       (GLAPIENTRY *PFN_glUniform2i64NV)( GLint location, GLint64EXT x, GLint64EXT y );
+typedef void       (GLAPIENTRY *PFN_glUniform2i64vARB)( GLint location, GLsizei count, const GLint64 *value );
+typedef void       (GLAPIENTRY *PFN_glUniform2i64vNV)( GLint location, GLsizei count, const GLint64EXT *value );
+typedef void       (GLAPIENTRY *PFN_glUniform2iARB)( GLint location, GLint v0, GLint v1 );
+typedef void       (GLAPIENTRY *PFN_glUniform2iv)( GLint location, GLsizei count, const GLint *value );
+typedef void       (GLAPIENTRY *PFN_glUniform2ivARB)( GLint location, GLsizei count, const GLint *value );
+typedef void       (GLAPIENTRY *PFN_glUniform2ui)( GLint location, GLuint v0, GLuint v1 );
+typedef void       (GLAPIENTRY *PFN_glUniform2ui64ARB)( GLint location, GLuint64 x, GLuint64 y );
+typedef void       (GLAPIENTRY *PFN_glUniform2ui64NV)( GLint location, GLuint64EXT x, GLuint64EXT y );
+typedef void       (GLAPIENTRY *PFN_glUniform2ui64vARB)( GLint location, GLsizei count, const GLuint64 *value );
+typedef void       (GLAPIENTRY *PFN_glUniform2ui64vNV)( GLint location, GLsizei count, const GLuint64EXT *value );
+typedef void       (GLAPIENTRY *PFN_glUniform2uiEXT)( GLint location, GLuint v0, GLuint v1 );
+typedef void       (GLAPIENTRY *PFN_glUniform2uiv)( GLint location, GLsizei count, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glUniform2uivEXT)( GLint location, GLsizei count, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glUniform3d)( GLint location, GLdouble x, GLdouble y, GLdouble z );
+typedef void       (GLAPIENTRY *PFN_glUniform3dv)( GLint location, GLsizei count, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glUniform3f)( GLint location, GLfloat v0, GLfloat v1, GLfloat v2 );
+typedef void       (GLAPIENTRY *PFN_glUniform3fARB)( GLint location, GLfloat v0, GLfloat v1, GLfloat v2 );
+typedef void       (GLAPIENTRY *PFN_glUniform3fv)( GLint location, GLsizei count, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniform3fvARB)( GLint location, GLsizei count, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniform3i)( GLint location, GLint v0, GLint v1, GLint v2 );
+typedef void       (GLAPIENTRY *PFN_glUniform3i64ARB)( GLint location, GLint64 x, GLint64 y, GLint64 z );
+typedef void       (GLAPIENTRY *PFN_glUniform3i64NV)( GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z );
+typedef void       (GLAPIENTRY *PFN_glUniform3i64vARB)( GLint location, GLsizei count, const GLint64 *value );
+typedef void       (GLAPIENTRY *PFN_glUniform3i64vNV)( GLint location, GLsizei count, const GLint64EXT *value );
+typedef void       (GLAPIENTRY *PFN_glUniform3iARB)( GLint location, GLint v0, GLint v1, GLint v2 );
+typedef void       (GLAPIENTRY *PFN_glUniform3iv)( GLint location, GLsizei count, const GLint *value );
+typedef void       (GLAPIENTRY *PFN_glUniform3ivARB)( GLint location, GLsizei count, const GLint *value );
+typedef void       (GLAPIENTRY *PFN_glUniform3ui)( GLint location, GLuint v0, GLuint v1, GLuint v2 );
+typedef void       (GLAPIENTRY *PFN_glUniform3ui64ARB)( GLint location, GLuint64 x, GLuint64 y, GLuint64 z );
+typedef void       (GLAPIENTRY *PFN_glUniform3ui64NV)( GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z );
+typedef void       (GLAPIENTRY *PFN_glUniform3ui64vARB)( GLint location, GLsizei count, const GLuint64 *value );
+typedef void       (GLAPIENTRY *PFN_glUniform3ui64vNV)( GLint location, GLsizei count, const GLuint64EXT *value );
+typedef void       (GLAPIENTRY *PFN_glUniform3uiEXT)( GLint location, GLuint v0, GLuint v1, GLuint v2 );
+typedef void       (GLAPIENTRY *PFN_glUniform3uiv)( GLint location, GLsizei count, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glUniform3uivEXT)( GLint location, GLsizei count, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glUniform4d)( GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
+typedef void       (GLAPIENTRY *PFN_glUniform4dv)( GLint location, GLsizei count, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glUniform4f)( GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 );
+typedef void       (GLAPIENTRY *PFN_glUniform4fARB)( GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 );
+typedef void       (GLAPIENTRY *PFN_glUniform4fv)( GLint location, GLsizei count, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniform4fvARB)( GLint location, GLsizei count, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniform4i)( GLint location, GLint v0, GLint v1, GLint v2, GLint v3 );
+typedef void       (GLAPIENTRY *PFN_glUniform4i64ARB)( GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w );
+typedef void       (GLAPIENTRY *PFN_glUniform4i64NV)( GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w );
+typedef void       (GLAPIENTRY *PFN_glUniform4i64vARB)( GLint location, GLsizei count, const GLint64 *value );
+typedef void       (GLAPIENTRY *PFN_glUniform4i64vNV)( GLint location, GLsizei count, const GLint64EXT *value );
+typedef void       (GLAPIENTRY *PFN_glUniform4iARB)( GLint location, GLint v0, GLint v1, GLint v2, GLint v3 );
+typedef void       (GLAPIENTRY *PFN_glUniform4iv)( GLint location, GLsizei count, const GLint *value );
+typedef void       (GLAPIENTRY *PFN_glUniform4ivARB)( GLint location, GLsizei count, const GLint *value );
+typedef void       (GLAPIENTRY *PFN_glUniform4ui)( GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 );
+typedef void       (GLAPIENTRY *PFN_glUniform4ui64ARB)( GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w );
+typedef void       (GLAPIENTRY *PFN_glUniform4ui64NV)( GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w );
+typedef void       (GLAPIENTRY *PFN_glUniform4ui64vARB)( GLint location, GLsizei count, const GLuint64 *value );
+typedef void       (GLAPIENTRY *PFN_glUniform4ui64vNV)( GLint location, GLsizei count, const GLuint64EXT *value );
+typedef void       (GLAPIENTRY *PFN_glUniform4uiEXT)( GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 );
+typedef void       (GLAPIENTRY *PFN_glUniform4uiv)( GLint location, GLsizei count, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glUniform4uivEXT)( GLint location, GLsizei count, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glUniformBlockBinding)( GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding );
+typedef void       (GLAPIENTRY *PFN_glUniformBufferEXT)( GLuint program, GLint location, GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glUniformHandleui64ARB)( GLint location, GLuint64 value );
+typedef void       (GLAPIENTRY *PFN_glUniformHandleui64NV)( GLint location, GLuint64 value );
+typedef void       (GLAPIENTRY *PFN_glUniformHandleui64vARB)( GLint location, GLsizei count, const GLuint64 *value );
+typedef void       (GLAPIENTRY *PFN_glUniformHandleui64vNV)( GLint location, GLsizei count, const GLuint64 *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix2dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix2fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix2fvARB)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix2x3dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix2x3fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix2x4dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix2x4fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix3dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix3fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix3fvARB)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix3x2dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix3x2fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix3x4dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix3x4fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix4dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix4fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix4fvARB)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix4x2dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix4x2fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix4x3dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
+typedef void       (GLAPIENTRY *PFN_glUniformMatrix4x3fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
+typedef void       (GLAPIENTRY *PFN_glUniformSubroutinesuiv)( GLenum shadertype, GLsizei count, const GLuint *indices );
+typedef void       (GLAPIENTRY *PFN_glUniformui64NV)( GLint location, GLuint64EXT value );
+typedef void       (GLAPIENTRY *PFN_glUniformui64vNV)( GLint location, GLsizei count, const GLuint64EXT *value );
+typedef void       (GLAPIENTRY *PFN_glUnlockArraysEXT)(void);
+typedef GLboolean  (GLAPIENTRY *PFN_glUnmapBuffer)( GLenum target );
+typedef GLboolean  (GLAPIENTRY *PFN_glUnmapBufferARB)( GLenum target );
+typedef GLboolean  (GLAPIENTRY *PFN_glUnmapNamedBuffer)( GLuint buffer );
+typedef GLboolean  (GLAPIENTRY *PFN_glUnmapNamedBufferEXT)( GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glUnmapObjectBufferATI)( GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glUnmapTexture2DINTEL)( GLuint texture, GLint level );
+typedef void       (GLAPIENTRY *PFN_glUpdateObjectBufferATI)( GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve );
+typedef void       (GLAPIENTRY *PFN_glUploadGpuMaskNVX)( GLbitfield mask );
+typedef void       (GLAPIENTRY *PFN_glUseProgram)( GLuint program );
+typedef void       (GLAPIENTRY *PFN_glUseProgramObjectARB)( GLhandleARB programObj );
+typedef void       (GLAPIENTRY *PFN_glUseProgramStages)( GLuint pipeline, GLbitfield stages, GLuint program );
+typedef void       (GLAPIENTRY *PFN_glUseShaderProgramEXT)( GLenum type, GLuint program );
+typedef void       (GLAPIENTRY *PFN_glVDPAUFiniNV)(void);
+typedef void       (GLAPIENTRY *PFN_glVDPAUGetSurfaceivNV)( GLvdpauSurfaceNV surface, GLenum pname, GLsizei count, GLsizei *length, GLint *values );
+typedef void       (GLAPIENTRY *PFN_glVDPAUInitNV)( const void *vdpDevice, const void *getProcAddress );
+typedef GLboolean  (GLAPIENTRY *PFN_glVDPAUIsSurfaceNV)( GLvdpauSurfaceNV surface );
+typedef void       (GLAPIENTRY *PFN_glVDPAUMapSurfacesNV)( GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces );
+typedef GLvdpauSurfaceNV (GLAPIENTRY *PFN_glVDPAURegisterOutputSurfaceNV)( const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames );
+typedef GLvdpauSurfaceNV (GLAPIENTRY *PFN_glVDPAURegisterVideoSurfaceNV)( const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames );
+typedef GLvdpauSurfaceNV (GLAPIENTRY *PFN_glVDPAURegisterVideoSurfaceWithPictureStructureNV)( const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames, GLboolean isFrameStructure );
+typedef void       (GLAPIENTRY *PFN_glVDPAUSurfaceAccessNV)( GLvdpauSurfaceNV surface, GLenum access );
+typedef void       (GLAPIENTRY *PFN_glVDPAUUnmapSurfacesNV)( GLsizei numSurface, const GLvdpauSurfaceNV *surfaces );
+typedef void       (GLAPIENTRY *PFN_glVDPAUUnregisterSurfaceNV)( GLvdpauSurfaceNV surface );
+typedef void       (GLAPIENTRY *PFN_glValidateProgram)( GLuint program );
+typedef void       (GLAPIENTRY *PFN_glValidateProgramARB)( GLhandleARB programObj );
+typedef void       (GLAPIENTRY *PFN_glValidateProgramPipeline)( GLuint pipeline );
+typedef void       (GLAPIENTRY *PFN_glVariantArrayObjectATI)( GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset );
+typedef void       (GLAPIENTRY *PFN_glVariantPointerEXT)( GLuint id, GLenum type, GLuint stride, const void *addr );
+typedef void       (GLAPIENTRY *PFN_glVariantbvEXT)( GLuint id, const GLbyte *addr );
+typedef void       (GLAPIENTRY *PFN_glVariantdvEXT)( GLuint id, const GLdouble *addr );
+typedef void       (GLAPIENTRY *PFN_glVariantfvEXT)( GLuint id, const GLfloat *addr );
+typedef void       (GLAPIENTRY *PFN_glVariantivEXT)( GLuint id, const GLint *addr );
+typedef void       (GLAPIENTRY *PFN_glVariantsvEXT)( GLuint id, const GLshort *addr );
+typedef void       (GLAPIENTRY *PFN_glVariantubvEXT)( GLuint id, const GLubyte *addr );
+typedef void       (GLAPIENTRY *PFN_glVariantuivEXT)( GLuint id, const GLuint *addr );
+typedef void       (GLAPIENTRY *PFN_glVariantusvEXT)( GLuint id, const GLushort *addr );
+typedef void       (GLAPIENTRY *PFN_glVertex2bOES)( GLbyte x, GLbyte y );
+typedef void       (GLAPIENTRY *PFN_glVertex2bvOES)( const GLbyte *coords );
+typedef void       (GLAPIENTRY *PFN_glVertex2hNV)( GLhalfNV x, GLhalfNV y );
+typedef void       (GLAPIENTRY *PFN_glVertex2hvNV)( const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glVertex2xOES)( GLfixed x );
+typedef void       (GLAPIENTRY *PFN_glVertex2xvOES)( const GLfixed *coords );
+typedef void       (GLAPIENTRY *PFN_glVertex3bOES)( GLbyte x, GLbyte y, GLbyte z );
+typedef void       (GLAPIENTRY *PFN_glVertex3bvOES)( const GLbyte *coords );
+typedef void       (GLAPIENTRY *PFN_glVertex3hNV)( GLhalfNV x, GLhalfNV y, GLhalfNV z );
+typedef void       (GLAPIENTRY *PFN_glVertex3hvNV)( const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glVertex3xOES)( GLfixed x, GLfixed y );
+typedef void       (GLAPIENTRY *PFN_glVertex3xvOES)( const GLfixed *coords );
+typedef void       (GLAPIENTRY *PFN_glVertex4bOES)( GLbyte x, GLbyte y, GLbyte z, GLbyte w );
+typedef void       (GLAPIENTRY *PFN_glVertex4bvOES)( const GLbyte *coords );
+typedef void       (GLAPIENTRY *PFN_glVertex4hNV)( GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w );
+typedef void       (GLAPIENTRY *PFN_glVertex4hvNV)( const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glVertex4xOES)( GLfixed x, GLfixed y, GLfixed z );
+typedef void       (GLAPIENTRY *PFN_glVertex4xvOES)( const GLfixed *coords );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayAttribBinding)( GLuint vaobj, GLuint attribindex, GLuint bindingindex );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayAttribFormat)( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayAttribIFormat)( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayAttribLFormat)( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayBindVertexBufferEXT)( GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayBindingDivisor)( GLuint vaobj, GLuint bindingindex, GLuint divisor );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayColorOffsetEXT)( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayEdgeFlagOffsetEXT)( GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayElementBuffer)( GLuint vaobj, GLuint buffer );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayFogCoordOffsetEXT)( GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayIndexOffsetEXT)( GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayMultiTexCoordOffsetEXT)( GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayNormalOffsetEXT)( GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayParameteriAPPLE)( GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayRangeAPPLE)( GLsizei length, void *pointer );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayRangeNV)( GLsizei length, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glVertexArraySecondaryColorOffsetEXT)( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayTexCoordOffsetEXT)( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayVertexAttribBindingEXT)( GLuint vaobj, GLuint attribindex, GLuint bindingindex );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayVertexAttribDivisorEXT)( GLuint vaobj, GLuint index, GLuint divisor );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayVertexAttribFormatEXT)( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayVertexAttribIFormatEXT)( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayVertexAttribIOffsetEXT)( GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayVertexAttribLFormatEXT)( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayVertexAttribLOffsetEXT)( GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayVertexAttribOffsetEXT)( GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayVertexBindingDivisorEXT)( GLuint vaobj, GLuint bindingindex, GLuint divisor );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayVertexBuffer)( GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayVertexBuffers)( GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides );
+typedef void       (GLAPIENTRY *PFN_glVertexArrayVertexOffsetEXT)( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1d)( GLuint index, GLdouble x );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1dARB)( GLuint index, GLdouble x );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1dNV)( GLuint index, GLdouble x );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1dv)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1dvARB)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1dvNV)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1f)( GLuint index, GLfloat x );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1fARB)( GLuint index, GLfloat x );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1fNV)( GLuint index, GLfloat x );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1fv)( GLuint index, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1fvARB)( GLuint index, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1fvNV)( GLuint index, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1hNV)( GLuint index, GLhalfNV x );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1hvNV)( GLuint index, const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1s)( GLuint index, GLshort x );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1sARB)( GLuint index, GLshort x );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1sNV)( GLuint index, GLshort x );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1sv)( GLuint index, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1svARB)( GLuint index, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib1svNV)( GLuint index, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2d)( GLuint index, GLdouble x, GLdouble y );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2dARB)( GLuint index, GLdouble x, GLdouble y );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2dNV)( GLuint index, GLdouble x, GLdouble y );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2dv)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2dvARB)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2dvNV)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2f)( GLuint index, GLfloat x, GLfloat y );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2fARB)( GLuint index, GLfloat x, GLfloat y );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2fNV)( GLuint index, GLfloat x, GLfloat y );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2fv)( GLuint index, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2fvARB)( GLuint index, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2fvNV)( GLuint index, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2hNV)( GLuint index, GLhalfNV x, GLhalfNV y );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2hvNV)( GLuint index, const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2s)( GLuint index, GLshort x, GLshort y );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2sARB)( GLuint index, GLshort x, GLshort y );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2sNV)( GLuint index, GLshort x, GLshort y );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2sv)( GLuint index, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2svARB)( GLuint index, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib2svNV)( GLuint index, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3d)( GLuint index, GLdouble x, GLdouble y, GLdouble z );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3dARB)( GLuint index, GLdouble x, GLdouble y, GLdouble z );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3dNV)( GLuint index, GLdouble x, GLdouble y, GLdouble z );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3dv)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3dvARB)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3dvNV)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3f)( GLuint index, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3fARB)( GLuint index, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3fNV)( GLuint index, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3fv)( GLuint index, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3fvARB)( GLuint index, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3fvNV)( GLuint index, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3hNV)( GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3hvNV)( GLuint index, const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3s)( GLuint index, GLshort x, GLshort y, GLshort z );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3sARB)( GLuint index, GLshort x, GLshort y, GLshort z );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3sNV)( GLuint index, GLshort x, GLshort y, GLshort z );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3sv)( GLuint index, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3svARB)( GLuint index, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib3svNV)( GLuint index, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4Nbv)( GLuint index, const GLbyte *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4NbvARB)( GLuint index, const GLbyte *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4Niv)( GLuint index, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4NivARB)( GLuint index, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4Nsv)( GLuint index, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4NsvARB)( GLuint index, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4Nub)( GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4NubARB)( GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4Nubv)( GLuint index, const GLubyte *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4NubvARB)( GLuint index, const GLubyte *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4Nuiv)( GLuint index, const GLuint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4NuivARB)( GLuint index, const GLuint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4Nusv)( GLuint index, const GLushort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4NusvARB)( GLuint index, const GLushort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4bv)( GLuint index, const GLbyte *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4bvARB)( GLuint index, const GLbyte *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4d)( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4dARB)( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4dNV)( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4dv)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4dvARB)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4dvNV)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4f)( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4fARB)( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4fNV)( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4fv)( GLuint index, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4fvARB)( GLuint index, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4fvNV)( GLuint index, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4hNV)( GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4hvNV)( GLuint index, const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4iv)( GLuint index, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4ivARB)( GLuint index, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4s)( GLuint index, GLshort x, GLshort y, GLshort z, GLshort w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4sARB)( GLuint index, GLshort x, GLshort y, GLshort z, GLshort w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4sNV)( GLuint index, GLshort x, GLshort y, GLshort z, GLshort w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4sv)( GLuint index, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4svARB)( GLuint index, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4svNV)( GLuint index, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4ubNV)( GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4ubv)( GLuint index, const GLubyte *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4ubvARB)( GLuint index, const GLubyte *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4ubvNV)( GLuint index, const GLubyte *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4uiv)( GLuint index, const GLuint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4uivARB)( GLuint index, const GLuint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4usv)( GLuint index, const GLushort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttrib4usvARB)( GLuint index, const GLushort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribArrayObjectATI)( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribBinding)( GLuint attribindex, GLuint bindingindex );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribDivisor)( GLuint index, GLuint divisor );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribDivisorARB)( GLuint index, GLuint divisor );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribFormat)( GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribFormatNV)( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI1i)( GLuint index, GLint x );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI1iEXT)( GLuint index, GLint x );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI1iv)( GLuint index, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI1ivEXT)( GLuint index, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI1ui)( GLuint index, GLuint x );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI1uiEXT)( GLuint index, GLuint x );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI1uiv)( GLuint index, const GLuint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI1uivEXT)( GLuint index, const GLuint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI2i)( GLuint index, GLint x, GLint y );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI2iEXT)( GLuint index, GLint x, GLint y );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI2iv)( GLuint index, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI2ivEXT)( GLuint index, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI2ui)( GLuint index, GLuint x, GLuint y );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI2uiEXT)( GLuint index, GLuint x, GLuint y );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI2uiv)( GLuint index, const GLuint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI2uivEXT)( GLuint index, const GLuint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI3i)( GLuint index, GLint x, GLint y, GLint z );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI3iEXT)( GLuint index, GLint x, GLint y, GLint z );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI3iv)( GLuint index, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI3ivEXT)( GLuint index, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI3ui)( GLuint index, GLuint x, GLuint y, GLuint z );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI3uiEXT)( GLuint index, GLuint x, GLuint y, GLuint z );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI3uiv)( GLuint index, const GLuint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI3uivEXT)( GLuint index, const GLuint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI4bv)( GLuint index, const GLbyte *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI4bvEXT)( GLuint index, const GLbyte *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI4i)( GLuint index, GLint x, GLint y, GLint z, GLint w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI4iEXT)( GLuint index, GLint x, GLint y, GLint z, GLint w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI4iv)( GLuint index, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI4ivEXT)( GLuint index, const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI4sv)( GLuint index, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI4svEXT)( GLuint index, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI4ubv)( GLuint index, const GLubyte *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI4ubvEXT)( GLuint index, const GLubyte *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI4ui)( GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI4uiEXT)( GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI4uiv)( GLuint index, const GLuint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI4uivEXT)( GLuint index, const GLuint *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI4usv)( GLuint index, const GLushort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribI4usvEXT)( GLuint index, const GLushort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribIFormat)( GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribIFormatNV)( GLuint index, GLint size, GLenum type, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribIPointer)( GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribIPointerEXT)( GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL1d)( GLuint index, GLdouble x );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL1dEXT)( GLuint index, GLdouble x );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL1dv)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL1dvEXT)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL1i64NV)( GLuint index, GLint64EXT x );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL1i64vNV)( GLuint index, const GLint64EXT *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL1ui64ARB)( GLuint index, GLuint64EXT x );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL1ui64NV)( GLuint index, GLuint64EXT x );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL1ui64vARB)( GLuint index, const GLuint64EXT *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL1ui64vNV)( GLuint index, const GLuint64EXT *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL2d)( GLuint index, GLdouble x, GLdouble y );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL2dEXT)( GLuint index, GLdouble x, GLdouble y );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL2dv)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL2dvEXT)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL2i64NV)( GLuint index, GLint64EXT x, GLint64EXT y );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL2i64vNV)( GLuint index, const GLint64EXT *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL2ui64NV)( GLuint index, GLuint64EXT x, GLuint64EXT y );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL2ui64vNV)( GLuint index, const GLuint64EXT *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL3d)( GLuint index, GLdouble x, GLdouble y, GLdouble z );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL3dEXT)( GLuint index, GLdouble x, GLdouble y, GLdouble z );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL3dv)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL3dvEXT)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL3i64NV)( GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL3i64vNV)( GLuint index, const GLint64EXT *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL3ui64NV)( GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL3ui64vNV)( GLuint index, const GLuint64EXT *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL4d)( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL4dEXT)( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL4dv)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL4dvEXT)( GLuint index, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL4i64NV)( GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL4i64vNV)( GLuint index, const GLint64EXT *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL4ui64NV)( GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribL4ui64vNV)( GLuint index, const GLuint64EXT *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribLFormat)( GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribLFormatNV)( GLuint index, GLint size, GLenum type, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribLPointer)( GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribLPointerEXT)( GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribP1ui)( GLuint index, GLenum type, GLboolean normalized, GLuint value );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribP1uiv)( GLuint index, GLenum type, GLboolean normalized, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribP2ui)( GLuint index, GLenum type, GLboolean normalized, GLuint value );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribP2uiv)( GLuint index, GLenum type, GLboolean normalized, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribP3ui)( GLuint index, GLenum type, GLboolean normalized, GLuint value );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribP3uiv)( GLuint index, GLenum type, GLboolean normalized, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribP4ui)( GLuint index, GLenum type, GLboolean normalized, GLuint value );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribP4uiv)( GLuint index, GLenum type, GLboolean normalized, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribParameteriAMD)( GLuint index, GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribPointer)( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribPointerARB)( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribPointerNV)( GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribs1dvNV)( GLuint index, GLsizei count, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribs1fvNV)( GLuint index, GLsizei count, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribs1hvNV)( GLuint index, GLsizei n, const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribs1svNV)( GLuint index, GLsizei count, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribs2dvNV)( GLuint index, GLsizei count, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribs2fvNV)( GLuint index, GLsizei count, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribs2hvNV)( GLuint index, GLsizei n, const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribs2svNV)( GLuint index, GLsizei count, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribs3dvNV)( GLuint index, GLsizei count, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribs3fvNV)( GLuint index, GLsizei count, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribs3hvNV)( GLuint index, GLsizei n, const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribs3svNV)( GLuint index, GLsizei count, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribs4dvNV)( GLuint index, GLsizei count, const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribs4fvNV)( GLuint index, GLsizei count, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribs4hvNV)( GLuint index, GLsizei n, const GLhalfNV *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribs4svNV)( GLuint index, GLsizei count, const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glVertexAttribs4ubvNV)( GLuint index, GLsizei count, const GLubyte *v );
+typedef void       (GLAPIENTRY *PFN_glVertexBindingDivisor)( GLuint bindingindex, GLuint divisor );
+typedef void       (GLAPIENTRY *PFN_glVertexBlendARB)( GLint count );
+typedef void       (GLAPIENTRY *PFN_glVertexBlendEnvfATI)( GLenum pname, GLfloat param );
+typedef void       (GLAPIENTRY *PFN_glVertexBlendEnviATI)( GLenum pname, GLint param );
+typedef void       (GLAPIENTRY *PFN_glVertexFormatNV)( GLint size, GLenum type, GLsizei stride );
+typedef void       (GLAPIENTRY *PFN_glVertexP2ui)( GLenum type, GLuint value );
+typedef void       (GLAPIENTRY *PFN_glVertexP2uiv)( GLenum type, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glVertexP3ui)( GLenum type, GLuint value );
+typedef void       (GLAPIENTRY *PFN_glVertexP3uiv)( GLenum type, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glVertexP4ui)( GLenum type, GLuint value );
+typedef void       (GLAPIENTRY *PFN_glVertexP4uiv)( GLenum type, const GLuint *value );
+typedef void       (GLAPIENTRY *PFN_glVertexPointerEXT)( GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glVertexPointerListIBM)( GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride );
+typedef void       (GLAPIENTRY *PFN_glVertexPointervINTEL)( GLint size, GLenum type, const void **pointer );
+typedef void       (GLAPIENTRY *PFN_glVertexStream1dATI)( GLenum stream, GLdouble x );
+typedef void       (GLAPIENTRY *PFN_glVertexStream1dvATI)( GLenum stream, const GLdouble *coords );
+typedef void       (GLAPIENTRY *PFN_glVertexStream1fATI)( GLenum stream, GLfloat x );
+typedef void       (GLAPIENTRY *PFN_glVertexStream1fvATI)( GLenum stream, const GLfloat *coords );
+typedef void       (GLAPIENTRY *PFN_glVertexStream1iATI)( GLenum stream, GLint x );
+typedef void       (GLAPIENTRY *PFN_glVertexStream1ivATI)( GLenum stream, const GLint *coords );
+typedef void       (GLAPIENTRY *PFN_glVertexStream1sATI)( GLenum stream, GLshort x );
+typedef void       (GLAPIENTRY *PFN_glVertexStream1svATI)( GLenum stream, const GLshort *coords );
+typedef void       (GLAPIENTRY *PFN_glVertexStream2dATI)( GLenum stream, GLdouble x, GLdouble y );
+typedef void       (GLAPIENTRY *PFN_glVertexStream2dvATI)( GLenum stream, const GLdouble *coords );
+typedef void       (GLAPIENTRY *PFN_glVertexStream2fATI)( GLenum stream, GLfloat x, GLfloat y );
+typedef void       (GLAPIENTRY *PFN_glVertexStream2fvATI)( GLenum stream, const GLfloat *coords );
+typedef void       (GLAPIENTRY *PFN_glVertexStream2iATI)( GLenum stream, GLint x, GLint y );
+typedef void       (GLAPIENTRY *PFN_glVertexStream2ivATI)( GLenum stream, const GLint *coords );
+typedef void       (GLAPIENTRY *PFN_glVertexStream2sATI)( GLenum stream, GLshort x, GLshort y );
+typedef void       (GLAPIENTRY *PFN_glVertexStream2svATI)( GLenum stream, const GLshort *coords );
+typedef void       (GLAPIENTRY *PFN_glVertexStream3dATI)( GLenum stream, GLdouble x, GLdouble y, GLdouble z );
+typedef void       (GLAPIENTRY *PFN_glVertexStream3dvATI)( GLenum stream, const GLdouble *coords );
+typedef void       (GLAPIENTRY *PFN_glVertexStream3fATI)( GLenum stream, GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glVertexStream3fvATI)( GLenum stream, const GLfloat *coords );
+typedef void       (GLAPIENTRY *PFN_glVertexStream3iATI)( GLenum stream, GLint x, GLint y, GLint z );
+typedef void       (GLAPIENTRY *PFN_glVertexStream3ivATI)( GLenum stream, const GLint *coords );
+typedef void       (GLAPIENTRY *PFN_glVertexStream3sATI)( GLenum stream, GLshort x, GLshort y, GLshort z );
+typedef void       (GLAPIENTRY *PFN_glVertexStream3svATI)( GLenum stream, const GLshort *coords );
+typedef void       (GLAPIENTRY *PFN_glVertexStream4dATI)( GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
+typedef void       (GLAPIENTRY *PFN_glVertexStream4dvATI)( GLenum stream, const GLdouble *coords );
+typedef void       (GLAPIENTRY *PFN_glVertexStream4fATI)( GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
+typedef void       (GLAPIENTRY *PFN_glVertexStream4fvATI)( GLenum stream, const GLfloat *coords );
+typedef void       (GLAPIENTRY *PFN_glVertexStream4iATI)( GLenum stream, GLint x, GLint y, GLint z, GLint w );
+typedef void       (GLAPIENTRY *PFN_glVertexStream4ivATI)( GLenum stream, const GLint *coords );
+typedef void       (GLAPIENTRY *PFN_glVertexStream4sATI)( GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w );
+typedef void       (GLAPIENTRY *PFN_glVertexStream4svATI)( GLenum stream, const GLshort *coords );
+typedef void       (GLAPIENTRY *PFN_glVertexWeightPointerEXT)( GLint size, GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glVertexWeightfEXT)( GLfloat weight );
+typedef void       (GLAPIENTRY *PFN_glVertexWeightfvEXT)( const GLfloat *weight );
+typedef void       (GLAPIENTRY *PFN_glVertexWeighthNV)( GLhalfNV weight );
+typedef void       (GLAPIENTRY *PFN_glVertexWeighthvNV)( const GLhalfNV *weight );
+typedef GLenum     (GLAPIENTRY *PFN_glVideoCaptureNV)( GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time );
+typedef void       (GLAPIENTRY *PFN_glVideoCaptureStreamParameterdvNV)( GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params );
+typedef void       (GLAPIENTRY *PFN_glVideoCaptureStreamParameterfvNV)( GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params );
+typedef void       (GLAPIENTRY *PFN_glVideoCaptureStreamParameterivNV)( GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params );
+typedef void       (GLAPIENTRY *PFN_glViewportArrayv)( GLuint first, GLsizei count, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glViewportIndexedf)( GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h );
+typedef void       (GLAPIENTRY *PFN_glViewportIndexedfv)( GLuint index, const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glViewportPositionWScaleNV)( GLuint index, GLfloat xcoeff, GLfloat ycoeff );
+typedef void       (GLAPIENTRY *PFN_glViewportSwizzleNV)( GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew );
+typedef void       (GLAPIENTRY *PFN_glWaitSemaphoreEXT)( GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts );
+typedef void       (GLAPIENTRY *PFN_glWaitSemaphoreui64NVX)( GLuint waitGpu, GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray );
+typedef void       (GLAPIENTRY *PFN_glWaitSync)( GLsync sync, GLbitfield flags, GLuint64 timeout );
+typedef void       (GLAPIENTRY *PFN_glWaitVkSemaphoreNV)( GLuint64 vkSemaphore );
+typedef void       (GLAPIENTRY *PFN_glWeightPathsNV)( GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights );
+typedef void       (GLAPIENTRY *PFN_glWeightPointerARB)( GLint size, GLenum type, GLsizei stride, const void *pointer );
+typedef void       (GLAPIENTRY *PFN_glWeightbvARB)( GLint size, const GLbyte *weights );
+typedef void       (GLAPIENTRY *PFN_glWeightdvARB)( GLint size, const GLdouble *weights );
+typedef void       (GLAPIENTRY *PFN_glWeightfvARB)( GLint size, const GLfloat *weights );
+typedef void       (GLAPIENTRY *PFN_glWeightivARB)( GLint size, const GLint *weights );
+typedef void       (GLAPIENTRY *PFN_glWeightsvARB)( GLint size, const GLshort *weights );
+typedef void       (GLAPIENTRY *PFN_glWeightubvARB)( GLint size, const GLubyte *weights );
+typedef void       (GLAPIENTRY *PFN_glWeightuivARB)( GLint size, const GLuint *weights );
+typedef void       (GLAPIENTRY *PFN_glWeightusvARB)( GLint size, const GLushort *weights );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2d)( GLdouble x, GLdouble y );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2dARB)( GLdouble x, GLdouble y );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2dMESA)( GLdouble x, GLdouble y );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2dv)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2dvARB)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2dvMESA)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2f)( GLfloat x, GLfloat y );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2fARB)( GLfloat x, GLfloat y );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2fMESA)( GLfloat x, GLfloat y );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2fv)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2fvARB)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2fvMESA)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2i)( GLint x, GLint y );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2iARB)( GLint x, GLint y );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2iMESA)( GLint x, GLint y );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2iv)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2ivARB)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2ivMESA)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2s)( GLshort x, GLshort y );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2sARB)( GLshort x, GLshort y );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2sMESA)( GLshort x, GLshort y );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2sv)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2svARB)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos2svMESA)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3d)( GLdouble x, GLdouble y, GLdouble z );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3dARB)( GLdouble x, GLdouble y, GLdouble z );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3dMESA)( GLdouble x, GLdouble y, GLdouble z );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3dv)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3dvARB)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3dvMESA)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3f)( GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3fARB)( GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3fMESA)( GLfloat x, GLfloat y, GLfloat z );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3fv)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3fvARB)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3fvMESA)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3i)( GLint x, GLint y, GLint z );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3iARB)( GLint x, GLint y, GLint z );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3iMESA)( GLint x, GLint y, GLint z );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3iv)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3ivARB)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3ivMESA)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3s)( GLshort x, GLshort y, GLshort z );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3sARB)( GLshort x, GLshort y, GLshort z );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3sMESA)( GLshort x, GLshort y, GLshort z );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3sv)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3svARB)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos3svMESA)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos4dMESA)( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
+typedef void       (GLAPIENTRY *PFN_glWindowPos4dvMESA)( const GLdouble *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos4fMESA)( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
+typedef void       (GLAPIENTRY *PFN_glWindowPos4fvMESA)( const GLfloat *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos4iMESA)( GLint x, GLint y, GLint z, GLint w );
+typedef void       (GLAPIENTRY *PFN_glWindowPos4ivMESA)( const GLint *v );
+typedef void       (GLAPIENTRY *PFN_glWindowPos4sMESA)( GLshort x, GLshort y, GLshort z, GLshort w );
+typedef void       (GLAPIENTRY *PFN_glWindowPos4svMESA)( const GLshort *v );
+typedef void       (GLAPIENTRY *PFN_glWindowRectanglesEXT)( GLenum mode, GLsizei count, const GLint *box );
+typedef void       (GLAPIENTRY *PFN_glWriteMaskEXT)( GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW );
+typedef void *     (GLAPIENTRY *PFN_wglAllocateMemoryNV)( GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority );
+typedef BOOL       (GLAPIENTRY *PFN_wglBindTexImageARB)( HPBUFFERARB hPbuffer, int iBuffer );
+typedef BOOL       (GLAPIENTRY *PFN_wglChoosePixelFormatARB)( HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats );
+typedef HGLRC      (GLAPIENTRY *PFN_wglCreateContextAttribsARB)( HDC hDC, HGLRC hShareContext, const int *attribList );
+typedef HPBUFFERARB (GLAPIENTRY *PFN_wglCreatePbufferARB)( HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList );
+typedef BOOL       (GLAPIENTRY *PFN_wglDestroyPbufferARB)( HPBUFFERARB hPbuffer );
+typedef void       (GLAPIENTRY *PFN_wglFreeMemoryNV)( void *pointer );
+typedef HDC        (GLAPIENTRY *PFN_wglGetCurrentReadDCARB)(void);
+typedef const char * (GLAPIENTRY *PFN_wglGetExtensionsStringARB)( HDC hdc );
+typedef const char * (GLAPIENTRY *PFN_wglGetExtensionsStringEXT)(void);
+typedef HDC        (GLAPIENTRY *PFN_wglGetPbufferDCARB)( HPBUFFERARB hPbuffer );
+typedef BOOL       (GLAPIENTRY *PFN_wglGetPixelFormatAttribfvARB)( HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues );
+typedef BOOL       (GLAPIENTRY *PFN_wglGetPixelFormatAttribivARB)( HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues );
+typedef int        (GLAPIENTRY *PFN_wglGetSwapIntervalEXT)(void);
+typedef BOOL       (GLAPIENTRY *PFN_wglMakeContextCurrentARB)( HDC hDrawDC, HDC hReadDC, HGLRC hglrc );
+typedef BOOL       (GLAPIENTRY *PFN_wglQueryCurrentRendererIntegerWINE)( GLenum attribute, GLuint *value );
+typedef const GLchar * (GLAPIENTRY *PFN_wglQueryCurrentRendererStringWINE)( GLenum attribute );
+typedef BOOL       (GLAPIENTRY *PFN_wglQueryPbufferARB)( HPBUFFERARB hPbuffer, int iAttribute, int *piValue );
+typedef BOOL       (GLAPIENTRY *PFN_wglQueryRendererIntegerWINE)( HDC dc, GLint renderer, GLenum attribute, GLuint *value );
+typedef const GLchar * (GLAPIENTRY *PFN_wglQueryRendererStringWINE)( HDC dc, GLint renderer, GLenum attribute );
+typedef int        (GLAPIENTRY *PFN_wglReleasePbufferDCARB)( HPBUFFERARB hPbuffer, HDC hDC );
+typedef BOOL       (GLAPIENTRY *PFN_wglReleaseTexImageARB)( HPBUFFERARB hPbuffer, int iBuffer );
+typedef BOOL       (GLAPIENTRY *PFN_wglSetPbufferAttribARB)( HPBUFFERARB hPbuffer, const int *piAttribList );
+typedef BOOL       (GLAPIENTRY *PFN_wglSetPixelFormatWINE)( HDC hdc, int format );
+typedef BOOL       (GLAPIENTRY *PFN_wglSwapIntervalEXT)( int interval );
+
+#define ALL_WGL_FUNCS \
+    USE_GL_FUNC(wglChoosePixelFormat) \
+    USE_GL_FUNC(wglCopyContext) \
+    USE_GL_FUNC(wglCreateContext) \
+    USE_GL_FUNC(wglCreateLayerContext) \
+    USE_GL_FUNC(wglDeleteContext) \
+    USE_GL_FUNC(wglDescribeLayerPlane) \
+    USE_GL_FUNC(wglDescribePixelFormat) \
+    USE_GL_FUNC(wglGetCurrentContext) \
+    USE_GL_FUNC(wglGetCurrentDC) \
+    USE_GL_FUNC(wglGetDefaultProcAddress) \
+    USE_GL_FUNC(wglGetLayerPaletteEntries) \
+    USE_GL_FUNC(wglGetPixelFormat) \
+    USE_GL_FUNC(wglGetProcAddress) \
+    USE_GL_FUNC(wglMakeCurrent) \
+    USE_GL_FUNC(wglRealizeLayerPalette) \
+    USE_GL_FUNC(wglSetLayerPaletteEntries) \
+    USE_GL_FUNC(wglSetPixelFormat) \
+    USE_GL_FUNC(wglShareLists) \
+    USE_GL_FUNC(wglSwapBuffers) \
+    USE_GL_FUNC(wglSwapLayerBuffers) \
+    USE_GL_FUNC(wglUseFontBitmapsA) \
+    USE_GL_FUNC(wglUseFontBitmapsW) \
+    USE_GL_FUNC(wglUseFontOutlinesA) \
+    USE_GL_FUNC(wglUseFontOutlinesW)
+
+#define ALL_WGL_EXT_FUNCS \
+    USE_GL_FUNC(wglAllocateMemoryNV) \
+    USE_GL_FUNC(wglBindTexImageARB) \
+    USE_GL_FUNC(wglChoosePixelFormatARB) \
+    USE_GL_FUNC(wglCreateContextAttribsARB) \
+    USE_GL_FUNC(wglCreatePbufferARB) \
+    USE_GL_FUNC(wglDestroyPbufferARB) \
+    USE_GL_FUNC(wglFreeMemoryNV) \
+    USE_GL_FUNC(wglGetCurrentReadDCARB) \
+    USE_GL_FUNC(wglGetExtensionsStringARB) \
+    USE_GL_FUNC(wglGetExtensionsStringEXT) \
+    USE_GL_FUNC(wglGetPbufferDCARB) \
+    USE_GL_FUNC(wglGetPixelFormatAttribfvARB) \
+    USE_GL_FUNC(wglGetPixelFormatAttribivARB) \
+    USE_GL_FUNC(wglGetSwapIntervalEXT) \
+    USE_GL_FUNC(wglMakeContextCurrentARB) \
+    USE_GL_FUNC(wglQueryCurrentRendererIntegerWINE) \
+    USE_GL_FUNC(wglQueryCurrentRendererStringWINE) \
+    USE_GL_FUNC(wglQueryPbufferARB) \
+    USE_GL_FUNC(wglQueryRendererIntegerWINE) \
+    USE_GL_FUNC(wglQueryRendererStringWINE) \
+    USE_GL_FUNC(wglReleasePbufferDCARB) \
+    USE_GL_FUNC(wglReleaseTexImageARB) \
+    USE_GL_FUNC(wglSetPbufferAttribARB) \
+    USE_GL_FUNC(wglSetPixelFormatWINE) \
+    USE_GL_FUNC(wglSwapIntervalEXT)
+
+#define ALL_GL_FUNCS \
+    USE_GL_FUNC(glAccum) \
+    USE_GL_FUNC(glAlphaFunc) \
+    USE_GL_FUNC(glAreTexturesResident) \
+    USE_GL_FUNC(glArrayElement) \
+    USE_GL_FUNC(glBegin) \
+    USE_GL_FUNC(glBindTexture) \
+    USE_GL_FUNC(glBitmap) \
+    USE_GL_FUNC(glBlendFunc) \
+    USE_GL_FUNC(glCallList) \
+    USE_GL_FUNC(glCallLists) \
+    USE_GL_FUNC(glClear) \
+    USE_GL_FUNC(glClearAccum) \
+    USE_GL_FUNC(glClearColor) \
+    USE_GL_FUNC(glClearDepth) \
+    USE_GL_FUNC(glClearIndex) \
+    USE_GL_FUNC(glClearStencil) \
+    USE_GL_FUNC(glClipPlane) \
+    USE_GL_FUNC(glColor3b) \
+    USE_GL_FUNC(glColor3bv) \
+    USE_GL_FUNC(glColor3d) \
+    USE_GL_FUNC(glColor3dv) \
+    USE_GL_FUNC(glColor3f) \
+    USE_GL_FUNC(glColor3fv) \
+    USE_GL_FUNC(glColor3i) \
+    USE_GL_FUNC(glColor3iv) \
+    USE_GL_FUNC(glColor3s) \
+    USE_GL_FUNC(glColor3sv) \
+    USE_GL_FUNC(glColor3ub) \
+    USE_GL_FUNC(glColor3ubv) \
+    USE_GL_FUNC(glColor3ui) \
+    USE_GL_FUNC(glColor3uiv) \
+    USE_GL_FUNC(glColor3us) \
+    USE_GL_FUNC(glColor3usv) \
+    USE_GL_FUNC(glColor4b) \
+    USE_GL_FUNC(glColor4bv) \
+    USE_GL_FUNC(glColor4d) \
+    USE_GL_FUNC(glColor4dv) \
+    USE_GL_FUNC(glColor4f) \
+    USE_GL_FUNC(glColor4fv) \
+    USE_GL_FUNC(glColor4i) \
+    USE_GL_FUNC(glColor4iv) \
+    USE_GL_FUNC(glColor4s) \
+    USE_GL_FUNC(glColor4sv) \
+    USE_GL_FUNC(glColor4ub) \
+    USE_GL_FUNC(glColor4ubv) \
+    USE_GL_FUNC(glColor4ui) \
+    USE_GL_FUNC(glColor4uiv) \
+    USE_GL_FUNC(glColor4us) \
+    USE_GL_FUNC(glColor4usv) \
+    USE_GL_FUNC(glColorMask) \
+    USE_GL_FUNC(glColorMaterial) \
+    USE_GL_FUNC(glColorPointer) \
+    USE_GL_FUNC(glCopyPixels) \
+    USE_GL_FUNC(glCopyTexImage1D) \
+    USE_GL_FUNC(glCopyTexImage2D) \
+    USE_GL_FUNC(glCopyTexSubImage1D) \
+    USE_GL_FUNC(glCopyTexSubImage2D) \
+    USE_GL_FUNC(glCullFace) \
+    USE_GL_FUNC(glDeleteLists) \
+    USE_GL_FUNC(glDeleteTextures) \
+    USE_GL_FUNC(glDepthFunc) \
+    USE_GL_FUNC(glDepthMask) \
+    USE_GL_FUNC(glDepthRange) \
+    USE_GL_FUNC(glDisable) \
+    USE_GL_FUNC(glDisableClientState) \
+    USE_GL_FUNC(glDrawArrays) \
+    USE_GL_FUNC(glDrawBuffer) \
+    USE_GL_FUNC(glDrawElements) \
+    USE_GL_FUNC(glDrawPixels) \
+    USE_GL_FUNC(glEdgeFlag) \
+    USE_GL_FUNC(glEdgeFlagPointer) \
+    USE_GL_FUNC(glEdgeFlagv) \
+    USE_GL_FUNC(glEnable) \
+    USE_GL_FUNC(glEnableClientState) \
+    USE_GL_FUNC(glEnd) \
+    USE_GL_FUNC(glEndList) \
+    USE_GL_FUNC(glEvalCoord1d) \
+    USE_GL_FUNC(glEvalCoord1dv) \
+    USE_GL_FUNC(glEvalCoord1f) \
+    USE_GL_FUNC(glEvalCoord1fv) \
+    USE_GL_FUNC(glEvalCoord2d) \
+    USE_GL_FUNC(glEvalCoord2dv) \
+    USE_GL_FUNC(glEvalCoord2f) \
+    USE_GL_FUNC(glEvalCoord2fv) \
+    USE_GL_FUNC(glEvalMesh1) \
+    USE_GL_FUNC(glEvalMesh2) \
+    USE_GL_FUNC(glEvalPoint1) \
+    USE_GL_FUNC(glEvalPoint2) \
+    USE_GL_FUNC(glFeedbackBuffer) \
+    USE_GL_FUNC(glFinish) \
+    USE_GL_FUNC(glFlush) \
+    USE_GL_FUNC(glFogf) \
+    USE_GL_FUNC(glFogfv) \
+    USE_GL_FUNC(glFogi) \
+    USE_GL_FUNC(glFogiv) \
+    USE_GL_FUNC(glFrontFace) \
+    USE_GL_FUNC(glFrustum) \
+    USE_GL_FUNC(glGenLists) \
+    USE_GL_FUNC(glGenTextures) \
+    USE_GL_FUNC(glGetBooleanv) \
+    USE_GL_FUNC(glGetClipPlane) \
+    USE_GL_FUNC(glGetDoublev) \
+    USE_GL_FUNC(glGetError) \
+    USE_GL_FUNC(glGetFloatv) \
+    USE_GL_FUNC(glGetIntegerv) \
+    USE_GL_FUNC(glGetLightfv) \
+    USE_GL_FUNC(glGetLightiv) \
+    USE_GL_FUNC(glGetMapdv) \
+    USE_GL_FUNC(glGetMapfv) \
+    USE_GL_FUNC(glGetMapiv) \
+    USE_GL_FUNC(glGetMaterialfv) \
+    USE_GL_FUNC(glGetMaterialiv) \
+    USE_GL_FUNC(glGetPixelMapfv) \
+    USE_GL_FUNC(glGetPixelMapuiv) \
+    USE_GL_FUNC(glGetPixelMapusv) \
+    USE_GL_FUNC(glGetPointerv) \
+    USE_GL_FUNC(glGetPolygonStipple) \
+    USE_GL_FUNC(glGetString) \
+    USE_GL_FUNC(glGetTexEnvfv) \
+    USE_GL_FUNC(glGetTexEnviv) \
+    USE_GL_FUNC(glGetTexGendv) \
+    USE_GL_FUNC(glGetTexGenfv) \
+    USE_GL_FUNC(glGetTexGeniv) \
+    USE_GL_FUNC(glGetTexImage) \
+    USE_GL_FUNC(glGetTexLevelParameterfv) \
+    USE_GL_FUNC(glGetTexLevelParameteriv) \
+    USE_GL_FUNC(glGetTexParameterfv) \
+    USE_GL_FUNC(glGetTexParameteriv) \
+    USE_GL_FUNC(glHint) \
+    USE_GL_FUNC(glIndexMask) \
+    USE_GL_FUNC(glIndexPointer) \
+    USE_GL_FUNC(glIndexd) \
+    USE_GL_FUNC(glIndexdv) \
+    USE_GL_FUNC(glIndexf) \
+    USE_GL_FUNC(glIndexfv) \
+    USE_GL_FUNC(glIndexi) \
+    USE_GL_FUNC(glIndexiv) \
+    USE_GL_FUNC(glIndexs) \
+    USE_GL_FUNC(glIndexsv) \
+    USE_GL_FUNC(glIndexub) \
+    USE_GL_FUNC(glIndexubv) \
+    USE_GL_FUNC(glInitNames) \
+    USE_GL_FUNC(glInterleavedArrays) \
+    USE_GL_FUNC(glIsEnabled) \
+    USE_GL_FUNC(glIsList) \
+    USE_GL_FUNC(glIsTexture) \
+    USE_GL_FUNC(glLightModelf) \
+    USE_GL_FUNC(glLightModelfv) \
+    USE_GL_FUNC(glLightModeli) \
+    USE_GL_FUNC(glLightModeliv) \
+    USE_GL_FUNC(glLightf) \
+    USE_GL_FUNC(glLightfv) \
+    USE_GL_FUNC(glLighti) \
+    USE_GL_FUNC(glLightiv) \
+    USE_GL_FUNC(glLineStipple) \
+    USE_GL_FUNC(glLineWidth) \
+    USE_GL_FUNC(glListBase) \
+    USE_GL_FUNC(glLoadIdentity) \
+    USE_GL_FUNC(glLoadMatrixd) \
+    USE_GL_FUNC(glLoadMatrixf) \
+    USE_GL_FUNC(glLoadName) \
+    USE_GL_FUNC(glLogicOp) \
+    USE_GL_FUNC(glMap1d) \
+    USE_GL_FUNC(glMap1f) \
+    USE_GL_FUNC(glMap2d) \
+    USE_GL_FUNC(glMap2f) \
+    USE_GL_FUNC(glMapGrid1d) \
+    USE_GL_FUNC(glMapGrid1f) \
+    USE_GL_FUNC(glMapGrid2d) \
+    USE_GL_FUNC(glMapGrid2f) \
+    USE_GL_FUNC(glMaterialf) \
+    USE_GL_FUNC(glMaterialfv) \
+    USE_GL_FUNC(glMateriali) \
+    USE_GL_FUNC(glMaterialiv) \
+    USE_GL_FUNC(glMatrixMode) \
+    USE_GL_FUNC(glMultMatrixd) \
+    USE_GL_FUNC(glMultMatrixf) \
+    USE_GL_FUNC(glNewList) \
+    USE_GL_FUNC(glNormal3b) \
+    USE_GL_FUNC(glNormal3bv) \
+    USE_GL_FUNC(glNormal3d) \
+    USE_GL_FUNC(glNormal3dv) \
+    USE_GL_FUNC(glNormal3f) \
+    USE_GL_FUNC(glNormal3fv) \
+    USE_GL_FUNC(glNormal3i) \
+    USE_GL_FUNC(glNormal3iv) \
+    USE_GL_FUNC(glNormal3s) \
+    USE_GL_FUNC(glNormal3sv) \
+    USE_GL_FUNC(glNormalPointer) \
+    USE_GL_FUNC(glOrtho) \
+    USE_GL_FUNC(glPassThrough) \
+    USE_GL_FUNC(glPixelMapfv) \
+    USE_GL_FUNC(glPixelMapuiv) \
+    USE_GL_FUNC(glPixelMapusv) \
+    USE_GL_FUNC(glPixelStoref) \
+    USE_GL_FUNC(glPixelStorei) \
+    USE_GL_FUNC(glPixelTransferf) \
+    USE_GL_FUNC(glPixelTransferi) \
+    USE_GL_FUNC(glPixelZoom) \
+    USE_GL_FUNC(glPointSize) \
+    USE_GL_FUNC(glPolygonMode) \
+    USE_GL_FUNC(glPolygonOffset) \
+    USE_GL_FUNC(glPolygonStipple) \
+    USE_GL_FUNC(glPopAttrib) \
+    USE_GL_FUNC(glPopClientAttrib) \
+    USE_GL_FUNC(glPopMatrix) \
+    USE_GL_FUNC(glPopName) \
+    USE_GL_FUNC(glPrioritizeTextures) \
+    USE_GL_FUNC(glPushAttrib) \
+    USE_GL_FUNC(glPushClientAttrib) \
+    USE_GL_FUNC(glPushMatrix) \
+    USE_GL_FUNC(glPushName) \
+    USE_GL_FUNC(glRasterPos2d) \
+    USE_GL_FUNC(glRasterPos2dv) \
+    USE_GL_FUNC(glRasterPos2f) \
+    USE_GL_FUNC(glRasterPos2fv) \
+    USE_GL_FUNC(glRasterPos2i) \
+    USE_GL_FUNC(glRasterPos2iv) \
+    USE_GL_FUNC(glRasterPos2s) \
+    USE_GL_FUNC(glRasterPos2sv) \
+    USE_GL_FUNC(glRasterPos3d) \
+    USE_GL_FUNC(glRasterPos3dv) \
+    USE_GL_FUNC(glRasterPos3f) \
+    USE_GL_FUNC(glRasterPos3fv) \
+    USE_GL_FUNC(glRasterPos3i) \
+    USE_GL_FUNC(glRasterPos3iv) \
+    USE_GL_FUNC(glRasterPos3s) \
+    USE_GL_FUNC(glRasterPos3sv) \
+    USE_GL_FUNC(glRasterPos4d) \
+    USE_GL_FUNC(glRasterPos4dv) \
+    USE_GL_FUNC(glRasterPos4f) \
+    USE_GL_FUNC(glRasterPos4fv) \
+    USE_GL_FUNC(glRasterPos4i) \
+    USE_GL_FUNC(glRasterPos4iv) \
+    USE_GL_FUNC(glRasterPos4s) \
+    USE_GL_FUNC(glRasterPos4sv) \
+    USE_GL_FUNC(glReadBuffer) \
+    USE_GL_FUNC(glReadPixels) \
+    USE_GL_FUNC(glRectd) \
+    USE_GL_FUNC(glRectdv) \
+    USE_GL_FUNC(glRectf) \
+    USE_GL_FUNC(glRectfv) \
+    USE_GL_FUNC(glRecti) \
+    USE_GL_FUNC(glRectiv) \
+    USE_GL_FUNC(glRects) \
+    USE_GL_FUNC(glRectsv) \
+    USE_GL_FUNC(glRenderMode) \
+    USE_GL_FUNC(glRotated) \
+    USE_GL_FUNC(glRotatef) \
+    USE_GL_FUNC(glScaled) \
+    USE_GL_FUNC(glScalef) \
+    USE_GL_FUNC(glScissor) \
+    USE_GL_FUNC(glSelectBuffer) \
+    USE_GL_FUNC(glShadeModel) \
+    USE_GL_FUNC(glStencilFunc) \
+    USE_GL_FUNC(glStencilMask) \
+    USE_GL_FUNC(glStencilOp) \
+    USE_GL_FUNC(glTexCoord1d) \
+    USE_GL_FUNC(glTexCoord1dv) \
+    USE_GL_FUNC(glTexCoord1f) \
+    USE_GL_FUNC(glTexCoord1fv) \
+    USE_GL_FUNC(glTexCoord1i) \
+    USE_GL_FUNC(glTexCoord1iv) \
+    USE_GL_FUNC(glTexCoord1s) \
+    USE_GL_FUNC(glTexCoord1sv) \
+    USE_GL_FUNC(glTexCoord2d) \
+    USE_GL_FUNC(glTexCoord2dv) \
+    USE_GL_FUNC(glTexCoord2f) \
+    USE_GL_FUNC(glTexCoord2fv) \
+    USE_GL_FUNC(glTexCoord2i) \
+    USE_GL_FUNC(glTexCoord2iv) \
+    USE_GL_FUNC(glTexCoord2s) \
+    USE_GL_FUNC(glTexCoord2sv) \
+    USE_GL_FUNC(glTexCoord3d) \
+    USE_GL_FUNC(glTexCoord3dv) \
+    USE_GL_FUNC(glTexCoord3f) \
+    USE_GL_FUNC(glTexCoord3fv) \
+    USE_GL_FUNC(glTexCoord3i) \
+    USE_GL_FUNC(glTexCoord3iv) \
+    USE_GL_FUNC(glTexCoord3s) \
+    USE_GL_FUNC(glTexCoord3sv) \
+    USE_GL_FUNC(glTexCoord4d) \
+    USE_GL_FUNC(glTexCoord4dv) \
+    USE_GL_FUNC(glTexCoord4f) \
+    USE_GL_FUNC(glTexCoord4fv) \
+    USE_GL_FUNC(glTexCoord4i) \
+    USE_GL_FUNC(glTexCoord4iv) \
+    USE_GL_FUNC(glTexCoord4s) \
+    USE_GL_FUNC(glTexCoord4sv) \
+    USE_GL_FUNC(glTexCoordPointer) \
+    USE_GL_FUNC(glTexEnvf) \
+    USE_GL_FUNC(glTexEnvfv) \
+    USE_GL_FUNC(glTexEnvi) \
+    USE_GL_FUNC(glTexEnviv) \
+    USE_GL_FUNC(glTexGend) \
+    USE_GL_FUNC(glTexGendv) \
+    USE_GL_FUNC(glTexGenf) \
+    USE_GL_FUNC(glTexGenfv) \
+    USE_GL_FUNC(glTexGeni) \
+    USE_GL_FUNC(glTexGeniv) \
+    USE_GL_FUNC(glTexImage1D) \
+    USE_GL_FUNC(glTexImage2D) \
+    USE_GL_FUNC(glTexParameterf) \
+    USE_GL_FUNC(glTexParameterfv) \
+    USE_GL_FUNC(glTexParameteri) \
+    USE_GL_FUNC(glTexParameteriv) \
+    USE_GL_FUNC(glTexSubImage1D) \
+    USE_GL_FUNC(glTexSubImage2D) \
+    USE_GL_FUNC(glTranslated) \
+    USE_GL_FUNC(glTranslatef) \
+    USE_GL_FUNC(glVertex2d) \
+    USE_GL_FUNC(glVertex2dv) \
+    USE_GL_FUNC(glVertex2f) \
+    USE_GL_FUNC(glVertex2fv) \
+    USE_GL_FUNC(glVertex2i) \
+    USE_GL_FUNC(glVertex2iv) \
+    USE_GL_FUNC(glVertex2s) \
+    USE_GL_FUNC(glVertex2sv) \
+    USE_GL_FUNC(glVertex3d) \
+    USE_GL_FUNC(glVertex3dv) \
+    USE_GL_FUNC(glVertex3f) \
+    USE_GL_FUNC(glVertex3fv) \
+    USE_GL_FUNC(glVertex3i) \
+    USE_GL_FUNC(glVertex3iv) \
+    USE_GL_FUNC(glVertex3s) \
+    USE_GL_FUNC(glVertex3sv) \
+    USE_GL_FUNC(glVertex4d) \
+    USE_GL_FUNC(glVertex4dv) \
+    USE_GL_FUNC(glVertex4f) \
+    USE_GL_FUNC(glVertex4fv) \
+    USE_GL_FUNC(glVertex4i) \
+    USE_GL_FUNC(glVertex4iv) \
+    USE_GL_FUNC(glVertex4s) \
+    USE_GL_FUNC(glVertex4sv) \
+    USE_GL_FUNC(glVertexPointer) \
+    USE_GL_FUNC(glViewport)
+
+#define ALL_GL_EXT_FUNCS \
+    USE_GL_FUNC(glAccumxOES) \
+    USE_GL_FUNC(glAcquireKeyedMutexWin32EXT) \
+    USE_GL_FUNC(glActiveProgramEXT) \
+    USE_GL_FUNC(glActiveShaderProgram) \
+    USE_GL_FUNC(glActiveStencilFaceEXT) \
+    USE_GL_FUNC(glActiveTexture) \
+    USE_GL_FUNC(glActiveTextureARB) \
+    USE_GL_FUNC(glActiveVaryingNV) \
+    USE_GL_FUNC(glAlphaFragmentOp1ATI) \
+    USE_GL_FUNC(glAlphaFragmentOp2ATI) \
+    USE_GL_FUNC(glAlphaFragmentOp3ATI) \
+    USE_GL_FUNC(glAlphaFuncxOES) \
+    USE_GL_FUNC(glAlphaToCoverageDitherControlNV) \
+    USE_GL_FUNC(glApplyFramebufferAttachmentCMAAINTEL) \
+    USE_GL_FUNC(glApplyTextureEXT) \
+    USE_GL_FUNC(glAreProgramsResidentNV) \
+    USE_GL_FUNC(glAreTexturesResidentEXT) \
+    USE_GL_FUNC(glArrayElementEXT) \
+    USE_GL_FUNC(glArrayObjectATI) \
+    USE_GL_FUNC(glAsyncCopyBufferSubDataNVX) \
+    USE_GL_FUNC(glAsyncCopyImageSubDataNVX) \
+    USE_GL_FUNC(glAsyncMarkerSGIX) \
+    USE_GL_FUNC(glAttachObjectARB) \
+    USE_GL_FUNC(glAttachShader) \
+    USE_GL_FUNC(glBeginConditionalRender) \
+    USE_GL_FUNC(glBeginConditionalRenderNV) \
+    USE_GL_FUNC(glBeginConditionalRenderNVX) \
+    USE_GL_FUNC(glBeginFragmentShaderATI) \
+    USE_GL_FUNC(glBeginOcclusionQueryNV) \
+    USE_GL_FUNC(glBeginPerfMonitorAMD) \
+    USE_GL_FUNC(glBeginPerfQueryINTEL) \
+    USE_GL_FUNC(glBeginQuery) \
+    USE_GL_FUNC(glBeginQueryARB) \
+    USE_GL_FUNC(glBeginQueryIndexed) \
+    USE_GL_FUNC(glBeginTransformFeedback) \
+    USE_GL_FUNC(glBeginTransformFeedbackEXT) \
+    USE_GL_FUNC(glBeginTransformFeedbackNV) \
+    USE_GL_FUNC(glBeginVertexShaderEXT) \
+    USE_GL_FUNC(glBeginVideoCaptureNV) \
+    USE_GL_FUNC(glBindAttribLocation) \
+    USE_GL_FUNC(glBindAttribLocationARB) \
+    USE_GL_FUNC(glBindBuffer) \
+    USE_GL_FUNC(glBindBufferARB) \
+    USE_GL_FUNC(glBindBufferBase) \
+    USE_GL_FUNC(glBindBufferBaseEXT) \
+    USE_GL_FUNC(glBindBufferBaseNV) \
+    USE_GL_FUNC(glBindBufferOffsetEXT) \
+    USE_GL_FUNC(glBindBufferOffsetNV) \
+    USE_GL_FUNC(glBindBufferRange) \
+    USE_GL_FUNC(glBindBufferRangeEXT) \
+    USE_GL_FUNC(glBindBufferRangeNV) \
+    USE_GL_FUNC(glBindBuffersBase) \
+    USE_GL_FUNC(glBindBuffersRange) \
+    USE_GL_FUNC(glBindFragDataLocation) \
+    USE_GL_FUNC(glBindFragDataLocationEXT) \
+    USE_GL_FUNC(glBindFragDataLocationIndexed) \
+    USE_GL_FUNC(glBindFragmentShaderATI) \
+    USE_GL_FUNC(glBindFramebuffer) \
+    USE_GL_FUNC(glBindFramebufferEXT) \
+    USE_GL_FUNC(glBindImageTexture) \
+    USE_GL_FUNC(glBindImageTextureEXT) \
+    USE_GL_FUNC(glBindImageTextures) \
+    USE_GL_FUNC(glBindLightParameterEXT) \
+    USE_GL_FUNC(glBindMaterialParameterEXT) \
+    USE_GL_FUNC(glBindMultiTextureEXT) \
+    USE_GL_FUNC(glBindParameterEXT) \
+    USE_GL_FUNC(glBindProgramARB) \
+    USE_GL_FUNC(glBindProgramNV) \
+    USE_GL_FUNC(glBindProgramPipeline) \
+    USE_GL_FUNC(glBindRenderbuffer) \
+    USE_GL_FUNC(glBindRenderbufferEXT) \
+    USE_GL_FUNC(glBindSampler) \
+    USE_GL_FUNC(glBindSamplers) \
+    USE_GL_FUNC(glBindShadingRateImageNV) \
+    USE_GL_FUNC(glBindTexGenParameterEXT) \
+    USE_GL_FUNC(glBindTextureEXT) \
+    USE_GL_FUNC(glBindTextureUnit) \
+    USE_GL_FUNC(glBindTextureUnitParameterEXT) \
+    USE_GL_FUNC(glBindTextures) \
+    USE_GL_FUNC(glBindTransformFeedback) \
+    USE_GL_FUNC(glBindTransformFeedbackNV) \
+    USE_GL_FUNC(glBindVertexArray) \
+    USE_GL_FUNC(glBindVertexArrayAPPLE) \
+    USE_GL_FUNC(glBindVertexBuffer) \
+    USE_GL_FUNC(glBindVertexBuffers) \
+    USE_GL_FUNC(glBindVertexShaderEXT) \
+    USE_GL_FUNC(glBindVideoCaptureStreamBufferNV) \
+    USE_GL_FUNC(glBindVideoCaptureStreamTextureNV) \
+    USE_GL_FUNC(glBinormal3bEXT) \
+    USE_GL_FUNC(glBinormal3bvEXT) \
+    USE_GL_FUNC(glBinormal3dEXT) \
+    USE_GL_FUNC(glBinormal3dvEXT) \
+    USE_GL_FUNC(glBinormal3fEXT) \
+    USE_GL_FUNC(glBinormal3fvEXT) \
+    USE_GL_FUNC(glBinormal3iEXT) \
+    USE_GL_FUNC(glBinormal3ivEXT) \
+    USE_GL_FUNC(glBinormal3sEXT) \
+    USE_GL_FUNC(glBinormal3svEXT) \
+    USE_GL_FUNC(glBinormalPointerEXT) \
+    USE_GL_FUNC(glBitmapxOES) \
+    USE_GL_FUNC(glBlendBarrierKHR) \
+    USE_GL_FUNC(glBlendBarrierNV) \
+    USE_GL_FUNC(glBlendColor) \
+    USE_GL_FUNC(glBlendColorEXT) \
+    USE_GL_FUNC(glBlendColorxOES) \
+    USE_GL_FUNC(glBlendEquation) \
+    USE_GL_FUNC(glBlendEquationEXT) \
+    USE_GL_FUNC(glBlendEquationIndexedAMD) \
+    USE_GL_FUNC(glBlendEquationSeparate) \
+    USE_GL_FUNC(glBlendEquationSeparateEXT) \
+    USE_GL_FUNC(glBlendEquationSeparateIndexedAMD) \
+    USE_GL_FUNC(glBlendEquationSeparatei) \
+    USE_GL_FUNC(glBlendEquationSeparateiARB) \
+    USE_GL_FUNC(glBlendEquationi) \
+    USE_GL_FUNC(glBlendEquationiARB) \
+    USE_GL_FUNC(glBlendFuncIndexedAMD) \
+    USE_GL_FUNC(glBlendFuncSeparate) \
+    USE_GL_FUNC(glBlendFuncSeparateEXT) \
+    USE_GL_FUNC(glBlendFuncSeparateINGR) \
+    USE_GL_FUNC(glBlendFuncSeparateIndexedAMD) \
+    USE_GL_FUNC(glBlendFuncSeparatei) \
+    USE_GL_FUNC(glBlendFuncSeparateiARB) \
+    USE_GL_FUNC(glBlendFunci) \
+    USE_GL_FUNC(glBlendFunciARB) \
+    USE_GL_FUNC(glBlendParameteriNV) \
+    USE_GL_FUNC(glBlitFramebuffer) \
+    USE_GL_FUNC(glBlitFramebufferEXT) \
+    USE_GL_FUNC(glBlitNamedFramebuffer) \
+    USE_GL_FUNC(glBufferAddressRangeNV) \
+    USE_GL_FUNC(glBufferAttachMemoryNV) \
+    USE_GL_FUNC(glBufferData) \
+    USE_GL_FUNC(glBufferDataARB) \
+    USE_GL_FUNC(glBufferPageCommitmentARB) \
+    USE_GL_FUNC(glBufferParameteriAPPLE) \
+    USE_GL_FUNC(glBufferRegionEnabled) \
+    USE_GL_FUNC(glBufferStorage) \
+    USE_GL_FUNC(glBufferStorageExternalEXT) \
+    USE_GL_FUNC(glBufferStorageMemEXT) \
+    USE_GL_FUNC(glBufferSubData) \
+    USE_GL_FUNC(glBufferSubDataARB) \
+    USE_GL_FUNC(glCallCommandListNV) \
+    USE_GL_FUNC(glCheckFramebufferStatus) \
+    USE_GL_FUNC(glCheckFramebufferStatusEXT) \
+    USE_GL_FUNC(glCheckNamedFramebufferStatus) \
+    USE_GL_FUNC(glCheckNamedFramebufferStatusEXT) \
+    USE_GL_FUNC(glClampColor) \
+    USE_GL_FUNC(glClampColorARB) \
+    USE_GL_FUNC(glClearAccumxOES) \
+    USE_GL_FUNC(glClearBufferData) \
+    USE_GL_FUNC(glClearBufferSubData) \
+    USE_GL_FUNC(glClearBufferfi) \
+    USE_GL_FUNC(glClearBufferfv) \
+    USE_GL_FUNC(glClearBufferiv) \
+    USE_GL_FUNC(glClearBufferuiv) \
+    USE_GL_FUNC(glClearColorIiEXT) \
+    USE_GL_FUNC(glClearColorIuiEXT) \
+    USE_GL_FUNC(glClearColorxOES) \
+    USE_GL_FUNC(glClearDepthdNV) \
+    USE_GL_FUNC(glClearDepthf) \
+    USE_GL_FUNC(glClearDepthfOES) \
+    USE_GL_FUNC(glClearDepthxOES) \
+    USE_GL_FUNC(glClearNamedBufferData) \
+    USE_GL_FUNC(glClearNamedBufferDataEXT) \
+    USE_GL_FUNC(glClearNamedBufferSubData) \
+    USE_GL_FUNC(glClearNamedBufferSubDataEXT) \
+    USE_GL_FUNC(glClearNamedFramebufferfi) \
+    USE_GL_FUNC(glClearNamedFramebufferfv) \
+    USE_GL_FUNC(glClearNamedFramebufferiv) \
+    USE_GL_FUNC(glClearNamedFramebufferuiv) \
+    USE_GL_FUNC(glClearTexImage) \
+    USE_GL_FUNC(glClearTexSubImage) \
+    USE_GL_FUNC(glClientActiveTexture) \
+    USE_GL_FUNC(glClientActiveTextureARB) \
+    USE_GL_FUNC(glClientActiveVertexStreamATI) \
+    USE_GL_FUNC(glClientAttribDefaultEXT) \
+    USE_GL_FUNC(glClientWaitSemaphoreui64NVX) \
+    USE_GL_FUNC(glClientWaitSync) \
+    USE_GL_FUNC(glClipControl) \
+    USE_GL_FUNC(glClipPlanefOES) \
+    USE_GL_FUNC(glClipPlanexOES) \
+    USE_GL_FUNC(glColor3fVertex3fSUN) \
+    USE_GL_FUNC(glColor3fVertex3fvSUN) \
+    USE_GL_FUNC(glColor3hNV) \
+    USE_GL_FUNC(glColor3hvNV) \
+    USE_GL_FUNC(glColor3xOES) \
+    USE_GL_FUNC(glColor3xvOES) \
+    USE_GL_FUNC(glColor4fNormal3fVertex3fSUN) \
+    USE_GL_FUNC(glColor4fNormal3fVertex3fvSUN) \
+    USE_GL_FUNC(glColor4hNV) \
+    USE_GL_FUNC(glColor4hvNV) \
+    USE_GL_FUNC(glColor4ubVertex2fSUN) \
+    USE_GL_FUNC(glColor4ubVertex2fvSUN) \
+    USE_GL_FUNC(glColor4ubVertex3fSUN) \
+    USE_GL_FUNC(glColor4ubVertex3fvSUN) \
+    USE_GL_FUNC(glColor4xOES) \
+    USE_GL_FUNC(glColor4xvOES) \
+    USE_GL_FUNC(glColorFormatNV) \
+    USE_GL_FUNC(glColorFragmentOp1ATI) \
+    USE_GL_FUNC(glColorFragmentOp2ATI) \
+    USE_GL_FUNC(glColorFragmentOp3ATI) \
+    USE_GL_FUNC(glColorMaskIndexedEXT) \
+    USE_GL_FUNC(glColorMaski) \
+    USE_GL_FUNC(glColorP3ui) \
+    USE_GL_FUNC(glColorP3uiv) \
+    USE_GL_FUNC(glColorP4ui) \
+    USE_GL_FUNC(glColorP4uiv) \
+    USE_GL_FUNC(glColorPointerEXT) \
+    USE_GL_FUNC(glColorPointerListIBM) \
+    USE_GL_FUNC(glColorPointervINTEL) \
+    USE_GL_FUNC(glColorSubTable) \
+    USE_GL_FUNC(glColorSubTableEXT) \
+    USE_GL_FUNC(glColorTable) \
+    USE_GL_FUNC(glColorTableEXT) \
+    USE_GL_FUNC(glColorTableParameterfv) \
+    USE_GL_FUNC(glColorTableParameterfvSGI) \
+    USE_GL_FUNC(glColorTableParameteriv) \
+    USE_GL_FUNC(glColorTableParameterivSGI) \
+    USE_GL_FUNC(glColorTableSGI) \
+    USE_GL_FUNC(glCombinerInputNV) \
+    USE_GL_FUNC(glCombinerOutputNV) \
+    USE_GL_FUNC(glCombinerParameterfNV) \
+    USE_GL_FUNC(glCombinerParameterfvNV) \
+    USE_GL_FUNC(glCombinerParameteriNV) \
+    USE_GL_FUNC(glCombinerParameterivNV) \
+    USE_GL_FUNC(glCombinerStageParameterfvNV) \
+    USE_GL_FUNC(glCommandListSegmentsNV) \
+    USE_GL_FUNC(glCompileCommandListNV) \
+    USE_GL_FUNC(glCompileShader) \
+    USE_GL_FUNC(glCompileShaderARB) \
+    USE_GL_FUNC(glCompileShaderIncludeARB) \
+    USE_GL_FUNC(glCompressedMultiTexImage1DEXT) \
+    USE_GL_FUNC(glCompressedMultiTexImage2DEXT) \
+    USE_GL_FUNC(glCompressedMultiTexImage3DEXT) \
+    USE_GL_FUNC(glCompressedMultiTexSubImage1DEXT) \
+    USE_GL_FUNC(glCompressedMultiTexSubImage2DEXT) \
+    USE_GL_FUNC(glCompressedMultiTexSubImage3DEXT) \
+    USE_GL_FUNC(glCompressedTexImage1D) \
+    USE_GL_FUNC(glCompressedTexImage1DARB) \
+    USE_GL_FUNC(glCompressedTexImage2D) \
+    USE_GL_FUNC(glCompressedTexImage2DARB) \
+    USE_GL_FUNC(glCompressedTexImage3D) \
+    USE_GL_FUNC(glCompressedTexImage3DARB) \
+    USE_GL_FUNC(glCompressedTexSubImage1D) \
+    USE_GL_FUNC(glCompressedTexSubImage1DARB) \
+    USE_GL_FUNC(glCompressedTexSubImage2D) \
+    USE_GL_FUNC(glCompressedTexSubImage2DARB) \
+    USE_GL_FUNC(glCompressedTexSubImage3D) \
+    USE_GL_FUNC(glCompressedTexSubImage3DARB) \
+    USE_GL_FUNC(glCompressedTextureImage1DEXT) \
+    USE_GL_FUNC(glCompressedTextureImage2DEXT) \
+    USE_GL_FUNC(glCompressedTextureImage3DEXT) \
+    USE_GL_FUNC(glCompressedTextureSubImage1D) \
+    USE_GL_FUNC(glCompressedTextureSubImage1DEXT) \
+    USE_GL_FUNC(glCompressedTextureSubImage2D) \
+    USE_GL_FUNC(glCompressedTextureSubImage2DEXT) \
+    USE_GL_FUNC(glCompressedTextureSubImage3D) \
+    USE_GL_FUNC(glCompressedTextureSubImage3DEXT) \
+    USE_GL_FUNC(glConservativeRasterParameterfNV) \
+    USE_GL_FUNC(glConservativeRasterParameteriNV) \
+    USE_GL_FUNC(glConvolutionFilter1D) \
+    USE_GL_FUNC(glConvolutionFilter1DEXT) \
+    USE_GL_FUNC(glConvolutionFilter2D) \
+    USE_GL_FUNC(glConvolutionFilter2DEXT) \
+    USE_GL_FUNC(glConvolutionParameterf) \
+    USE_GL_FUNC(glConvolutionParameterfEXT) \
+    USE_GL_FUNC(glConvolutionParameterfv) \
+    USE_GL_FUNC(glConvolutionParameterfvEXT) \
+    USE_GL_FUNC(glConvolutionParameteri) \
+    USE_GL_FUNC(glConvolutionParameteriEXT) \
+    USE_GL_FUNC(glConvolutionParameteriv) \
+    USE_GL_FUNC(glConvolutionParameterivEXT) \
+    USE_GL_FUNC(glConvolutionParameterxOES) \
+    USE_GL_FUNC(glConvolutionParameterxvOES) \
+    USE_GL_FUNC(glCopyBufferSubData) \
+    USE_GL_FUNC(glCopyColorSubTable) \
+    USE_GL_FUNC(glCopyColorSubTableEXT) \
+    USE_GL_FUNC(glCopyColorTable) \
+    USE_GL_FUNC(glCopyColorTableSGI) \
+    USE_GL_FUNC(glCopyConvolutionFilter1D) \
+    USE_GL_FUNC(glCopyConvolutionFilter1DEXT) \
+    USE_GL_FUNC(glCopyConvolutionFilter2D) \
+    USE_GL_FUNC(glCopyConvolutionFilter2DEXT) \
+    USE_GL_FUNC(glCopyImageSubData) \
+    USE_GL_FUNC(glCopyImageSubDataNV) \
+    USE_GL_FUNC(glCopyMultiTexImage1DEXT) \
+    USE_GL_FUNC(glCopyMultiTexImage2DEXT) \
+    USE_GL_FUNC(glCopyMultiTexSubImage1DEXT) \
+    USE_GL_FUNC(glCopyMultiTexSubImage2DEXT) \
+    USE_GL_FUNC(glCopyMultiTexSubImage3DEXT) \
+    USE_GL_FUNC(glCopyNamedBufferSubData) \
+    USE_GL_FUNC(glCopyPathNV) \
+    USE_GL_FUNC(glCopyTexImage1DEXT) \
+    USE_GL_FUNC(glCopyTexImage2DEXT) \
+    USE_GL_FUNC(glCopyTexSubImage1DEXT) \
+    USE_GL_FUNC(glCopyTexSubImage2DEXT) \
+    USE_GL_FUNC(glCopyTexSubImage3D) \
+    USE_GL_FUNC(glCopyTexSubImage3DEXT) \
+    USE_GL_FUNC(glCopyTextureImage1DEXT) \
+    USE_GL_FUNC(glCopyTextureImage2DEXT) \
+    USE_GL_FUNC(glCopyTextureSubImage1D) \
+    USE_GL_FUNC(glCopyTextureSubImage1DEXT) \
+    USE_GL_FUNC(glCopyTextureSubImage2D) \
+    USE_GL_FUNC(glCopyTextureSubImage2DEXT) \
+    USE_GL_FUNC(glCopyTextureSubImage3D) \
+    USE_GL_FUNC(glCopyTextureSubImage3DEXT) \
+    USE_GL_FUNC(glCoverFillPathInstancedNV) \
+    USE_GL_FUNC(glCoverFillPathNV) \
+    USE_GL_FUNC(glCoverStrokePathInstancedNV) \
+    USE_GL_FUNC(glCoverStrokePathNV) \
+    USE_GL_FUNC(glCoverageModulationNV) \
+    USE_GL_FUNC(glCoverageModulationTableNV) \
+    USE_GL_FUNC(glCreateBuffers) \
+    USE_GL_FUNC(glCreateCommandListsNV) \
+    USE_GL_FUNC(glCreateFramebuffers) \
+    USE_GL_FUNC(glCreateMemoryObjectsEXT) \
+    USE_GL_FUNC(glCreatePerfQueryINTEL) \
+    USE_GL_FUNC(glCreateProgram) \
+    USE_GL_FUNC(glCreateProgramObjectARB) \
+    USE_GL_FUNC(glCreateProgramPipelines) \
+    USE_GL_FUNC(glCreateProgressFenceNVX) \
+    USE_GL_FUNC(glCreateQueries) \
+    USE_GL_FUNC(glCreateRenderbuffers) \
+    USE_GL_FUNC(glCreateSamplers) \
+    USE_GL_FUNC(glCreateShader) \
+    USE_GL_FUNC(glCreateShaderObjectARB) \
+    USE_GL_FUNC(glCreateShaderProgramEXT) \
+    USE_GL_FUNC(glCreateShaderProgramv) \
+    USE_GL_FUNC(glCreateStatesNV) \
+    USE_GL_FUNC(glCreateSyncFromCLeventARB) \
+    USE_GL_FUNC(glCreateTextures) \
+    USE_GL_FUNC(glCreateTransformFeedbacks) \
+    USE_GL_FUNC(glCreateVertexArrays) \
+    USE_GL_FUNC(glCullParameterdvEXT) \
+    USE_GL_FUNC(glCullParameterfvEXT) \
+    USE_GL_FUNC(glCurrentPaletteMatrixARB) \
+    USE_GL_FUNC(glDebugMessageCallback) \
+    USE_GL_FUNC(glDebugMessageCallbackAMD) \
+    USE_GL_FUNC(glDebugMessageCallbackARB) \
+    USE_GL_FUNC(glDebugMessageControl) \
+    USE_GL_FUNC(glDebugMessageControlARB) \
+    USE_GL_FUNC(glDebugMessageEnableAMD) \
+    USE_GL_FUNC(glDebugMessageInsert) \
+    USE_GL_FUNC(glDebugMessageInsertAMD) \
+    USE_GL_FUNC(glDebugMessageInsertARB) \
+    USE_GL_FUNC(glDeformSGIX) \
+    USE_GL_FUNC(glDeformationMap3dSGIX) \
+    USE_GL_FUNC(glDeformationMap3fSGIX) \
+    USE_GL_FUNC(glDeleteAsyncMarkersSGIX) \
+    USE_GL_FUNC(glDeleteBufferRegion) \
+    USE_GL_FUNC(glDeleteBuffers) \
+    USE_GL_FUNC(glDeleteBuffersARB) \
+    USE_GL_FUNC(glDeleteCommandListsNV) \
+    USE_GL_FUNC(glDeleteFencesAPPLE) \
+    USE_GL_FUNC(glDeleteFencesNV) \
+    USE_GL_FUNC(glDeleteFragmentShaderATI) \
+    USE_GL_FUNC(glDeleteFramebuffers) \
+    USE_GL_FUNC(glDeleteFramebuffersEXT) \
+    USE_GL_FUNC(glDeleteMemoryObjectsEXT) \
+    USE_GL_FUNC(glDeleteNamedStringARB) \
+    USE_GL_FUNC(glDeleteNamesAMD) \
+    USE_GL_FUNC(glDeleteObjectARB) \
+    USE_GL_FUNC(glDeleteObjectBufferATI) \
+    USE_GL_FUNC(glDeleteOcclusionQueriesNV) \
+    USE_GL_FUNC(glDeletePathsNV) \
+    USE_GL_FUNC(glDeletePerfMonitorsAMD) \
+    USE_GL_FUNC(glDeletePerfQueryINTEL) \
+    USE_GL_FUNC(glDeleteProgram) \
+    USE_GL_FUNC(glDeleteProgramPipelines) \
+    USE_GL_FUNC(glDeleteProgramsARB) \
+    USE_GL_FUNC(glDeleteProgramsNV) \
+    USE_GL_FUNC(glDeleteQueries) \
+    USE_GL_FUNC(glDeleteQueriesARB) \
+    USE_GL_FUNC(glDeleteQueryResourceTagNV) \
+    USE_GL_FUNC(glDeleteRenderbuffers) \
+    USE_GL_FUNC(glDeleteRenderbuffersEXT) \
+    USE_GL_FUNC(glDeleteSamplers) \
+    USE_GL_FUNC(glDeleteSemaphoresEXT) \
+    USE_GL_FUNC(glDeleteShader) \
+    USE_GL_FUNC(glDeleteStatesNV) \
+    USE_GL_FUNC(glDeleteSync) \
+    USE_GL_FUNC(glDeleteTexturesEXT) \
+    USE_GL_FUNC(glDeleteTransformFeedbacks) \
+    USE_GL_FUNC(glDeleteTransformFeedbacksNV) \
+    USE_GL_FUNC(glDeleteVertexArrays) \
+    USE_GL_FUNC(glDeleteVertexArraysAPPLE) \
+    USE_GL_FUNC(glDeleteVertexShaderEXT) \
+    USE_GL_FUNC(glDepthBoundsEXT) \
+    USE_GL_FUNC(glDepthBoundsdNV) \
+    USE_GL_FUNC(glDepthRangeArraydvNV) \
+    USE_GL_FUNC(glDepthRangeArrayv) \
+    USE_GL_FUNC(glDepthRangeIndexed) \
+    USE_GL_FUNC(glDepthRangeIndexeddNV) \
+    USE_GL_FUNC(glDepthRangedNV) \
+    USE_GL_FUNC(glDepthRangef) \
+    USE_GL_FUNC(glDepthRangefOES) \
+    USE_GL_FUNC(glDepthRangexOES) \
+    USE_GL_FUNC(glDetachObjectARB) \
+    USE_GL_FUNC(glDetachShader) \
+    USE_GL_FUNC(glDetailTexFuncSGIS) \
+    USE_GL_FUNC(glDisableClientStateIndexedEXT) \
+    USE_GL_FUNC(glDisableClientStateiEXT) \
+    USE_GL_FUNC(glDisableIndexedEXT) \
+    USE_GL_FUNC(glDisableVariantClientStateEXT) \
+    USE_GL_FUNC(glDisableVertexArrayAttrib) \
+    USE_GL_FUNC(glDisableVertexArrayAttribEXT) \
+    USE_GL_FUNC(glDisableVertexArrayEXT) \
+    USE_GL_FUNC(glDisableVertexAttribAPPLE) \
+    USE_GL_FUNC(glDisableVertexAttribArray) \
+    USE_GL_FUNC(glDisableVertexAttribArrayARB) \
+    USE_GL_FUNC(glDisablei) \
+    USE_GL_FUNC(glDispatchCompute) \
+    USE_GL_FUNC(glDispatchComputeGroupSizeARB) \
+    USE_GL_FUNC(glDispatchComputeIndirect) \
+    USE_GL_FUNC(glDrawArraysEXT) \
+    USE_GL_FUNC(glDrawArraysIndirect) \
+    USE_GL_FUNC(glDrawArraysInstanced) \
+    USE_GL_FUNC(glDrawArraysInstancedARB) \
+    USE_GL_FUNC(glDrawArraysInstancedBaseInstance) \
+    USE_GL_FUNC(glDrawArraysInstancedEXT) \
+    USE_GL_FUNC(glDrawBufferRegion) \
+    USE_GL_FUNC(glDrawBuffers) \
+    USE_GL_FUNC(glDrawBuffersARB) \
+    USE_GL_FUNC(glDrawBuffersATI) \
+    USE_GL_FUNC(glDrawCommandsAddressNV) \
+    USE_GL_FUNC(glDrawCommandsNV) \
+    USE_GL_FUNC(glDrawCommandsStatesAddressNV) \
+    USE_GL_FUNC(glDrawCommandsStatesNV) \
+    USE_GL_FUNC(glDrawElementArrayAPPLE) \
+    USE_GL_FUNC(glDrawElementArrayATI) \
+    USE_GL_FUNC(glDrawElementsBaseVertex) \
+    USE_GL_FUNC(glDrawElementsIndirect) \
+    USE_GL_FUNC(glDrawElementsInstanced) \
+    USE_GL_FUNC(glDrawElementsInstancedARB) \
+    USE_GL_FUNC(glDrawElementsInstancedBaseInstance) \
+    USE_GL_FUNC(glDrawElementsInstancedBaseVertex) \
+    USE_GL_FUNC(glDrawElementsInstancedBaseVertexBaseInstance) \
+    USE_GL_FUNC(glDrawElementsInstancedEXT) \
+    USE_GL_FUNC(glDrawMeshArraysSUN) \
+    USE_GL_FUNC(glDrawMeshTasksIndirectNV) \
+    USE_GL_FUNC(glDrawMeshTasksNV) \
+    USE_GL_FUNC(glDrawRangeElementArrayAPPLE) \
+    USE_GL_FUNC(glDrawRangeElementArrayATI) \
+    USE_GL_FUNC(glDrawRangeElements) \
+    USE_GL_FUNC(glDrawRangeElementsBaseVertex) \
+    USE_GL_FUNC(glDrawRangeElementsEXT) \
+    USE_GL_FUNC(glDrawTextureNV) \
+    USE_GL_FUNC(glDrawTransformFeedback) \
+    USE_GL_FUNC(glDrawTransformFeedbackInstanced) \
+    USE_GL_FUNC(glDrawTransformFeedbackNV) \
+    USE_GL_FUNC(glDrawTransformFeedbackStream) \
+    USE_GL_FUNC(glDrawTransformFeedbackStreamInstanced) \
+    USE_GL_FUNC(glDrawVkImageNV) \
+    USE_GL_FUNC(glEGLImageTargetTexStorageEXT) \
+    USE_GL_FUNC(glEGLImageTargetTextureStorageEXT) \
+    USE_GL_FUNC(glEdgeFlagFormatNV) \
+    USE_GL_FUNC(glEdgeFlagPointerEXT) \
+    USE_GL_FUNC(glEdgeFlagPointerListIBM) \
+    USE_GL_FUNC(glElementPointerAPPLE) \
+    USE_GL_FUNC(glElementPointerATI) \
+    USE_GL_FUNC(glEnableClientStateIndexedEXT) \
+    USE_GL_FUNC(glEnableClientStateiEXT) \
+    USE_GL_FUNC(glEnableIndexedEXT) \
+    USE_GL_FUNC(glEnableVariantClientStateEXT) \
+    USE_GL_FUNC(glEnableVertexArrayAttrib) \
+    USE_GL_FUNC(glEnableVertexArrayAttribEXT) \
+    USE_GL_FUNC(glEnableVertexArrayEXT) \
+    USE_GL_FUNC(glEnableVertexAttribAPPLE) \
+    USE_GL_FUNC(glEnableVertexAttribArray) \
+    USE_GL_FUNC(glEnableVertexAttribArrayARB) \
+    USE_GL_FUNC(glEnablei) \
+    USE_GL_FUNC(glEndConditionalRender) \
+    USE_GL_FUNC(glEndConditionalRenderNV) \
+    USE_GL_FUNC(glEndConditionalRenderNVX) \
+    USE_GL_FUNC(glEndFragmentShaderATI) \
+    USE_GL_FUNC(glEndOcclusionQueryNV) \
+    USE_GL_FUNC(glEndPerfMonitorAMD) \
+    USE_GL_FUNC(glEndPerfQueryINTEL) \
+    USE_GL_FUNC(glEndQuery) \
+    USE_GL_FUNC(glEndQueryARB) \
+    USE_GL_FUNC(glEndQueryIndexed) \
+    USE_GL_FUNC(glEndTransformFeedback) \
+    USE_GL_FUNC(glEndTransformFeedbackEXT) \
+    USE_GL_FUNC(glEndTransformFeedbackNV) \
+    USE_GL_FUNC(glEndVertexShaderEXT) \
+    USE_GL_FUNC(glEndVideoCaptureNV) \
+    USE_GL_FUNC(glEvalCoord1xOES) \
+    USE_GL_FUNC(glEvalCoord1xvOES) \
+    USE_GL_FUNC(glEvalCoord2xOES) \
+    USE_GL_FUNC(glEvalCoord2xvOES) \
+    USE_GL_FUNC(glEvalMapsNV) \
+    USE_GL_FUNC(glEvaluateDepthValuesARB) \
+    USE_GL_FUNC(glExecuteProgramNV) \
+    USE_GL_FUNC(glExtractComponentEXT) \
+    USE_GL_FUNC(glFeedbackBufferxOES) \
+    USE_GL_FUNC(glFenceSync) \
+    USE_GL_FUNC(glFinalCombinerInputNV) \
+    USE_GL_FUNC(glFinishAsyncSGIX) \
+    USE_GL_FUNC(glFinishFenceAPPLE) \
+    USE_GL_FUNC(glFinishFenceNV) \
+    USE_GL_FUNC(glFinishObjectAPPLE) \
+    USE_GL_FUNC(glFinishTextureSUNX) \
+    USE_GL_FUNC(glFlushMappedBufferRange) \
+    USE_GL_FUNC(glFlushMappedBufferRangeAPPLE) \
+    USE_GL_FUNC(glFlushMappedNamedBufferRange) \
+    USE_GL_FUNC(glFlushMappedNamedBufferRangeEXT) \
+    USE_GL_FUNC(glFlushPixelDataRangeNV) \
+    USE_GL_FUNC(glFlushRasterSGIX) \
+    USE_GL_FUNC(glFlushStaticDataIBM) \
+    USE_GL_FUNC(glFlushVertexArrayRangeAPPLE) \
+    USE_GL_FUNC(glFlushVertexArrayRangeNV) \
+    USE_GL_FUNC(glFogCoordFormatNV) \
+    USE_GL_FUNC(glFogCoordPointer) \
+    USE_GL_FUNC(glFogCoordPointerEXT) \
+    USE_GL_FUNC(glFogCoordPointerListIBM) \
+    USE_GL_FUNC(glFogCoordd) \
+    USE_GL_FUNC(glFogCoorddEXT) \
+    USE_GL_FUNC(glFogCoorddv) \
+    USE_GL_FUNC(glFogCoorddvEXT) \
+    USE_GL_FUNC(glFogCoordf) \
+    USE_GL_FUNC(glFogCoordfEXT) \
+    USE_GL_FUNC(glFogCoordfv) \
+    USE_GL_FUNC(glFogCoordfvEXT) \
+    USE_GL_FUNC(glFogCoordhNV) \
+    USE_GL_FUNC(glFogCoordhvNV) \
+    USE_GL_FUNC(glFogFuncSGIS) \
+    USE_GL_FUNC(glFogxOES) \
+    USE_GL_FUNC(glFogxvOES) \
+    USE_GL_FUNC(glFragmentColorMaterialSGIX) \
+    USE_GL_FUNC(glFragmentCoverageColorNV) \
+    USE_GL_FUNC(glFragmentLightModelfSGIX) \
+    USE_GL_FUNC(glFragmentLightModelfvSGIX) \
+    USE_GL_FUNC(glFragmentLightModeliSGIX) \
+    USE_GL_FUNC(glFragmentLightModelivSGIX) \
+    USE_GL_FUNC(glFragmentLightfSGIX) \
+    USE_GL_FUNC(glFragmentLightfvSGIX) \
+    USE_GL_FUNC(glFragmentLightiSGIX) \
+    USE_GL_FUNC(glFragmentLightivSGIX) \
+    USE_GL_FUNC(glFragmentMaterialfSGIX) \
+    USE_GL_FUNC(glFragmentMaterialfvSGIX) \
+    USE_GL_FUNC(glFragmentMaterialiSGIX) \
+    USE_GL_FUNC(glFragmentMaterialivSGIX) \
+    USE_GL_FUNC(glFrameTerminatorGREMEDY) \
+    USE_GL_FUNC(glFrameZoomSGIX) \
+    USE_GL_FUNC(glFramebufferDrawBufferEXT) \
+    USE_GL_FUNC(glFramebufferDrawBuffersEXT) \
+    USE_GL_FUNC(glFramebufferFetchBarrierEXT) \
+    USE_GL_FUNC(glFramebufferParameteri) \
+    USE_GL_FUNC(glFramebufferParameteriMESA) \
+    USE_GL_FUNC(glFramebufferReadBufferEXT) \
+    USE_GL_FUNC(glFramebufferRenderbuffer) \
+    USE_GL_FUNC(glFramebufferRenderbufferEXT) \
+    USE_GL_FUNC(glFramebufferSampleLocationsfvARB) \
+    USE_GL_FUNC(glFramebufferSampleLocationsfvNV) \
+    USE_GL_FUNC(glFramebufferSamplePositionsfvAMD) \
+    USE_GL_FUNC(glFramebufferTexture) \
+    USE_GL_FUNC(glFramebufferTexture1D) \
+    USE_GL_FUNC(glFramebufferTexture1DEXT) \
+    USE_GL_FUNC(glFramebufferTexture2D) \
+    USE_GL_FUNC(glFramebufferTexture2DEXT) \
+    USE_GL_FUNC(glFramebufferTexture3D) \
+    USE_GL_FUNC(glFramebufferTexture3DEXT) \
+    USE_GL_FUNC(glFramebufferTextureARB) \
+    USE_GL_FUNC(glFramebufferTextureEXT) \
+    USE_GL_FUNC(glFramebufferTextureFaceARB) \
+    USE_GL_FUNC(glFramebufferTextureFaceEXT) \
+    USE_GL_FUNC(glFramebufferTextureLayer) \
+    USE_GL_FUNC(glFramebufferTextureLayerARB) \
+    USE_GL_FUNC(glFramebufferTextureLayerEXT) \
+    USE_GL_FUNC(glFramebufferTextureMultiviewOVR) \
+    USE_GL_FUNC(glFreeObjectBufferATI) \
+    USE_GL_FUNC(glFrustumfOES) \
+    USE_GL_FUNC(glFrustumxOES) \
+    USE_GL_FUNC(glGenAsyncMarkersSGIX) \
+    USE_GL_FUNC(glGenBuffers) \
+    USE_GL_FUNC(glGenBuffersARB) \
+    USE_GL_FUNC(glGenFencesAPPLE) \
+    USE_GL_FUNC(glGenFencesNV) \
+    USE_GL_FUNC(glGenFragmentShadersATI) \
+    USE_GL_FUNC(glGenFramebuffers) \
+    USE_GL_FUNC(glGenFramebuffersEXT) \
+    USE_GL_FUNC(glGenNamesAMD) \
+    USE_GL_FUNC(glGenOcclusionQueriesNV) \
+    USE_GL_FUNC(glGenPathsNV) \
+    USE_GL_FUNC(glGenPerfMonitorsAMD) \
+    USE_GL_FUNC(glGenProgramPipelines) \
+    USE_GL_FUNC(glGenProgramsARB) \
+    USE_GL_FUNC(glGenProgramsNV) \
+    USE_GL_FUNC(glGenQueries) \
+    USE_GL_FUNC(glGenQueriesARB) \
+    USE_GL_FUNC(glGenQueryResourceTagNV) \
+    USE_GL_FUNC(glGenRenderbuffers) \
+    USE_GL_FUNC(glGenRenderbuffersEXT) \
+    USE_GL_FUNC(glGenSamplers) \
+    USE_GL_FUNC(glGenSemaphoresEXT) \
+    USE_GL_FUNC(glGenSymbolsEXT) \
+    USE_GL_FUNC(glGenTexturesEXT) \
+    USE_GL_FUNC(glGenTransformFeedbacks) \
+    USE_GL_FUNC(glGenTransformFeedbacksNV) \
+    USE_GL_FUNC(glGenVertexArrays) \
+    USE_GL_FUNC(glGenVertexArraysAPPLE) \
+    USE_GL_FUNC(glGenVertexShadersEXT) \
+    USE_GL_FUNC(glGenerateMipmap) \
+    USE_GL_FUNC(glGenerateMipmapEXT) \
+    USE_GL_FUNC(glGenerateMultiTexMipmapEXT) \
+    USE_GL_FUNC(glGenerateTextureMipmap) \
+    USE_GL_FUNC(glGenerateTextureMipmapEXT) \
+    USE_GL_FUNC(glGetActiveAtomicCounterBufferiv) \
+    USE_GL_FUNC(glGetActiveAttrib) \
+    USE_GL_FUNC(glGetActiveAttribARB) \
+    USE_GL_FUNC(glGetActiveSubroutineName) \
+    USE_GL_FUNC(glGetActiveSubroutineUniformName) \
+    USE_GL_FUNC(glGetActiveSubroutineUniformiv) \
+    USE_GL_FUNC(glGetActiveUniform) \
+    USE_GL_FUNC(glGetActiveUniformARB) \
+    USE_GL_FUNC(glGetActiveUniformBlockName) \
+    USE_GL_FUNC(glGetActiveUniformBlockiv) \
+    USE_GL_FUNC(glGetActiveUniformName) \
+    USE_GL_FUNC(glGetActiveUniformsiv) \
+    USE_GL_FUNC(glGetActiveVaryingNV) \
+    USE_GL_FUNC(glGetArrayObjectfvATI) \
+    USE_GL_FUNC(glGetArrayObjectivATI) \
+    USE_GL_FUNC(glGetAttachedObjectsARB) \
+    USE_GL_FUNC(glGetAttachedShaders) \
+    USE_GL_FUNC(glGetAttribLocation) \
+    USE_GL_FUNC(glGetAttribLocationARB) \
+    USE_GL_FUNC(glGetBooleanIndexedvEXT) \
+    USE_GL_FUNC(glGetBooleani_v) \
+    USE_GL_FUNC(glGetBufferParameteri64v) \
+    USE_GL_FUNC(glGetBufferParameteriv) \
+    USE_GL_FUNC(glGetBufferParameterivARB) \
+    USE_GL_FUNC(glGetBufferParameterui64vNV) \
+    USE_GL_FUNC(glGetBufferPointerv) \
+    USE_GL_FUNC(glGetBufferPointervARB) \
+    USE_GL_FUNC(glGetBufferSubData) \
+    USE_GL_FUNC(glGetBufferSubDataARB) \
+    USE_GL_FUNC(glGetClipPlanefOES) \
+    USE_GL_FUNC(glGetClipPlanexOES) \
+    USE_GL_FUNC(glGetColorTable) \
+    USE_GL_FUNC(glGetColorTableEXT) \
+    USE_GL_FUNC(glGetColorTableParameterfv) \
+    USE_GL_FUNC(glGetColorTableParameterfvEXT) \
+    USE_GL_FUNC(glGetColorTableParameterfvSGI) \
+    USE_GL_FUNC(glGetColorTableParameteriv) \
+    USE_GL_FUNC(glGetColorTableParameterivEXT) \
+    USE_GL_FUNC(glGetColorTableParameterivSGI) \
+    USE_GL_FUNC(glGetColorTableSGI) \
+    USE_GL_FUNC(glGetCombinerInputParameterfvNV) \
+    USE_GL_FUNC(glGetCombinerInputParameterivNV) \
+    USE_GL_FUNC(glGetCombinerOutputParameterfvNV) \
+    USE_GL_FUNC(glGetCombinerOutputParameterivNV) \
+    USE_GL_FUNC(glGetCombinerStageParameterfvNV) \
+    USE_GL_FUNC(glGetCommandHeaderNV) \
+    USE_GL_FUNC(glGetCompressedMultiTexImageEXT) \
+    USE_GL_FUNC(glGetCompressedTexImage) \
+    USE_GL_FUNC(glGetCompressedTexImageARB) \
+    USE_GL_FUNC(glGetCompressedTextureImage) \
+    USE_GL_FUNC(glGetCompressedTextureImageEXT) \
+    USE_GL_FUNC(glGetCompressedTextureSubImage) \
+    USE_GL_FUNC(glGetConvolutionFilter) \
+    USE_GL_FUNC(glGetConvolutionFilterEXT) \
+    USE_GL_FUNC(glGetConvolutionParameterfv) \
+    USE_GL_FUNC(glGetConvolutionParameterfvEXT) \
+    USE_GL_FUNC(glGetConvolutionParameteriv) \
+    USE_GL_FUNC(glGetConvolutionParameterivEXT) \
+    USE_GL_FUNC(glGetConvolutionParameterxvOES) \
+    USE_GL_FUNC(glGetCoverageModulationTableNV) \
+    USE_GL_FUNC(glGetDebugMessageLog) \
+    USE_GL_FUNC(glGetDebugMessageLogAMD) \
+    USE_GL_FUNC(glGetDebugMessageLogARB) \
+    USE_GL_FUNC(glGetDetailTexFuncSGIS) \
+    USE_GL_FUNC(glGetDoubleIndexedvEXT) \
+    USE_GL_FUNC(glGetDoublei_v) \
+    USE_GL_FUNC(glGetDoublei_vEXT) \
+    USE_GL_FUNC(glGetFenceivNV) \
+    USE_GL_FUNC(glGetFinalCombinerInputParameterfvNV) \
+    USE_GL_FUNC(glGetFinalCombinerInputParameterivNV) \
+    USE_GL_FUNC(glGetFirstPerfQueryIdINTEL) \
+    USE_GL_FUNC(glGetFixedvOES) \
+    USE_GL_FUNC(glGetFloatIndexedvEXT) \
+    USE_GL_FUNC(glGetFloati_v) \
+    USE_GL_FUNC(glGetFloati_vEXT) \
+    USE_GL_FUNC(glGetFogFuncSGIS) \
+    USE_GL_FUNC(glGetFragDataIndex) \
+    USE_GL_FUNC(glGetFragDataLocation) \
+    USE_GL_FUNC(glGetFragDataLocationEXT) \
+    USE_GL_FUNC(glGetFragmentLightfvSGIX) \
+    USE_GL_FUNC(glGetFragmentLightivSGIX) \
+    USE_GL_FUNC(glGetFragmentMaterialfvSGIX) \
+    USE_GL_FUNC(glGetFragmentMaterialivSGIX) \
+    USE_GL_FUNC(glGetFramebufferAttachmentParameteriv) \
+    USE_GL_FUNC(glGetFramebufferAttachmentParameterivEXT) \
+    USE_GL_FUNC(glGetFramebufferParameterfvAMD) \
+    USE_GL_FUNC(glGetFramebufferParameteriv) \
+    USE_GL_FUNC(glGetFramebufferParameterivEXT) \
+    USE_GL_FUNC(glGetFramebufferParameterivMESA) \
+    USE_GL_FUNC(glGetGraphicsResetStatus) \
+    USE_GL_FUNC(glGetGraphicsResetStatusARB) \
+    USE_GL_FUNC(glGetHandleARB) \
+    USE_GL_FUNC(glGetHistogram) \
+    USE_GL_FUNC(glGetHistogramEXT) \
+    USE_GL_FUNC(glGetHistogramParameterfv) \
+    USE_GL_FUNC(glGetHistogramParameterfvEXT) \
+    USE_GL_FUNC(glGetHistogramParameteriv) \
+    USE_GL_FUNC(glGetHistogramParameterivEXT) \
+    USE_GL_FUNC(glGetHistogramParameterxvOES) \
+    USE_GL_FUNC(glGetImageHandleARB) \
+    USE_GL_FUNC(glGetImageHandleNV) \
+    USE_GL_FUNC(glGetImageTransformParameterfvHP) \
+    USE_GL_FUNC(glGetImageTransformParameterivHP) \
+    USE_GL_FUNC(glGetInfoLogARB) \
+    USE_GL_FUNC(glGetInstrumentsSGIX) \
+    USE_GL_FUNC(glGetInteger64i_v) \
+    USE_GL_FUNC(glGetInteger64v) \
+    USE_GL_FUNC(glGetIntegerIndexedvEXT) \
+    USE_GL_FUNC(glGetIntegeri_v) \
+    USE_GL_FUNC(glGetIntegerui64i_vNV) \
+    USE_GL_FUNC(glGetIntegerui64vNV) \
+    USE_GL_FUNC(glGetInternalformatSampleivNV) \
+    USE_GL_FUNC(glGetInternalformati64v) \
+    USE_GL_FUNC(glGetInternalformativ) \
+    USE_GL_FUNC(glGetInvariantBooleanvEXT) \
+    USE_GL_FUNC(glGetInvariantFloatvEXT) \
+    USE_GL_FUNC(glGetInvariantIntegervEXT) \
+    USE_GL_FUNC(glGetLightxOES) \
+    USE_GL_FUNC(glGetListParameterfvSGIX) \
+    USE_GL_FUNC(glGetListParameterivSGIX) \
+    USE_GL_FUNC(glGetLocalConstantBooleanvEXT) \
+    USE_GL_FUNC(glGetLocalConstantFloatvEXT) \
+    USE_GL_FUNC(glGetLocalConstantIntegervEXT) \
+    USE_GL_FUNC(glGetMapAttribParameterfvNV) \
+    USE_GL_FUNC(glGetMapAttribParameterivNV) \
+    USE_GL_FUNC(glGetMapControlPointsNV) \
+    USE_GL_FUNC(glGetMapParameterfvNV) \
+    USE_GL_FUNC(glGetMapParameterivNV) \
+    USE_GL_FUNC(glGetMapxvOES) \
+    USE_GL_FUNC(glGetMaterialxOES) \
+    USE_GL_FUNC(glGetMemoryObjectDetachedResourcesuivNV) \
+    USE_GL_FUNC(glGetMemoryObjectParameterivEXT) \
+    USE_GL_FUNC(glGetMinmax) \
+    USE_GL_FUNC(glGetMinmaxEXT) \
+    USE_GL_FUNC(glGetMinmaxParameterfv) \
+    USE_GL_FUNC(glGetMinmaxParameterfvEXT) \
+    USE_GL_FUNC(glGetMinmaxParameteriv) \
+    USE_GL_FUNC(glGetMinmaxParameterivEXT) \
+    USE_GL_FUNC(glGetMultiTexEnvfvEXT) \
+    USE_GL_FUNC(glGetMultiTexEnvivEXT) \
+    USE_GL_FUNC(glGetMultiTexGendvEXT) \
+    USE_GL_FUNC(glGetMultiTexGenfvEXT) \
+    USE_GL_FUNC(glGetMultiTexGenivEXT) \
+    USE_GL_FUNC(glGetMultiTexImageEXT) \
+    USE_GL_FUNC(glGetMultiTexLevelParameterfvEXT) \
+    USE_GL_FUNC(glGetMultiTexLevelParameterivEXT) \
+    USE_GL_FUNC(glGetMultiTexParameterIivEXT) \
+    USE_GL_FUNC(glGetMultiTexParameterIuivEXT) \
+    USE_GL_FUNC(glGetMultiTexParameterfvEXT) \
+    USE_GL_FUNC(glGetMultiTexParameterivEXT) \
+    USE_GL_FUNC(glGetMultisamplefv) \
+    USE_GL_FUNC(glGetMultisamplefvNV) \
+    USE_GL_FUNC(glGetNamedBufferParameteri64v) \
+    USE_GL_FUNC(glGetNamedBufferParameteriv) \
+    USE_GL_FUNC(glGetNamedBufferParameterivEXT) \
+    USE_GL_FUNC(glGetNamedBufferParameterui64vNV) \
+    USE_GL_FUNC(glGetNamedBufferPointerv) \
+    USE_GL_FUNC(glGetNamedBufferPointervEXT) \
+    USE_GL_FUNC(glGetNamedBufferSubData) \
+    USE_GL_FUNC(glGetNamedBufferSubDataEXT) \
+    USE_GL_FUNC(glGetNamedFramebufferAttachmentParameteriv) \
+    USE_GL_FUNC(glGetNamedFramebufferAttachmentParameterivEXT) \
+    USE_GL_FUNC(glGetNamedFramebufferParameterfvAMD) \
+    USE_GL_FUNC(glGetNamedFramebufferParameteriv) \
+    USE_GL_FUNC(glGetNamedFramebufferParameterivEXT) \
+    USE_GL_FUNC(glGetNamedProgramLocalParameterIivEXT) \
+    USE_GL_FUNC(glGetNamedProgramLocalParameterIuivEXT) \
+    USE_GL_FUNC(glGetNamedProgramLocalParameterdvEXT) \
+    USE_GL_FUNC(glGetNamedProgramLocalParameterfvEXT) \
+    USE_GL_FUNC(glGetNamedProgramStringEXT) \
+    USE_GL_FUNC(glGetNamedProgramivEXT) \
+    USE_GL_FUNC(glGetNamedRenderbufferParameteriv) \
+    USE_GL_FUNC(glGetNamedRenderbufferParameterivEXT) \
+    USE_GL_FUNC(glGetNamedStringARB) \
+    USE_GL_FUNC(glGetNamedStringivARB) \
+    USE_GL_FUNC(glGetNextPerfQueryIdINTEL) \
+    USE_GL_FUNC(glGetObjectBufferfvATI) \
+    USE_GL_FUNC(glGetObjectBufferivATI) \
+    USE_GL_FUNC(glGetObjectLabel) \
+    USE_GL_FUNC(glGetObjectLabelEXT) \
+    USE_GL_FUNC(glGetObjectParameterfvARB) \
+    USE_GL_FUNC(glGetObjectParameterivAPPLE) \
+    USE_GL_FUNC(glGetObjectParameterivARB) \
+    USE_GL_FUNC(glGetObjectPtrLabel) \
+    USE_GL_FUNC(glGetOcclusionQueryivNV) \
+    USE_GL_FUNC(glGetOcclusionQueryuivNV) \
+    USE_GL_FUNC(glGetPathColorGenfvNV) \
+    USE_GL_FUNC(glGetPathColorGenivNV) \
+    USE_GL_FUNC(glGetPathCommandsNV) \
+    USE_GL_FUNC(glGetPathCoordsNV) \
+    USE_GL_FUNC(glGetPathDashArrayNV) \
+    USE_GL_FUNC(glGetPathLengthNV) \
+    USE_GL_FUNC(glGetPathMetricRangeNV) \
+    USE_GL_FUNC(glGetPathMetricsNV) \
+    USE_GL_FUNC(glGetPathParameterfvNV) \
+    USE_GL_FUNC(glGetPathParameterivNV) \
+    USE_GL_FUNC(glGetPathSpacingNV) \
+    USE_GL_FUNC(glGetPathTexGenfvNV) \
+    USE_GL_FUNC(glGetPathTexGenivNV) \
+    USE_GL_FUNC(glGetPerfCounterInfoINTEL) \
+    USE_GL_FUNC(glGetPerfMonitorCounterDataAMD) \
+    USE_GL_FUNC(glGetPerfMonitorCounterInfoAMD) \
+    USE_GL_FUNC(glGetPerfMonitorCounterStringAMD) \
+    USE_GL_FUNC(glGetPerfMonitorCountersAMD) \
+    USE_GL_FUNC(glGetPerfMonitorGroupStringAMD) \
+    USE_GL_FUNC(glGetPerfMonitorGroupsAMD) \
+    USE_GL_FUNC(glGetPerfQueryDataINTEL) \
+    USE_GL_FUNC(glGetPerfQueryIdByNameINTEL) \
+    USE_GL_FUNC(glGetPerfQueryInfoINTEL) \
+    USE_GL_FUNC(glGetPixelMapxv) \
+    USE_GL_FUNC(glGetPixelTexGenParameterfvSGIS) \
+    USE_GL_FUNC(glGetPixelTexGenParameterivSGIS) \
+    USE_GL_FUNC(glGetPixelTransformParameterfvEXT) \
+    USE_GL_FUNC(glGetPixelTransformParameterivEXT) \
+    USE_GL_FUNC(glGetPointerIndexedvEXT) \
+    USE_GL_FUNC(glGetPointeri_vEXT) \
+    USE_GL_FUNC(glGetPointervEXT) \
+    USE_GL_FUNC(glGetProgramBinary) \
+    USE_GL_FUNC(glGetProgramEnvParameterIivNV) \
+    USE_GL_FUNC(glGetProgramEnvParameterIuivNV) \
+    USE_GL_FUNC(glGetProgramEnvParameterdvARB) \
+    USE_GL_FUNC(glGetProgramEnvParameterfvARB) \
+    USE_GL_FUNC(glGetProgramInfoLog) \
+    USE_GL_FUNC(glGetProgramInterfaceiv) \
+    USE_GL_FUNC(glGetProgramLocalParameterIivNV) \
+    USE_GL_FUNC(glGetProgramLocalParameterIuivNV) \
+    USE_GL_FUNC(glGetProgramLocalParameterdvARB) \
+    USE_GL_FUNC(glGetProgramLocalParameterfvARB) \
+    USE_GL_FUNC(glGetProgramNamedParameterdvNV) \
+    USE_GL_FUNC(glGetProgramNamedParameterfvNV) \
+    USE_GL_FUNC(glGetProgramParameterdvNV) \
+    USE_GL_FUNC(glGetProgramParameterfvNV) \
+    USE_GL_FUNC(glGetProgramPipelineInfoLog) \
+    USE_GL_FUNC(glGetProgramPipelineiv) \
+    USE_GL_FUNC(glGetProgramResourceIndex) \
+    USE_GL_FUNC(glGetProgramResourceLocation) \
+    USE_GL_FUNC(glGetProgramResourceLocationIndex) \
+    USE_GL_FUNC(glGetProgramResourceName) \
+    USE_GL_FUNC(glGetProgramResourcefvNV) \
+    USE_GL_FUNC(glGetProgramResourceiv) \
+    USE_GL_FUNC(glGetProgramStageiv) \
+    USE_GL_FUNC(glGetProgramStringARB) \
+    USE_GL_FUNC(glGetProgramStringNV) \
+    USE_GL_FUNC(glGetProgramSubroutineParameteruivNV) \
+    USE_GL_FUNC(glGetProgramiv) \
+    USE_GL_FUNC(glGetProgramivARB) \
+    USE_GL_FUNC(glGetProgramivNV) \
+    USE_GL_FUNC(glGetQueryBufferObjecti64v) \
+    USE_GL_FUNC(glGetQueryBufferObjectiv) \
+    USE_GL_FUNC(glGetQueryBufferObjectui64v) \
+    USE_GL_FUNC(glGetQueryBufferObjectuiv) \
+    USE_GL_FUNC(glGetQueryIndexediv) \
+    USE_GL_FUNC(glGetQueryObjecti64v) \
+    USE_GL_FUNC(glGetQueryObjecti64vEXT) \
+    USE_GL_FUNC(glGetQueryObjectiv) \
+    USE_GL_FUNC(glGetQueryObjectivARB) \
+    USE_GL_FUNC(glGetQueryObjectui64v) \
+    USE_GL_FUNC(glGetQueryObjectui64vEXT) \
+    USE_GL_FUNC(glGetQueryObjectuiv) \
+    USE_GL_FUNC(glGetQueryObjectuivARB) \
+    USE_GL_FUNC(glGetQueryiv) \
+    USE_GL_FUNC(glGetQueryivARB) \
+    USE_GL_FUNC(glGetRenderbufferParameteriv) \
+    USE_GL_FUNC(glGetRenderbufferParameterivEXT) \
+    USE_GL_FUNC(glGetSamplerParameterIiv) \
+    USE_GL_FUNC(glGetSamplerParameterIuiv) \
+    USE_GL_FUNC(glGetSamplerParameterfv) \
+    USE_GL_FUNC(glGetSamplerParameteriv) \
+    USE_GL_FUNC(glGetSemaphoreParameterui64vEXT) \
+    USE_GL_FUNC(glGetSeparableFilter) \
+    USE_GL_FUNC(glGetSeparableFilterEXT) \
+    USE_GL_FUNC(glGetShaderInfoLog) \
+    USE_GL_FUNC(glGetShaderPrecisionFormat) \
+    USE_GL_FUNC(glGetShaderSource) \
+    USE_GL_FUNC(glGetShaderSourceARB) \
+    USE_GL_FUNC(glGetShaderiv) \
+    USE_GL_FUNC(glGetShadingRateImagePaletteNV) \
+    USE_GL_FUNC(glGetShadingRateSampleLocationivNV) \
+    USE_GL_FUNC(glGetSharpenTexFuncSGIS) \
+    USE_GL_FUNC(glGetStageIndexNV) \
+    USE_GL_FUNC(glGetStringi) \
+    USE_GL_FUNC(glGetSubroutineIndex) \
+    USE_GL_FUNC(glGetSubroutineUniformLocation) \
+    USE_GL_FUNC(glGetSynciv) \
+    USE_GL_FUNC(glGetTexBumpParameterfvATI) \
+    USE_GL_FUNC(glGetTexBumpParameterivATI) \
+    USE_GL_FUNC(glGetTexEnvxvOES) \
+    USE_GL_FUNC(glGetTexFilterFuncSGIS) \
+    USE_GL_FUNC(glGetTexGenxvOES) \
+    USE_GL_FUNC(glGetTexLevelParameterxvOES) \
+    USE_GL_FUNC(glGetTexParameterIiv) \
+    USE_GL_FUNC(glGetTexParameterIivEXT) \
+    USE_GL_FUNC(glGetTexParameterIuiv) \
+    USE_GL_FUNC(glGetTexParameterIuivEXT) \
+    USE_GL_FUNC(glGetTexParameterPointervAPPLE) \
+    USE_GL_FUNC(glGetTexParameterxvOES) \
+    USE_GL_FUNC(glGetTextureHandleARB) \
+    USE_GL_FUNC(glGetTextureHandleNV) \
+    USE_GL_FUNC(glGetTextureImage) \
+    USE_GL_FUNC(glGetTextureImageEXT) \
+    USE_GL_FUNC(glGetTextureLevelParameterfv) \
+    USE_GL_FUNC(glGetTextureLevelParameterfvEXT) \
+    USE_GL_FUNC(glGetTextureLevelParameteriv) \
+    USE_GL_FUNC(glGetTextureLevelParameterivEXT) \
+    USE_GL_FUNC(glGetTextureParameterIiv) \
+    USE_GL_FUNC(glGetTextureParameterIivEXT) \
+    USE_GL_FUNC(glGetTextureParameterIuiv) \
+    USE_GL_FUNC(glGetTextureParameterIuivEXT) \
+    USE_GL_FUNC(glGetTextureParameterfv) \
+    USE_GL_FUNC(glGetTextureParameterfvEXT) \
+    USE_GL_FUNC(glGetTextureParameteriv) \
+    USE_GL_FUNC(glGetTextureParameterivEXT) \
+    USE_GL_FUNC(glGetTextureSamplerHandleARB) \
+    USE_GL_FUNC(glGetTextureSamplerHandleNV) \
+    USE_GL_FUNC(glGetTextureSubImage) \
+    USE_GL_FUNC(glGetTrackMatrixivNV) \
+    USE_GL_FUNC(glGetTransformFeedbackVarying) \
+    USE_GL_FUNC(glGetTransformFeedbackVaryingEXT) \
+    USE_GL_FUNC(glGetTransformFeedbackVaryingNV) \
+    USE_GL_FUNC(glGetTransformFeedbacki64_v) \
+    USE_GL_FUNC(glGetTransformFeedbacki_v) \
+    USE_GL_FUNC(glGetTransformFeedbackiv) \
+    USE_GL_FUNC(glGetUniformBlockIndex) \
+    USE_GL_FUNC(glGetUniformBufferSizeEXT) \
+    USE_GL_FUNC(glGetUniformIndices) \
+    USE_GL_FUNC(glGetUniformLocation) \
+    USE_GL_FUNC(glGetUniformLocationARB) \
+    USE_GL_FUNC(glGetUniformOffsetEXT) \
+    USE_GL_FUNC(glGetUniformSubroutineuiv) \
+    USE_GL_FUNC(glGetUniformdv) \
+    USE_GL_FUNC(glGetUniformfv) \
+    USE_GL_FUNC(glGetUniformfvARB) \
+    USE_GL_FUNC(glGetUniformi64vARB) \
+    USE_GL_FUNC(glGetUniformi64vNV) \
+    USE_GL_FUNC(glGetUniformiv) \
+    USE_GL_FUNC(glGetUniformivARB) \
+    USE_GL_FUNC(glGetUniformui64vARB) \
+    USE_GL_FUNC(glGetUniformui64vNV) \
+    USE_GL_FUNC(glGetUniformuiv) \
+    USE_GL_FUNC(glGetUniformuivEXT) \
+    USE_GL_FUNC(glGetUnsignedBytei_vEXT) \
+    USE_GL_FUNC(glGetUnsignedBytevEXT) \
+    USE_GL_FUNC(glGetVariantArrayObjectfvATI) \
+    USE_GL_FUNC(glGetVariantArrayObjectivATI) \
+    USE_GL_FUNC(glGetVariantBooleanvEXT) \
+    USE_GL_FUNC(glGetVariantFloatvEXT) \
+    USE_GL_FUNC(glGetVariantIntegervEXT) \
+    USE_GL_FUNC(glGetVariantPointervEXT) \
+    USE_GL_FUNC(glGetVaryingLocationNV) \
+    USE_GL_FUNC(glGetVertexArrayIndexed64iv) \
+    USE_GL_FUNC(glGetVertexArrayIndexediv) \
+    USE_GL_FUNC(glGetVertexArrayIntegeri_vEXT) \
+    USE_GL_FUNC(glGetVertexArrayIntegervEXT) \
+    USE_GL_FUNC(glGetVertexArrayPointeri_vEXT) \
+    USE_GL_FUNC(glGetVertexArrayPointervEXT) \
+    USE_GL_FUNC(glGetVertexArrayiv) \
+    USE_GL_FUNC(glGetVertexAttribArrayObjectfvATI) \
+    USE_GL_FUNC(glGetVertexAttribArrayObjectivATI) \
+    USE_GL_FUNC(glGetVertexAttribIiv) \
+    USE_GL_FUNC(glGetVertexAttribIivEXT) \
+    USE_GL_FUNC(glGetVertexAttribIuiv) \
+    USE_GL_FUNC(glGetVertexAttribIuivEXT) \
+    USE_GL_FUNC(glGetVertexAttribLdv) \
+    USE_GL_FUNC(glGetVertexAttribLdvEXT) \
+    USE_GL_FUNC(glGetVertexAttribLi64vNV) \
+    USE_GL_FUNC(glGetVertexAttribLui64vARB) \
+    USE_GL_FUNC(glGetVertexAttribLui64vNV) \
+    USE_GL_FUNC(glGetVertexAttribPointerv) \
+    USE_GL_FUNC(glGetVertexAttribPointervARB) \
+    USE_GL_FUNC(glGetVertexAttribPointervNV) \
+    USE_GL_FUNC(glGetVertexAttribdv) \
+    USE_GL_FUNC(glGetVertexAttribdvARB) \
+    USE_GL_FUNC(glGetVertexAttribdvNV) \
+    USE_GL_FUNC(glGetVertexAttribfv) \
+    USE_GL_FUNC(glGetVertexAttribfvARB) \
+    USE_GL_FUNC(glGetVertexAttribfvNV) \
+    USE_GL_FUNC(glGetVertexAttribiv) \
+    USE_GL_FUNC(glGetVertexAttribivARB) \
+    USE_GL_FUNC(glGetVertexAttribivNV) \
+    USE_GL_FUNC(glGetVideoCaptureStreamdvNV) \
+    USE_GL_FUNC(glGetVideoCaptureStreamfvNV) \
+    USE_GL_FUNC(glGetVideoCaptureStreamivNV) \
+    USE_GL_FUNC(glGetVideoCaptureivNV) \
+    USE_GL_FUNC(glGetVideoi64vNV) \
+    USE_GL_FUNC(glGetVideoivNV) \
+    USE_GL_FUNC(glGetVideoui64vNV) \
+    USE_GL_FUNC(glGetVideouivNV) \
+    USE_GL_FUNC(glGetVkProcAddrNV) \
+    USE_GL_FUNC(glGetnColorTable) \
+    USE_GL_FUNC(glGetnColorTableARB) \
+    USE_GL_FUNC(glGetnCompressedTexImage) \
+    USE_GL_FUNC(glGetnCompressedTexImageARB) \
+    USE_GL_FUNC(glGetnConvolutionFilter) \
+    USE_GL_FUNC(glGetnConvolutionFilterARB) \
+    USE_GL_FUNC(glGetnHistogram) \
+    USE_GL_FUNC(glGetnHistogramARB) \
+    USE_GL_FUNC(glGetnMapdv) \
+    USE_GL_FUNC(glGetnMapdvARB) \
+    USE_GL_FUNC(glGetnMapfv) \
+    USE_GL_FUNC(glGetnMapfvARB) \
+    USE_GL_FUNC(glGetnMapiv) \
+    USE_GL_FUNC(glGetnMapivARB) \
+    USE_GL_FUNC(glGetnMinmax) \
+    USE_GL_FUNC(glGetnMinmaxARB) \
+    USE_GL_FUNC(glGetnPixelMapfv) \
+    USE_GL_FUNC(glGetnPixelMapfvARB) \
+    USE_GL_FUNC(glGetnPixelMapuiv) \
+    USE_GL_FUNC(glGetnPixelMapuivARB) \
+    USE_GL_FUNC(glGetnPixelMapusv) \
+    USE_GL_FUNC(glGetnPixelMapusvARB) \
+    USE_GL_FUNC(glGetnPolygonStipple) \
+    USE_GL_FUNC(glGetnPolygonStippleARB) \
+    USE_GL_FUNC(glGetnSeparableFilter) \
+    USE_GL_FUNC(glGetnSeparableFilterARB) \
+    USE_GL_FUNC(glGetnTexImage) \
+    USE_GL_FUNC(glGetnTexImageARB) \
+    USE_GL_FUNC(glGetnUniformdv) \
+    USE_GL_FUNC(glGetnUniformdvARB) \
+    USE_GL_FUNC(glGetnUniformfv) \
+    USE_GL_FUNC(glGetnUniformfvARB) \
+    USE_GL_FUNC(glGetnUniformi64vARB) \
+    USE_GL_FUNC(glGetnUniformiv) \
+    USE_GL_FUNC(glGetnUniformivARB) \
+    USE_GL_FUNC(glGetnUniformui64vARB) \
+    USE_GL_FUNC(glGetnUniformuiv) \
+    USE_GL_FUNC(glGetnUniformuivARB) \
+    USE_GL_FUNC(glGlobalAlphaFactorbSUN) \
+    USE_GL_FUNC(glGlobalAlphaFactordSUN) \
+    USE_GL_FUNC(glGlobalAlphaFactorfSUN) \
+    USE_GL_FUNC(glGlobalAlphaFactoriSUN) \
+    USE_GL_FUNC(glGlobalAlphaFactorsSUN) \
+    USE_GL_FUNC(glGlobalAlphaFactorubSUN) \
+    USE_GL_FUNC(glGlobalAlphaFactoruiSUN) \
+    USE_GL_FUNC(glGlobalAlphaFactorusSUN) \
+    USE_GL_FUNC(glHintPGI) \
+    USE_GL_FUNC(glHistogram) \
+    USE_GL_FUNC(glHistogramEXT) \
+    USE_GL_FUNC(glIglooInterfaceSGIX) \
+    USE_GL_FUNC(glImageTransformParameterfHP) \
+    USE_GL_FUNC(glImageTransformParameterfvHP) \
+    USE_GL_FUNC(glImageTransformParameteriHP) \
+    USE_GL_FUNC(glImageTransformParameterivHP) \
+    USE_GL_FUNC(glImportMemoryFdEXT) \
+    USE_GL_FUNC(glImportMemoryWin32HandleEXT) \
+    USE_GL_FUNC(glImportMemoryWin32NameEXT) \
+    USE_GL_FUNC(glImportSemaphoreFdEXT) \
+    USE_GL_FUNC(glImportSemaphoreWin32HandleEXT) \
+    USE_GL_FUNC(glImportSemaphoreWin32NameEXT) \
+    USE_GL_FUNC(glImportSyncEXT) \
+    USE_GL_FUNC(glIndexFormatNV) \
+    USE_GL_FUNC(glIndexFuncEXT) \
+    USE_GL_FUNC(glIndexMaterialEXT) \
+    USE_GL_FUNC(glIndexPointerEXT) \
+    USE_GL_FUNC(glIndexPointerListIBM) \
+    USE_GL_FUNC(glIndexxOES) \
+    USE_GL_FUNC(glIndexxvOES) \
+    USE_GL_FUNC(glInsertComponentEXT) \
+    USE_GL_FUNC(glInsertEventMarkerEXT) \
+    USE_GL_FUNC(glInstrumentsBufferSGIX) \
+    USE_GL_FUNC(glInterpolatePathsNV) \
+    USE_GL_FUNC(glInvalidateBufferData) \
+    USE_GL_FUNC(glInvalidateBufferSubData) \
+    USE_GL_FUNC(glInvalidateFramebuffer) \
+    USE_GL_FUNC(glInvalidateNamedFramebufferData) \
+    USE_GL_FUNC(glInvalidateNamedFramebufferSubData) \
+    USE_GL_FUNC(glInvalidateSubFramebuffer) \
+    USE_GL_FUNC(glInvalidateTexImage) \
+    USE_GL_FUNC(glInvalidateTexSubImage) \
+    USE_GL_FUNC(glIsAsyncMarkerSGIX) \
+    USE_GL_FUNC(glIsBuffer) \
+    USE_GL_FUNC(glIsBufferARB) \
+    USE_GL_FUNC(glIsBufferResidentNV) \
+    USE_GL_FUNC(glIsCommandListNV) \
+    USE_GL_FUNC(glIsEnabledIndexedEXT) \
+    USE_GL_FUNC(glIsEnabledi) \
+    USE_GL_FUNC(glIsFenceAPPLE) \
+    USE_GL_FUNC(glIsFenceNV) \
+    USE_GL_FUNC(glIsFramebuffer) \
+    USE_GL_FUNC(glIsFramebufferEXT) \
+    USE_GL_FUNC(glIsImageHandleResidentARB) \
+    USE_GL_FUNC(glIsImageHandleResidentNV) \
+    USE_GL_FUNC(glIsMemoryObjectEXT) \
+    USE_GL_FUNC(glIsNameAMD) \
+    USE_GL_FUNC(glIsNamedBufferResidentNV) \
+    USE_GL_FUNC(glIsNamedStringARB) \
+    USE_GL_FUNC(glIsObjectBufferATI) \
+    USE_GL_FUNC(glIsOcclusionQueryNV) \
+    USE_GL_FUNC(glIsPathNV) \
+    USE_GL_FUNC(glIsPointInFillPathNV) \
+    USE_GL_FUNC(glIsPointInStrokePathNV) \
+    USE_GL_FUNC(glIsProgram) \
+    USE_GL_FUNC(glIsProgramARB) \
+    USE_GL_FUNC(glIsProgramNV) \
+    USE_GL_FUNC(glIsProgramPipeline) \
+    USE_GL_FUNC(glIsQuery) \
+    USE_GL_FUNC(glIsQueryARB) \
+    USE_GL_FUNC(glIsRenderbuffer) \
+    USE_GL_FUNC(glIsRenderbufferEXT) \
+    USE_GL_FUNC(glIsSampler) \
+    USE_GL_FUNC(glIsSemaphoreEXT) \
+    USE_GL_FUNC(glIsShader) \
+    USE_GL_FUNC(glIsStateNV) \
+    USE_GL_FUNC(glIsSync) \
+    USE_GL_FUNC(glIsTextureEXT) \
+    USE_GL_FUNC(glIsTextureHandleResidentARB) \
+    USE_GL_FUNC(glIsTextureHandleResidentNV) \
+    USE_GL_FUNC(glIsTransformFeedback) \
+    USE_GL_FUNC(glIsTransformFeedbackNV) \
+    USE_GL_FUNC(glIsVariantEnabledEXT) \
+    USE_GL_FUNC(glIsVertexArray) \
+    USE_GL_FUNC(glIsVertexArrayAPPLE) \
+    USE_GL_FUNC(glIsVertexAttribEnabledAPPLE) \
+    USE_GL_FUNC(glLGPUCopyImageSubDataNVX) \
+    USE_GL_FUNC(glLGPUInterlockNVX) \
+    USE_GL_FUNC(glLGPUNamedBufferSubDataNVX) \
+    USE_GL_FUNC(glLabelObjectEXT) \
+    USE_GL_FUNC(glLightEnviSGIX) \
+    USE_GL_FUNC(glLightModelxOES) \
+    USE_GL_FUNC(glLightModelxvOES) \
+    USE_GL_FUNC(glLightxOES) \
+    USE_GL_FUNC(glLightxvOES) \
+    USE_GL_FUNC(glLineWidthxOES) \
+    USE_GL_FUNC(glLinkProgram) \
+    USE_GL_FUNC(glLinkProgramARB) \
+    USE_GL_FUNC(glListDrawCommandsStatesClientNV) \
+    USE_GL_FUNC(glListParameterfSGIX) \
+    USE_GL_FUNC(glListParameterfvSGIX) \
+    USE_GL_FUNC(glListParameteriSGIX) \
+    USE_GL_FUNC(glListParameterivSGIX) \
+    USE_GL_FUNC(glLoadIdentityDeformationMapSGIX) \
+    USE_GL_FUNC(glLoadMatrixxOES) \
+    USE_GL_FUNC(glLoadProgramNV) \
+    USE_GL_FUNC(glLoadTransposeMatrixd) \
+    USE_GL_FUNC(glLoadTransposeMatrixdARB) \
+    USE_GL_FUNC(glLoadTransposeMatrixf) \
+    USE_GL_FUNC(glLoadTransposeMatrixfARB) \
+    USE_GL_FUNC(glLoadTransposeMatrixxOES) \
+    USE_GL_FUNC(glLockArraysEXT) \
+    USE_GL_FUNC(glMTexCoord2fSGIS) \
+    USE_GL_FUNC(glMTexCoord2fvSGIS) \
+    USE_GL_FUNC(glMakeBufferNonResidentNV) \
+    USE_GL_FUNC(glMakeBufferResidentNV) \
+    USE_GL_FUNC(glMakeImageHandleNonResidentARB) \
+    USE_GL_FUNC(glMakeImageHandleNonResidentNV) \
+    USE_GL_FUNC(glMakeImageHandleResidentARB) \
+    USE_GL_FUNC(glMakeImageHandleResidentNV) \
+    USE_GL_FUNC(glMakeNamedBufferNonResidentNV) \
+    USE_GL_FUNC(glMakeNamedBufferResidentNV) \
+    USE_GL_FUNC(glMakeTextureHandleNonResidentARB) \
+    USE_GL_FUNC(glMakeTextureHandleNonResidentNV) \
+    USE_GL_FUNC(glMakeTextureHandleResidentARB) \
+    USE_GL_FUNC(glMakeTextureHandleResidentNV) \
+    USE_GL_FUNC(glMap1xOES) \
+    USE_GL_FUNC(glMap2xOES) \
+    USE_GL_FUNC(glMapBuffer) \
+    USE_GL_FUNC(glMapBufferARB) \
+    USE_GL_FUNC(glMapBufferRange) \
+    USE_GL_FUNC(glMapControlPointsNV) \
+    USE_GL_FUNC(glMapGrid1xOES) \
+    USE_GL_FUNC(glMapGrid2xOES) \
+    USE_GL_FUNC(glMapNamedBuffer) \
+    USE_GL_FUNC(glMapNamedBufferEXT) \
+    USE_GL_FUNC(glMapNamedBufferRange) \
+    USE_GL_FUNC(glMapNamedBufferRangeEXT) \
+    USE_GL_FUNC(glMapObjectBufferATI) \
+    USE_GL_FUNC(glMapParameterfvNV) \
+    USE_GL_FUNC(glMapParameterivNV) \
+    USE_GL_FUNC(glMapTexture2DINTEL) \
+    USE_GL_FUNC(glMapVertexAttrib1dAPPLE) \
+    USE_GL_FUNC(glMapVertexAttrib1fAPPLE) \
+    USE_GL_FUNC(glMapVertexAttrib2dAPPLE) \
+    USE_GL_FUNC(glMapVertexAttrib2fAPPLE) \
+    USE_GL_FUNC(glMaterialxOES) \
+    USE_GL_FUNC(glMaterialxvOES) \
+    USE_GL_FUNC(glMatrixFrustumEXT) \
+    USE_GL_FUNC(glMatrixIndexPointerARB) \
+    USE_GL_FUNC(glMatrixIndexubvARB) \
+    USE_GL_FUNC(glMatrixIndexuivARB) \
+    USE_GL_FUNC(glMatrixIndexusvARB) \
+    USE_GL_FUNC(glMatrixLoad3x2fNV) \
+    USE_GL_FUNC(glMatrixLoad3x3fNV) \
+    USE_GL_FUNC(glMatrixLoadIdentityEXT) \
+    USE_GL_FUNC(glMatrixLoadTranspose3x3fNV) \
+    USE_GL_FUNC(glMatrixLoadTransposedEXT) \
+    USE_GL_FUNC(glMatrixLoadTransposefEXT) \
+    USE_GL_FUNC(glMatrixLoaddEXT) \
+    USE_GL_FUNC(glMatrixLoadfEXT) \
+    USE_GL_FUNC(glMatrixMult3x2fNV) \
+    USE_GL_FUNC(glMatrixMult3x3fNV) \
+    USE_GL_FUNC(glMatrixMultTranspose3x3fNV) \
+    USE_GL_FUNC(glMatrixMultTransposedEXT) \
+    USE_GL_FUNC(glMatrixMultTransposefEXT) \
+    USE_GL_FUNC(glMatrixMultdEXT) \
+    USE_GL_FUNC(glMatrixMultfEXT) \
+    USE_GL_FUNC(glMatrixOrthoEXT) \
+    USE_GL_FUNC(glMatrixPopEXT) \
+    USE_GL_FUNC(glMatrixPushEXT) \
+    USE_GL_FUNC(glMatrixRotatedEXT) \
+    USE_GL_FUNC(glMatrixRotatefEXT) \
+    USE_GL_FUNC(glMatrixScaledEXT) \
+    USE_GL_FUNC(glMatrixScalefEXT) \
+    USE_GL_FUNC(glMatrixTranslatedEXT) \
+    USE_GL_FUNC(glMatrixTranslatefEXT) \
+    USE_GL_FUNC(glMaxShaderCompilerThreadsARB) \
+    USE_GL_FUNC(glMaxShaderCompilerThreadsKHR) \
+    USE_GL_FUNC(glMemoryBarrier) \
+    USE_GL_FUNC(glMemoryBarrierByRegion) \
+    USE_GL_FUNC(glMemoryBarrierEXT) \
+    USE_GL_FUNC(glMemoryObjectParameterivEXT) \
+    USE_GL_FUNC(glMinSampleShading) \
+    USE_GL_FUNC(glMinSampleShadingARB) \
+    USE_GL_FUNC(glMinmax) \
+    USE_GL_FUNC(glMinmaxEXT) \
+    USE_GL_FUNC(glMultMatrixxOES) \
+    USE_GL_FUNC(glMultTransposeMatrixd) \
+    USE_GL_FUNC(glMultTransposeMatrixdARB) \
+    USE_GL_FUNC(glMultTransposeMatrixf) \
+    USE_GL_FUNC(glMultTransposeMatrixfARB) \
+    USE_GL_FUNC(glMultTransposeMatrixxOES) \
+    USE_GL_FUNC(glMultiDrawArrays) \
+    USE_GL_FUNC(glMultiDrawArraysEXT) \
+    USE_GL_FUNC(glMultiDrawArraysIndirect) \
+    USE_GL_FUNC(glMultiDrawArraysIndirectAMD) \
+    USE_GL_FUNC(glMultiDrawArraysIndirectBindlessCountNV) \
+    USE_GL_FUNC(glMultiDrawArraysIndirectBindlessNV) \
+    USE_GL_FUNC(glMultiDrawArraysIndirectCount) \
+    USE_GL_FUNC(glMultiDrawArraysIndirectCountARB) \
+    USE_GL_FUNC(glMultiDrawElementArrayAPPLE) \
+    USE_GL_FUNC(glMultiDrawElements) \
+    USE_GL_FUNC(glMultiDrawElementsBaseVertex) \
+    USE_GL_FUNC(glMultiDrawElementsEXT) \
+    USE_GL_FUNC(glMultiDrawElementsIndirect) \
+    USE_GL_FUNC(glMultiDrawElementsIndirectAMD) \
+    USE_GL_FUNC(glMultiDrawElementsIndirectBindlessCountNV) \
+    USE_GL_FUNC(glMultiDrawElementsIndirectBindlessNV) \
+    USE_GL_FUNC(glMultiDrawElementsIndirectCount) \
+    USE_GL_FUNC(glMultiDrawElementsIndirectCountARB) \
+    USE_GL_FUNC(glMultiDrawMeshTasksIndirectCountNV) \
+    USE_GL_FUNC(glMultiDrawMeshTasksIndirectNV) \
+    USE_GL_FUNC(glMultiDrawRangeElementArrayAPPLE) \
+    USE_GL_FUNC(glMultiModeDrawArraysIBM) \
+    USE_GL_FUNC(glMultiModeDrawElementsIBM) \
+    USE_GL_FUNC(glMultiTexBufferEXT) \
+    USE_GL_FUNC(glMultiTexCoord1bOES) \
+    USE_GL_FUNC(glMultiTexCoord1bvOES) \
+    USE_GL_FUNC(glMultiTexCoord1d) \
+    USE_GL_FUNC(glMultiTexCoord1dARB) \
+    USE_GL_FUNC(glMultiTexCoord1dSGIS) \
+    USE_GL_FUNC(glMultiTexCoord1dv) \
+    USE_GL_FUNC(glMultiTexCoord1dvARB) \
+    USE_GL_FUNC(glMultiTexCoord1dvSGIS) \
+    USE_GL_FUNC(glMultiTexCoord1f) \
+    USE_GL_FUNC(glMultiTexCoord1fARB) \
+    USE_GL_FUNC(glMultiTexCoord1fSGIS) \
+    USE_GL_FUNC(glMultiTexCoord1fv) \
+    USE_GL_FUNC(glMultiTexCoord1fvARB) \
+    USE_GL_FUNC(glMultiTexCoord1fvSGIS) \
+    USE_GL_FUNC(glMultiTexCoord1hNV) \
+    USE_GL_FUNC(glMultiTexCoord1hvNV) \
+    USE_GL_FUNC(glMultiTexCoord1i) \
+    USE_GL_FUNC(glMultiTexCoord1iARB) \
+    USE_GL_FUNC(glMultiTexCoord1iSGIS) \
+    USE_GL_FUNC(glMultiTexCoord1iv) \
+    USE_GL_FUNC(glMultiTexCoord1ivARB) \
+    USE_GL_FUNC(glMultiTexCoord1ivSGIS) \
+    USE_GL_FUNC(glMultiTexCoord1s) \
+    USE_GL_FUNC(glMultiTexCoord1sARB) \
+    USE_GL_FUNC(glMultiTexCoord1sSGIS) \
+    USE_GL_FUNC(glMultiTexCoord1sv) \
+    USE_GL_FUNC(glMultiTexCoord1svARB) \
+    USE_GL_FUNC(glMultiTexCoord1svSGIS) \
+    USE_GL_FUNC(glMultiTexCoord1xOES) \
+    USE_GL_FUNC(glMultiTexCoord1xvOES) \
+    USE_GL_FUNC(glMultiTexCoord2bOES) \
+    USE_GL_FUNC(glMultiTexCoord2bvOES) \
+    USE_GL_FUNC(glMultiTexCoord2d) \
+    USE_GL_FUNC(glMultiTexCoord2dARB) \
+    USE_GL_FUNC(glMultiTexCoord2dSGIS) \
+    USE_GL_FUNC(glMultiTexCoord2dv) \
+    USE_GL_FUNC(glMultiTexCoord2dvARB) \
+    USE_GL_FUNC(glMultiTexCoord2dvSGIS) \
+    USE_GL_FUNC(glMultiTexCoord2f) \
+    USE_GL_FUNC(glMultiTexCoord2fARB) \
+    USE_GL_FUNC(glMultiTexCoord2fSGIS) \
+    USE_GL_FUNC(glMultiTexCoord2fv) \
+    USE_GL_FUNC(glMultiTexCoord2fvARB) \
+    USE_GL_FUNC(glMultiTexCoord2fvSGIS) \
+    USE_GL_FUNC(glMultiTexCoord2hNV) \
+    USE_GL_FUNC(glMultiTexCoord2hvNV) \
+    USE_GL_FUNC(glMultiTexCoord2i) \
+    USE_GL_FUNC(glMultiTexCoord2iARB) \
+    USE_GL_FUNC(glMultiTexCoord2iSGIS) \
+    USE_GL_FUNC(glMultiTexCoord2iv) \
+    USE_GL_FUNC(glMultiTexCoord2ivARB) \
+    USE_GL_FUNC(glMultiTexCoord2ivSGIS) \
+    USE_GL_FUNC(glMultiTexCoord2s) \
+    USE_GL_FUNC(glMultiTexCoord2sARB) \
+    USE_GL_FUNC(glMultiTexCoord2sSGIS) \
+    USE_GL_FUNC(glMultiTexCoord2sv) \
+    USE_GL_FUNC(glMultiTexCoord2svARB) \
+    USE_GL_FUNC(glMultiTexCoord2svSGIS) \
+    USE_GL_FUNC(glMultiTexCoord2xOES) \
+    USE_GL_FUNC(glMultiTexCoord2xvOES) \
+    USE_GL_FUNC(glMultiTexCoord3bOES) \
+    USE_GL_FUNC(glMultiTexCoord3bvOES) \
+    USE_GL_FUNC(glMultiTexCoord3d) \
+    USE_GL_FUNC(glMultiTexCoord3dARB) \
+    USE_GL_FUNC(glMultiTexCoord3dSGIS) \
+    USE_GL_FUNC(glMultiTexCoord3dv) \
+    USE_GL_FUNC(glMultiTexCoord3dvARB) \
+    USE_GL_FUNC(glMultiTexCoord3dvSGIS) \
+    USE_GL_FUNC(glMultiTexCoord3f) \
+    USE_GL_FUNC(glMultiTexCoord3fARB) \
+    USE_GL_FUNC(glMultiTexCoord3fSGIS) \
+    USE_GL_FUNC(glMultiTexCoord3fv) \
+    USE_GL_FUNC(glMultiTexCoord3fvARB) \
+    USE_GL_FUNC(glMultiTexCoord3fvSGIS) \
+    USE_GL_FUNC(glMultiTexCoord3hNV) \
+    USE_GL_FUNC(glMultiTexCoord3hvNV) \
+    USE_GL_FUNC(glMultiTexCoord3i) \
+    USE_GL_FUNC(glMultiTexCoord3iARB) \
+    USE_GL_FUNC(glMultiTexCoord3iSGIS) \
+    USE_GL_FUNC(glMultiTexCoord3iv) \
+    USE_GL_FUNC(glMultiTexCoord3ivARB) \
+    USE_GL_FUNC(glMultiTexCoord3ivSGIS) \
+    USE_GL_FUNC(glMultiTexCoord3s) \
+    USE_GL_FUNC(glMultiTexCoord3sARB) \
+    USE_GL_FUNC(glMultiTexCoord3sSGIS) \
+    USE_GL_FUNC(glMultiTexCoord3sv) \
+    USE_GL_FUNC(glMultiTexCoord3svARB) \
+    USE_GL_FUNC(glMultiTexCoord3svSGIS) \
+    USE_GL_FUNC(glMultiTexCoord3xOES) \
+    USE_GL_FUNC(glMultiTexCoord3xvOES) \
+    USE_GL_FUNC(glMultiTexCoord4bOES) \
+    USE_GL_FUNC(glMultiTexCoord4bvOES) \
+    USE_GL_FUNC(glMultiTexCoord4d) \
+    USE_GL_FUNC(glMultiTexCoord4dARB) \
+    USE_GL_FUNC(glMultiTexCoord4dSGIS) \
+    USE_GL_FUNC(glMultiTexCoord4dv) \
+    USE_GL_FUNC(glMultiTexCoord4dvARB) \
+    USE_GL_FUNC(glMultiTexCoord4dvSGIS) \
+    USE_GL_FUNC(glMultiTexCoord4f) \
+    USE_GL_FUNC(glMultiTexCoord4fARB) \
+    USE_GL_FUNC(glMultiTexCoord4fSGIS) \
+    USE_GL_FUNC(glMultiTexCoord4fv) \
+    USE_GL_FUNC(glMultiTexCoord4fvARB) \
+    USE_GL_FUNC(glMultiTexCoord4fvSGIS) \
+    USE_GL_FUNC(glMultiTexCoord4hNV) \
+    USE_GL_FUNC(glMultiTexCoord4hvNV) \
+    USE_GL_FUNC(glMultiTexCoord4i) \
+    USE_GL_FUNC(glMultiTexCoord4iARB) \
+    USE_GL_FUNC(glMultiTexCoord4iSGIS) \
+    USE_GL_FUNC(glMultiTexCoord4iv) \
+    USE_GL_FUNC(glMultiTexCoord4ivARB) \
+    USE_GL_FUNC(glMultiTexCoord4ivSGIS) \
+    USE_GL_FUNC(glMultiTexCoord4s) \
+    USE_GL_FUNC(glMultiTexCoord4sARB) \
+    USE_GL_FUNC(glMultiTexCoord4sSGIS) \
+    USE_GL_FUNC(glMultiTexCoord4sv) \
+    USE_GL_FUNC(glMultiTexCoord4svARB) \
+    USE_GL_FUNC(glMultiTexCoord4svSGIS) \
+    USE_GL_FUNC(glMultiTexCoord4xOES) \
+    USE_GL_FUNC(glMultiTexCoord4xvOES) \
+    USE_GL_FUNC(glMultiTexCoordP1ui) \
+    USE_GL_FUNC(glMultiTexCoordP1uiv) \
+    USE_GL_FUNC(glMultiTexCoordP2ui) \
+    USE_GL_FUNC(glMultiTexCoordP2uiv) \
+    USE_GL_FUNC(glMultiTexCoordP3ui) \
+    USE_GL_FUNC(glMultiTexCoordP3uiv) \
+    USE_GL_FUNC(glMultiTexCoordP4ui) \
+    USE_GL_FUNC(glMultiTexCoordP4uiv) \
+    USE_GL_FUNC(glMultiTexCoordPointerEXT) \
+    USE_GL_FUNC(glMultiTexCoordPointerSGIS) \
+    USE_GL_FUNC(glMultiTexEnvfEXT) \
+    USE_GL_FUNC(glMultiTexEnvfvEXT) \
+    USE_GL_FUNC(glMultiTexEnviEXT) \
+    USE_GL_FUNC(glMultiTexEnvivEXT) \
+    USE_GL_FUNC(glMultiTexGendEXT) \
+    USE_GL_FUNC(glMultiTexGendvEXT) \
+    USE_GL_FUNC(glMultiTexGenfEXT) \
+    USE_GL_FUNC(glMultiTexGenfvEXT) \
+    USE_GL_FUNC(glMultiTexGeniEXT) \
+    USE_GL_FUNC(glMultiTexGenivEXT) \
+    USE_GL_FUNC(glMultiTexImage1DEXT) \
+    USE_GL_FUNC(glMultiTexImage2DEXT) \
+    USE_GL_FUNC(glMultiTexImage3DEXT) \
+    USE_GL_FUNC(glMultiTexParameterIivEXT) \
+    USE_GL_FUNC(glMultiTexParameterIuivEXT) \
+    USE_GL_FUNC(glMultiTexParameterfEXT) \
+    USE_GL_FUNC(glMultiTexParameterfvEXT) \
+    USE_GL_FUNC(glMultiTexParameteriEXT) \
+    USE_GL_FUNC(glMultiTexParameterivEXT) \
+    USE_GL_FUNC(glMultiTexRenderbufferEXT) \
+    USE_GL_FUNC(glMultiTexSubImage1DEXT) \
+    USE_GL_FUNC(glMultiTexSubImage2DEXT) \
+    USE_GL_FUNC(glMultiTexSubImage3DEXT) \
+    USE_GL_FUNC(glMulticastBarrierNV) \
+    USE_GL_FUNC(glMulticastBlitFramebufferNV) \
+    USE_GL_FUNC(glMulticastBufferSubDataNV) \
+    USE_GL_FUNC(glMulticastCopyBufferSubDataNV) \
+    USE_GL_FUNC(glMulticastCopyImageSubDataNV) \
+    USE_GL_FUNC(glMulticastFramebufferSampleLocationsfvNV) \
+    USE_GL_FUNC(glMulticastGetQueryObjecti64vNV) \
+    USE_GL_FUNC(glMulticastGetQueryObjectivNV) \
+    USE_GL_FUNC(glMulticastGetQueryObjectui64vNV) \
+    USE_GL_FUNC(glMulticastGetQueryObjectuivNV) \
+    USE_GL_FUNC(glMulticastScissorArrayvNVX) \
+    USE_GL_FUNC(glMulticastViewportArrayvNVX) \
+    USE_GL_FUNC(glMulticastViewportPositionWScaleNVX) \
+    USE_GL_FUNC(glMulticastWaitSyncNV) \
+    USE_GL_FUNC(glNamedBufferAttachMemoryNV) \
+    USE_GL_FUNC(glNamedBufferData) \
+    USE_GL_FUNC(glNamedBufferDataEXT) \
+    USE_GL_FUNC(glNamedBufferPageCommitmentARB) \
+    USE_GL_FUNC(glNamedBufferPageCommitmentEXT) \
+    USE_GL_FUNC(glNamedBufferStorage) \
+    USE_GL_FUNC(glNamedBufferStorageEXT) \
+    USE_GL_FUNC(glNamedBufferStorageExternalEXT) \
+    USE_GL_FUNC(glNamedBufferStorageMemEXT) \
+    USE_GL_FUNC(glNamedBufferSubData) \
+    USE_GL_FUNC(glNamedBufferSubDataEXT) \
+    USE_GL_FUNC(glNamedCopyBufferSubDataEXT) \
+    USE_GL_FUNC(glNamedFramebufferDrawBuffer) \
+    USE_GL_FUNC(glNamedFramebufferDrawBuffers) \
+    USE_GL_FUNC(glNamedFramebufferParameteri) \
+    USE_GL_FUNC(glNamedFramebufferParameteriEXT) \
+    USE_GL_FUNC(glNamedFramebufferReadBuffer) \
+    USE_GL_FUNC(glNamedFramebufferRenderbuffer) \
+    USE_GL_FUNC(glNamedFramebufferRenderbufferEXT) \
+    USE_GL_FUNC(glNamedFramebufferSampleLocationsfvARB) \
+    USE_GL_FUNC(glNamedFramebufferSampleLocationsfvNV) \
+    USE_GL_FUNC(glNamedFramebufferSamplePositionsfvAMD) \
+    USE_GL_FUNC(glNamedFramebufferTexture) \
+    USE_GL_FUNC(glNamedFramebufferTexture1DEXT) \
+    USE_GL_FUNC(glNamedFramebufferTexture2DEXT) \
+    USE_GL_FUNC(glNamedFramebufferTexture3DEXT) \
+    USE_GL_FUNC(glNamedFramebufferTextureEXT) \
+    USE_GL_FUNC(glNamedFramebufferTextureFaceEXT) \
+    USE_GL_FUNC(glNamedFramebufferTextureLayer) \
+    USE_GL_FUNC(glNamedFramebufferTextureLayerEXT) \
+    USE_GL_FUNC(glNamedProgramLocalParameter4dEXT) \
+    USE_GL_FUNC(glNamedProgramLocalParameter4dvEXT) \
+    USE_GL_FUNC(glNamedProgramLocalParameter4fEXT) \
+    USE_GL_FUNC(glNamedProgramLocalParameter4fvEXT) \
+    USE_GL_FUNC(glNamedProgramLocalParameterI4iEXT) \
+    USE_GL_FUNC(glNamedProgramLocalParameterI4ivEXT) \
+    USE_GL_FUNC(glNamedProgramLocalParameterI4uiEXT) \
+    USE_GL_FUNC(glNamedProgramLocalParameterI4uivEXT) \
+    USE_GL_FUNC(glNamedProgramLocalParameters4fvEXT) \
+    USE_GL_FUNC(glNamedProgramLocalParametersI4ivEXT) \
+    USE_GL_FUNC(glNamedProgramLocalParametersI4uivEXT) \
+    USE_GL_FUNC(glNamedProgramStringEXT) \
+    USE_GL_FUNC(glNamedRenderbufferStorage) \
+    USE_GL_FUNC(glNamedRenderbufferStorageEXT) \
+    USE_GL_FUNC(glNamedRenderbufferStorageMultisample) \
+    USE_GL_FUNC(glNamedRenderbufferStorageMultisampleAdvancedAMD) \
+    USE_GL_FUNC(glNamedRenderbufferStorageMultisampleCoverageEXT) \
+    USE_GL_FUNC(glNamedRenderbufferStorageMultisampleEXT) \
+    USE_GL_FUNC(glNamedStringARB) \
+    USE_GL_FUNC(glNewBufferRegion) \
+    USE_GL_FUNC(glNewObjectBufferATI) \
+    USE_GL_FUNC(glNormal3fVertex3fSUN) \
+    USE_GL_FUNC(glNormal3fVertex3fvSUN) \
+    USE_GL_FUNC(glNormal3hNV) \
+    USE_GL_FUNC(glNormal3hvNV) \
+    USE_GL_FUNC(glNormal3xOES) \
+    USE_GL_FUNC(glNormal3xvOES) \
+    USE_GL_FUNC(glNormalFormatNV) \
+    USE_GL_FUNC(glNormalP3ui) \
+    USE_GL_FUNC(glNormalP3uiv) \
+    USE_GL_FUNC(glNormalPointerEXT) \
+    USE_GL_FUNC(glNormalPointerListIBM) \
+    USE_GL_FUNC(glNormalPointervINTEL) \
+    USE_GL_FUNC(glNormalStream3bATI) \
+    USE_GL_FUNC(glNormalStream3bvATI) \
+    USE_GL_FUNC(glNormalStream3dATI) \
+    USE_GL_FUNC(glNormalStream3dvATI) \
+    USE_GL_FUNC(glNormalStream3fATI) \
+    USE_GL_FUNC(glNormalStream3fvATI) \
+    USE_GL_FUNC(glNormalStream3iATI) \
+    USE_GL_FUNC(glNormalStream3ivATI) \
+    USE_GL_FUNC(glNormalStream3sATI) \
+    USE_GL_FUNC(glNormalStream3svATI) \
+    USE_GL_FUNC(glObjectLabel) \
+    USE_GL_FUNC(glObjectPtrLabel) \
+    USE_GL_FUNC(glObjectPurgeableAPPLE) \
+    USE_GL_FUNC(glObjectUnpurgeableAPPLE) \
+    USE_GL_FUNC(glOrthofOES) \
+    USE_GL_FUNC(glOrthoxOES) \
+    USE_GL_FUNC(glPNTrianglesfATI) \
+    USE_GL_FUNC(glPNTrianglesiATI) \
+    USE_GL_FUNC(glPassTexCoordATI) \
+    USE_GL_FUNC(glPassThroughxOES) \
+    USE_GL_FUNC(glPatchParameterfv) \
+    USE_GL_FUNC(glPatchParameteri) \
+    USE_GL_FUNC(glPathColorGenNV) \
+    USE_GL_FUNC(glPathCommandsNV) \
+    USE_GL_FUNC(glPathCoordsNV) \
+    USE_GL_FUNC(glPathCoverDepthFuncNV) \
+    USE_GL_FUNC(glPathDashArrayNV) \
+    USE_GL_FUNC(glPathFogGenNV) \
+    USE_GL_FUNC(glPathGlyphIndexArrayNV) \
+    USE_GL_FUNC(glPathGlyphIndexRangeNV) \
+    USE_GL_FUNC(glPathGlyphRangeNV) \
+    USE_GL_FUNC(glPathGlyphsNV) \
+    USE_GL_FUNC(glPathMemoryGlyphIndexArrayNV) \
+    USE_GL_FUNC(glPathParameterfNV) \
+    USE_GL_FUNC(glPathParameterfvNV) \
+    USE_GL_FUNC(glPathParameteriNV) \
+    USE_GL_FUNC(glPathParameterivNV) \
+    USE_GL_FUNC(glPathStencilDepthOffsetNV) \
+    USE_GL_FUNC(glPathStencilFuncNV) \
+    USE_GL_FUNC(glPathStringNV) \
+    USE_GL_FUNC(glPathSubCommandsNV) \
+    USE_GL_FUNC(glPathSubCoordsNV) \
+    USE_GL_FUNC(glPathTexGenNV) \
+    USE_GL_FUNC(glPauseTransformFeedback) \
+    USE_GL_FUNC(glPauseTransformFeedbackNV) \
+    USE_GL_FUNC(glPixelDataRangeNV) \
+    USE_GL_FUNC(glPixelMapx) \
+    USE_GL_FUNC(glPixelStorex) \
+    USE_GL_FUNC(glPixelTexGenParameterfSGIS) \
+    USE_GL_FUNC(glPixelTexGenParameterfvSGIS) \
+    USE_GL_FUNC(glPixelTexGenParameteriSGIS) \
+    USE_GL_FUNC(glPixelTexGenParameterivSGIS) \
+    USE_GL_FUNC(glPixelTexGenSGIX) \
+    USE_GL_FUNC(glPixelTransferxOES) \
+    USE_GL_FUNC(glPixelTransformParameterfEXT) \
+    USE_GL_FUNC(glPixelTransformParameterfvEXT) \
+    USE_GL_FUNC(glPixelTransformParameteriEXT) \
+    USE_GL_FUNC(glPixelTransformParameterivEXT) \
+    USE_GL_FUNC(glPixelZoomxOES) \
+    USE_GL_FUNC(glPointAlongPathNV) \
+    USE_GL_FUNC(glPointParameterf) \
+    USE_GL_FUNC(glPointParameterfARB) \
+    USE_GL_FUNC(glPointParameterfEXT) \
+    USE_GL_FUNC(glPointParameterfSGIS) \
+    USE_GL_FUNC(glPointParameterfv) \
+    USE_GL_FUNC(glPointParameterfvARB) \
+    USE_GL_FUNC(glPointParameterfvEXT) \
+    USE_GL_FUNC(glPointParameterfvSGIS) \
+    USE_GL_FUNC(glPointParameteri) \
+    USE_GL_FUNC(glPointParameteriNV) \
+    USE_GL_FUNC(glPointParameteriv) \
+    USE_GL_FUNC(glPointParameterivNV) \
+    USE_GL_FUNC(glPointParameterxvOES) \
+    USE_GL_FUNC(glPointSizexOES) \
+    USE_GL_FUNC(glPollAsyncSGIX) \
+    USE_GL_FUNC(glPollInstrumentsSGIX) \
+    USE_GL_FUNC(glPolygonOffsetClamp) \
+    USE_GL_FUNC(glPolygonOffsetClampEXT) \
+    USE_GL_FUNC(glPolygonOffsetEXT) \
+    USE_GL_FUNC(glPolygonOffsetxOES) \
+    USE_GL_FUNC(glPopDebugGroup) \
+    USE_GL_FUNC(glPopGroupMarkerEXT) \
+    USE_GL_FUNC(glPresentFrameDualFillNV) \
+    USE_GL_FUNC(glPresentFrameKeyedNV) \
+    USE_GL_FUNC(glPrimitiveBoundingBoxARB) \
+    USE_GL_FUNC(glPrimitiveRestartIndex) \
+    USE_GL_FUNC(glPrimitiveRestartIndexNV) \
+    USE_GL_FUNC(glPrimitiveRestartNV) \
+    USE_GL_FUNC(glPrioritizeTexturesEXT) \
+    USE_GL_FUNC(glPrioritizeTexturesxOES) \
+    USE_GL_FUNC(glProgramBinary) \
+    USE_GL_FUNC(glProgramBufferParametersIivNV) \
+    USE_GL_FUNC(glProgramBufferParametersIuivNV) \
+    USE_GL_FUNC(glProgramBufferParametersfvNV) \
+    USE_GL_FUNC(glProgramEnvParameter4dARB) \
+    USE_GL_FUNC(glProgramEnvParameter4dvARB) \
+    USE_GL_FUNC(glProgramEnvParameter4fARB) \
+    USE_GL_FUNC(glProgramEnvParameter4fvARB) \
+    USE_GL_FUNC(glProgramEnvParameterI4iNV) \
+    USE_GL_FUNC(glProgramEnvParameterI4ivNV) \
+    USE_GL_FUNC(glProgramEnvParameterI4uiNV) \
+    USE_GL_FUNC(glProgramEnvParameterI4uivNV) \
+    USE_GL_FUNC(glProgramEnvParameters4fvEXT) \
+    USE_GL_FUNC(glProgramEnvParametersI4ivNV) \
+    USE_GL_FUNC(glProgramEnvParametersI4uivNV) \
+    USE_GL_FUNC(glProgramLocalParameter4dARB) \
+    USE_GL_FUNC(glProgramLocalParameter4dvARB) \
+    USE_GL_FUNC(glProgramLocalParameter4fARB) \
+    USE_GL_FUNC(glProgramLocalParameter4fvARB) \
+    USE_GL_FUNC(glProgramLocalParameterI4iNV) \
+    USE_GL_FUNC(glProgramLocalParameterI4ivNV) \
+    USE_GL_FUNC(glProgramLocalParameterI4uiNV) \
+    USE_GL_FUNC(glProgramLocalParameterI4uivNV) \
+    USE_GL_FUNC(glProgramLocalParameters4fvEXT) \
+    USE_GL_FUNC(glProgramLocalParametersI4ivNV) \
+    USE_GL_FUNC(glProgramLocalParametersI4uivNV) \
+    USE_GL_FUNC(glProgramNamedParameter4dNV) \
+    USE_GL_FUNC(glProgramNamedParameter4dvNV) \
+    USE_GL_FUNC(glProgramNamedParameter4fNV) \
+    USE_GL_FUNC(glProgramNamedParameter4fvNV) \
+    USE_GL_FUNC(glProgramParameter4dNV) \
+    USE_GL_FUNC(glProgramParameter4dvNV) \
+    USE_GL_FUNC(glProgramParameter4fNV) \
+    USE_GL_FUNC(glProgramParameter4fvNV) \
+    USE_GL_FUNC(glProgramParameteri) \
+    USE_GL_FUNC(glProgramParameteriARB) \
+    USE_GL_FUNC(glProgramParameteriEXT) \
+    USE_GL_FUNC(glProgramParameters4dvNV) \
+    USE_GL_FUNC(glProgramParameters4fvNV) \
+    USE_GL_FUNC(glProgramPathFragmentInputGenNV) \
+    USE_GL_FUNC(glProgramStringARB) \
+    USE_GL_FUNC(glProgramSubroutineParametersuivNV) \
+    USE_GL_FUNC(glProgramUniform1d) \
+    USE_GL_FUNC(glProgramUniform1dEXT) \
+    USE_GL_FUNC(glProgramUniform1dv) \
+    USE_GL_FUNC(glProgramUniform1dvEXT) \
+    USE_GL_FUNC(glProgramUniform1f) \
+    USE_GL_FUNC(glProgramUniform1fEXT) \
+    USE_GL_FUNC(glProgramUniform1fv) \
+    USE_GL_FUNC(glProgramUniform1fvEXT) \
+    USE_GL_FUNC(glProgramUniform1i) \
+    USE_GL_FUNC(glProgramUniform1i64ARB) \
+    USE_GL_FUNC(glProgramUniform1i64NV) \
+    USE_GL_FUNC(glProgramUniform1i64vARB) \
+    USE_GL_FUNC(glProgramUniform1i64vNV) \
+    USE_GL_FUNC(glProgramUniform1iEXT) \
+    USE_GL_FUNC(glProgramUniform1iv) \
+    USE_GL_FUNC(glProgramUniform1ivEXT) \
+    USE_GL_FUNC(glProgramUniform1ui) \
+    USE_GL_FUNC(glProgramUniform1ui64ARB) \
+    USE_GL_FUNC(glProgramUniform1ui64NV) \
+    USE_GL_FUNC(glProgramUniform1ui64vARB) \
+    USE_GL_FUNC(glProgramUniform1ui64vNV) \
+    USE_GL_FUNC(glProgramUniform1uiEXT) \
+    USE_GL_FUNC(glProgramUniform1uiv) \
+    USE_GL_FUNC(glProgramUniform1uivEXT) \
+    USE_GL_FUNC(glProgramUniform2d) \
+    USE_GL_FUNC(glProgramUniform2dEXT) \
+    USE_GL_FUNC(glProgramUniform2dv) \
+    USE_GL_FUNC(glProgramUniform2dvEXT) \
+    USE_GL_FUNC(glProgramUniform2f) \
+    USE_GL_FUNC(glProgramUniform2fEXT) \
+    USE_GL_FUNC(glProgramUniform2fv) \
+    USE_GL_FUNC(glProgramUniform2fvEXT) \
+    USE_GL_FUNC(glProgramUniform2i) \
+    USE_GL_FUNC(glProgramUniform2i64ARB) \
+    USE_GL_FUNC(glProgramUniform2i64NV) \
+    USE_GL_FUNC(glProgramUniform2i64vARB) \
+    USE_GL_FUNC(glProgramUniform2i64vNV) \
+    USE_GL_FUNC(glProgramUniform2iEXT) \
+    USE_GL_FUNC(glProgramUniform2iv) \
+    USE_GL_FUNC(glProgramUniform2ivEXT) \
+    USE_GL_FUNC(glProgramUniform2ui) \
+    USE_GL_FUNC(glProgramUniform2ui64ARB) \
+    USE_GL_FUNC(glProgramUniform2ui64NV) \
+    USE_GL_FUNC(glProgramUniform2ui64vARB) \
+    USE_GL_FUNC(glProgramUniform2ui64vNV) \
+    USE_GL_FUNC(glProgramUniform2uiEXT) \
+    USE_GL_FUNC(glProgramUniform2uiv) \
+    USE_GL_FUNC(glProgramUniform2uivEXT) \
+    USE_GL_FUNC(glProgramUniform3d) \
+    USE_GL_FUNC(glProgramUniform3dEXT) \
+    USE_GL_FUNC(glProgramUniform3dv) \
+    USE_GL_FUNC(glProgramUniform3dvEXT) \
+    USE_GL_FUNC(glProgramUniform3f) \
+    USE_GL_FUNC(glProgramUniform3fEXT) \
+    USE_GL_FUNC(glProgramUniform3fv) \
+    USE_GL_FUNC(glProgramUniform3fvEXT) \
+    USE_GL_FUNC(glProgramUniform3i) \
+    USE_GL_FUNC(glProgramUniform3i64ARB) \
+    USE_GL_FUNC(glProgramUniform3i64NV) \
+    USE_GL_FUNC(glProgramUniform3i64vARB) \
+    USE_GL_FUNC(glProgramUniform3i64vNV) \
+    USE_GL_FUNC(glProgramUniform3iEXT) \
+    USE_GL_FUNC(glProgramUniform3iv) \
+    USE_GL_FUNC(glProgramUniform3ivEXT) \
+    USE_GL_FUNC(glProgramUniform3ui) \
+    USE_GL_FUNC(glProgramUniform3ui64ARB) \
+    USE_GL_FUNC(glProgramUniform3ui64NV) \
+    USE_GL_FUNC(glProgramUniform3ui64vARB) \
+    USE_GL_FUNC(glProgramUniform3ui64vNV) \
+    USE_GL_FUNC(glProgramUniform3uiEXT) \
+    USE_GL_FUNC(glProgramUniform3uiv) \
+    USE_GL_FUNC(glProgramUniform3uivEXT) \
+    USE_GL_FUNC(glProgramUniform4d) \
+    USE_GL_FUNC(glProgramUniform4dEXT) \
+    USE_GL_FUNC(glProgramUniform4dv) \
+    USE_GL_FUNC(glProgramUniform4dvEXT) \
+    USE_GL_FUNC(glProgramUniform4f) \
+    USE_GL_FUNC(glProgramUniform4fEXT) \
+    USE_GL_FUNC(glProgramUniform4fv) \
+    USE_GL_FUNC(glProgramUniform4fvEXT) \
+    USE_GL_FUNC(glProgramUniform4i) \
+    USE_GL_FUNC(glProgramUniform4i64ARB) \
+    USE_GL_FUNC(glProgramUniform4i64NV) \
+    USE_GL_FUNC(glProgramUniform4i64vARB) \
+    USE_GL_FUNC(glProgramUniform4i64vNV) \
+    USE_GL_FUNC(glProgramUniform4iEXT) \
+    USE_GL_FUNC(glProgramUniform4iv) \
+    USE_GL_FUNC(glProgramUniform4ivEXT) \
+    USE_GL_FUNC(glProgramUniform4ui) \
+    USE_GL_FUNC(glProgramUniform4ui64ARB) \
+    USE_GL_FUNC(glProgramUniform4ui64NV) \
+    USE_GL_FUNC(glProgramUniform4ui64vARB) \
+    USE_GL_FUNC(glProgramUniform4ui64vNV) \
+    USE_GL_FUNC(glProgramUniform4uiEXT) \
+    USE_GL_FUNC(glProgramUniform4uiv) \
+    USE_GL_FUNC(glProgramUniform4uivEXT) \
+    USE_GL_FUNC(glProgramUniformHandleui64ARB) \
+    USE_GL_FUNC(glProgramUniformHandleui64NV) \
+    USE_GL_FUNC(glProgramUniformHandleui64vARB) \
+    USE_GL_FUNC(glProgramUniformHandleui64vNV) \
+    USE_GL_FUNC(glProgramUniformMatrix2dv) \
+    USE_GL_FUNC(glProgramUniformMatrix2dvEXT) \
+    USE_GL_FUNC(glProgramUniformMatrix2fv) \
+    USE_GL_FUNC(glProgramUniformMatrix2fvEXT) \
+    USE_GL_FUNC(glProgramUniformMatrix2x3dv) \
+    USE_GL_FUNC(glProgramUniformMatrix2x3dvEXT) \
+    USE_GL_FUNC(glProgramUniformMatrix2x3fv) \
+    USE_GL_FUNC(glProgramUniformMatrix2x3fvEXT) \
+    USE_GL_FUNC(glProgramUniformMatrix2x4dv) \
+    USE_GL_FUNC(glProgramUniformMatrix2x4dvEXT) \
+    USE_GL_FUNC(glProgramUniformMatrix2x4fv) \
+    USE_GL_FUNC(glProgramUniformMatrix2x4fvEXT) \
+    USE_GL_FUNC(glProgramUniformMatrix3dv) \
+    USE_GL_FUNC(glProgramUniformMatrix3dvEXT) \
+    USE_GL_FUNC(glProgramUniformMatrix3fv) \
+    USE_GL_FUNC(glProgramUniformMatrix3fvEXT) \
+    USE_GL_FUNC(glProgramUniformMatrix3x2dv) \
+    USE_GL_FUNC(glProgramUniformMatrix3x2dvEXT) \
+    USE_GL_FUNC(glProgramUniformMatrix3x2fv) \
+    USE_GL_FUNC(glProgramUniformMatrix3x2fvEXT) \
+    USE_GL_FUNC(glProgramUniformMatrix3x4dv) \
+    USE_GL_FUNC(glProgramUniformMatrix3x4dvEXT) \
+    USE_GL_FUNC(glProgramUniformMatrix3x4fv) \
+    USE_GL_FUNC(glProgramUniformMatrix3x4fvEXT) \
+    USE_GL_FUNC(glProgramUniformMatrix4dv) \
+    USE_GL_FUNC(glProgramUniformMatrix4dvEXT) \
+    USE_GL_FUNC(glProgramUniformMatrix4fv) \
+    USE_GL_FUNC(glProgramUniformMatrix4fvEXT) \
+    USE_GL_FUNC(glProgramUniformMatrix4x2dv) \
+    USE_GL_FUNC(glProgramUniformMatrix4x2dvEXT) \
+    USE_GL_FUNC(glProgramUniformMatrix4x2fv) \
+    USE_GL_FUNC(glProgramUniformMatrix4x2fvEXT) \
+    USE_GL_FUNC(glProgramUniformMatrix4x3dv) \
+    USE_GL_FUNC(glProgramUniformMatrix4x3dvEXT) \
+    USE_GL_FUNC(glProgramUniformMatrix4x3fv) \
+    USE_GL_FUNC(glProgramUniformMatrix4x3fvEXT) \
+    USE_GL_FUNC(glProgramUniformui64NV) \
+    USE_GL_FUNC(glProgramUniformui64vNV) \
+    USE_GL_FUNC(glProgramVertexLimitNV) \
+    USE_GL_FUNC(glProvokingVertex) \
+    USE_GL_FUNC(glProvokingVertexEXT) \
+    USE_GL_FUNC(glPushClientAttribDefaultEXT) \
+    USE_GL_FUNC(glPushDebugGroup) \
+    USE_GL_FUNC(glPushGroupMarkerEXT) \
+    USE_GL_FUNC(glQueryCounter) \
+    USE_GL_FUNC(glQueryMatrixxOES) \
+    USE_GL_FUNC(glQueryObjectParameteruiAMD) \
+    USE_GL_FUNC(glQueryResourceNV) \
+    USE_GL_FUNC(glQueryResourceTagNV) \
+    USE_GL_FUNC(glRasterPos2xOES) \
+    USE_GL_FUNC(glRasterPos2xvOES) \
+    USE_GL_FUNC(glRasterPos3xOES) \
+    USE_GL_FUNC(glRasterPos3xvOES) \
+    USE_GL_FUNC(glRasterPos4xOES) \
+    USE_GL_FUNC(glRasterPos4xvOES) \
+    USE_GL_FUNC(glRasterSamplesEXT) \
+    USE_GL_FUNC(glReadBufferRegion) \
+    USE_GL_FUNC(glReadInstrumentsSGIX) \
+    USE_GL_FUNC(glReadnPixels) \
+    USE_GL_FUNC(glReadnPixelsARB) \
+    USE_GL_FUNC(glRectxOES) \
+    USE_GL_FUNC(glRectxvOES) \
+    USE_GL_FUNC(glReferencePlaneSGIX) \
+    USE_GL_FUNC(glReleaseKeyedMutexWin32EXT) \
+    USE_GL_FUNC(glReleaseShaderCompiler) \
+    USE_GL_FUNC(glRenderGpuMaskNV) \
+    USE_GL_FUNC(glRenderbufferStorage) \
+    USE_GL_FUNC(glRenderbufferStorageEXT) \
+    USE_GL_FUNC(glRenderbufferStorageMultisample) \
+    USE_GL_FUNC(glRenderbufferStorageMultisampleAdvancedAMD) \
+    USE_GL_FUNC(glRenderbufferStorageMultisampleCoverageNV) \
+    USE_GL_FUNC(glRenderbufferStorageMultisampleEXT) \
+    USE_GL_FUNC(glReplacementCodePointerSUN) \
+    USE_GL_FUNC(glReplacementCodeubSUN) \
+    USE_GL_FUNC(glReplacementCodeubvSUN) \
+    USE_GL_FUNC(glReplacementCodeuiColor3fVertex3fSUN) \
+    USE_GL_FUNC(glReplacementCodeuiColor3fVertex3fvSUN) \
+    USE_GL_FUNC(glReplacementCodeuiColor4fNormal3fVertex3fSUN) \
+    USE_GL_FUNC(glReplacementCodeuiColor4fNormal3fVertex3fvSUN) \
+    USE_GL_FUNC(glReplacementCodeuiColor4ubVertex3fSUN) \
+    USE_GL_FUNC(glReplacementCodeuiColor4ubVertex3fvSUN) \
+    USE_GL_FUNC(glReplacementCodeuiNormal3fVertex3fSUN) \
+    USE_GL_FUNC(glReplacementCodeuiNormal3fVertex3fvSUN) \
+    USE_GL_FUNC(glReplacementCodeuiSUN) \
+    USE_GL_FUNC(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) \
+    USE_GL_FUNC(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) \
+    USE_GL_FUNC(glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) \
+    USE_GL_FUNC(glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) \
+    USE_GL_FUNC(glReplacementCodeuiTexCoord2fVertex3fSUN) \
+    USE_GL_FUNC(glReplacementCodeuiTexCoord2fVertex3fvSUN) \
+    USE_GL_FUNC(glReplacementCodeuiVertex3fSUN) \
+    USE_GL_FUNC(glReplacementCodeuiVertex3fvSUN) \
+    USE_GL_FUNC(glReplacementCodeuivSUN) \
+    USE_GL_FUNC(glReplacementCodeusSUN) \
+    USE_GL_FUNC(glReplacementCodeusvSUN) \
+    USE_GL_FUNC(glRequestResidentProgramsNV) \
+    USE_GL_FUNC(glResetHistogram) \
+    USE_GL_FUNC(glResetHistogramEXT) \
+    USE_GL_FUNC(glResetMemoryObjectParameterNV) \
+    USE_GL_FUNC(glResetMinmax) \
+    USE_GL_FUNC(glResetMinmaxEXT) \
+    USE_GL_FUNC(glResizeBuffersMESA) \
+    USE_GL_FUNC(glResolveDepthValuesNV) \
+    USE_GL_FUNC(glResumeTransformFeedback) \
+    USE_GL_FUNC(glResumeTransformFeedbackNV) \
+    USE_GL_FUNC(glRotatexOES) \
+    USE_GL_FUNC(glSampleCoverage) \
+    USE_GL_FUNC(glSampleCoverageARB) \
+    USE_GL_FUNC(glSampleMapATI) \
+    USE_GL_FUNC(glSampleMaskEXT) \
+    USE_GL_FUNC(glSampleMaskIndexedNV) \
+    USE_GL_FUNC(glSampleMaskSGIS) \
+    USE_GL_FUNC(glSampleMaski) \
+    USE_GL_FUNC(glSamplePatternEXT) \
+    USE_GL_FUNC(glSamplePatternSGIS) \
+    USE_GL_FUNC(glSamplerParameterIiv) \
+    USE_GL_FUNC(glSamplerParameterIuiv) \
+    USE_GL_FUNC(glSamplerParameterf) \
+    USE_GL_FUNC(glSamplerParameterfv) \
+    USE_GL_FUNC(glSamplerParameteri) \
+    USE_GL_FUNC(glSamplerParameteriv) \
+    USE_GL_FUNC(glScalexOES) \
+    USE_GL_FUNC(glScissorArrayv) \
+    USE_GL_FUNC(glScissorExclusiveArrayvNV) \
+    USE_GL_FUNC(glScissorExclusiveNV) \
+    USE_GL_FUNC(glScissorIndexed) \
+    USE_GL_FUNC(glScissorIndexedv) \
+    USE_GL_FUNC(glSecondaryColor3b) \
+    USE_GL_FUNC(glSecondaryColor3bEXT) \
+    USE_GL_FUNC(glSecondaryColor3bv) \
+    USE_GL_FUNC(glSecondaryColor3bvEXT) \
+    USE_GL_FUNC(glSecondaryColor3d) \
+    USE_GL_FUNC(glSecondaryColor3dEXT) \
+    USE_GL_FUNC(glSecondaryColor3dv) \
+    USE_GL_FUNC(glSecondaryColor3dvEXT) \
+    USE_GL_FUNC(glSecondaryColor3f) \
+    USE_GL_FUNC(glSecondaryColor3fEXT) \
+    USE_GL_FUNC(glSecondaryColor3fv) \
+    USE_GL_FUNC(glSecondaryColor3fvEXT) \
+    USE_GL_FUNC(glSecondaryColor3hNV) \
+    USE_GL_FUNC(glSecondaryColor3hvNV) \
+    USE_GL_FUNC(glSecondaryColor3i) \
+    USE_GL_FUNC(glSecondaryColor3iEXT) \
+    USE_GL_FUNC(glSecondaryColor3iv) \
+    USE_GL_FUNC(glSecondaryColor3ivEXT) \
+    USE_GL_FUNC(glSecondaryColor3s) \
+    USE_GL_FUNC(glSecondaryColor3sEXT) \
+    USE_GL_FUNC(glSecondaryColor3sv) \
+    USE_GL_FUNC(glSecondaryColor3svEXT) \
+    USE_GL_FUNC(glSecondaryColor3ub) \
+    USE_GL_FUNC(glSecondaryColor3ubEXT) \
+    USE_GL_FUNC(glSecondaryColor3ubv) \
+    USE_GL_FUNC(glSecondaryColor3ubvEXT) \
+    USE_GL_FUNC(glSecondaryColor3ui) \
+    USE_GL_FUNC(glSecondaryColor3uiEXT) \
+    USE_GL_FUNC(glSecondaryColor3uiv) \
+    USE_GL_FUNC(glSecondaryColor3uivEXT) \
+    USE_GL_FUNC(glSecondaryColor3us) \
+    USE_GL_FUNC(glSecondaryColor3usEXT) \
+    USE_GL_FUNC(glSecondaryColor3usv) \
+    USE_GL_FUNC(glSecondaryColor3usvEXT) \
+    USE_GL_FUNC(glSecondaryColorFormatNV) \
+    USE_GL_FUNC(glSecondaryColorP3ui) \
+    USE_GL_FUNC(glSecondaryColorP3uiv) \
+    USE_GL_FUNC(glSecondaryColorPointer) \
+    USE_GL_FUNC(glSecondaryColorPointerEXT) \
+    USE_GL_FUNC(glSecondaryColorPointerListIBM) \
+    USE_GL_FUNC(glSelectPerfMonitorCountersAMD) \
+    USE_GL_FUNC(glSelectTextureCoordSetSGIS) \
+    USE_GL_FUNC(glSelectTextureSGIS) \
+    USE_GL_FUNC(glSemaphoreParameterui64vEXT) \
+    USE_GL_FUNC(glSeparableFilter2D) \
+    USE_GL_FUNC(glSeparableFilter2DEXT) \
+    USE_GL_FUNC(glSetFenceAPPLE) \
+    USE_GL_FUNC(glSetFenceNV) \
+    USE_GL_FUNC(glSetFragmentShaderConstantATI) \
+    USE_GL_FUNC(glSetInvariantEXT) \
+    USE_GL_FUNC(glSetLocalConstantEXT) \
+    USE_GL_FUNC(glSetMultisamplefvAMD) \
+    USE_GL_FUNC(glShaderBinary) \
+    USE_GL_FUNC(glShaderOp1EXT) \
+    USE_GL_FUNC(glShaderOp2EXT) \
+    USE_GL_FUNC(glShaderOp3EXT) \
+    USE_GL_FUNC(glShaderSource) \
+    USE_GL_FUNC(glShaderSourceARB) \
+    USE_GL_FUNC(glShaderStorageBlockBinding) \
+    USE_GL_FUNC(glShadingRateImageBarrierNV) \
+    USE_GL_FUNC(glShadingRateImagePaletteNV) \
+    USE_GL_FUNC(glShadingRateSampleOrderCustomNV) \
+    USE_GL_FUNC(glShadingRateSampleOrderNV) \
+    USE_GL_FUNC(glSharpenTexFuncSGIS) \
+    USE_GL_FUNC(glSignalSemaphoreEXT) \
+    USE_GL_FUNC(glSignalSemaphoreui64NVX) \
+    USE_GL_FUNC(glSignalVkFenceNV) \
+    USE_GL_FUNC(glSignalVkSemaphoreNV) \
+    USE_GL_FUNC(glSpecializeShader) \
+    USE_GL_FUNC(glSpecializeShaderARB) \
+    USE_GL_FUNC(glSpriteParameterfSGIX) \
+    USE_GL_FUNC(glSpriteParameterfvSGIX) \
+    USE_GL_FUNC(glSpriteParameteriSGIX) \
+    USE_GL_FUNC(glSpriteParameterivSGIX) \
+    USE_GL_FUNC(glStartInstrumentsSGIX) \
+    USE_GL_FUNC(glStateCaptureNV) \
+    USE_GL_FUNC(glStencilClearTagEXT) \
+    USE_GL_FUNC(glStencilFillPathInstancedNV) \
+    USE_GL_FUNC(glStencilFillPathNV) \
+    USE_GL_FUNC(glStencilFuncSeparate) \
+    USE_GL_FUNC(glStencilFuncSeparateATI) \
+    USE_GL_FUNC(glStencilMaskSeparate) \
+    USE_GL_FUNC(glStencilOpSeparate) \
+    USE_GL_FUNC(glStencilOpSeparateATI) \
+    USE_GL_FUNC(glStencilOpValueAMD) \
+    USE_GL_FUNC(glStencilStrokePathInstancedNV) \
+    USE_GL_FUNC(glStencilStrokePathNV) \
+    USE_GL_FUNC(glStencilThenCoverFillPathInstancedNV) \
+    USE_GL_FUNC(glStencilThenCoverFillPathNV) \
+    USE_GL_FUNC(glStencilThenCoverStrokePathInstancedNV) \
+    USE_GL_FUNC(glStencilThenCoverStrokePathNV) \
+    USE_GL_FUNC(glStopInstrumentsSGIX) \
+    USE_GL_FUNC(glStringMarkerGREMEDY) \
+    USE_GL_FUNC(glSubpixelPrecisionBiasNV) \
+    USE_GL_FUNC(glSwizzleEXT) \
+    USE_GL_FUNC(glSyncTextureINTEL) \
+    USE_GL_FUNC(glTagSampleBufferSGIX) \
+    USE_GL_FUNC(glTangent3bEXT) \
+    USE_GL_FUNC(glTangent3bvEXT) \
+    USE_GL_FUNC(glTangent3dEXT) \
+    USE_GL_FUNC(glTangent3dvEXT) \
+    USE_GL_FUNC(glTangent3fEXT) \
+    USE_GL_FUNC(glTangent3fvEXT) \
+    USE_GL_FUNC(glTangent3iEXT) \
+    USE_GL_FUNC(glTangent3ivEXT) \
+    USE_GL_FUNC(glTangent3sEXT) \
+    USE_GL_FUNC(glTangent3svEXT) \
+    USE_GL_FUNC(glTangentPointerEXT) \
+    USE_GL_FUNC(glTbufferMask3DFX) \
+    USE_GL_FUNC(glTessellationFactorAMD) \
+    USE_GL_FUNC(glTessellationModeAMD) \
+    USE_GL_FUNC(glTestFenceAPPLE) \
+    USE_GL_FUNC(glTestFenceNV) \
+    USE_GL_FUNC(glTestObjectAPPLE) \
+    USE_GL_FUNC(glTexAttachMemoryNV) \
+    USE_GL_FUNC(glTexBuffer) \
+    USE_GL_FUNC(glTexBufferARB) \
+    USE_GL_FUNC(glTexBufferEXT) \
+    USE_GL_FUNC(glTexBufferRange) \
+    USE_GL_FUNC(glTexBumpParameterfvATI) \
+    USE_GL_FUNC(glTexBumpParameterivATI) \
+    USE_GL_FUNC(glTexCoord1bOES) \
+    USE_GL_FUNC(glTexCoord1bvOES) \
+    USE_GL_FUNC(glTexCoord1hNV) \
+    USE_GL_FUNC(glTexCoord1hvNV) \
+    USE_GL_FUNC(glTexCoord1xOES) \
+    USE_GL_FUNC(glTexCoord1xvOES) \
+    USE_GL_FUNC(glTexCoord2bOES) \
+    USE_GL_FUNC(glTexCoord2bvOES) \
+    USE_GL_FUNC(glTexCoord2fColor3fVertex3fSUN) \
+    USE_GL_FUNC(glTexCoord2fColor3fVertex3fvSUN) \
+    USE_GL_FUNC(glTexCoord2fColor4fNormal3fVertex3fSUN) \
+    USE_GL_FUNC(glTexCoord2fColor4fNormal3fVertex3fvSUN) \
+    USE_GL_FUNC(glTexCoord2fColor4ubVertex3fSUN) \
+    USE_GL_FUNC(glTexCoord2fColor4ubVertex3fvSUN) \
+    USE_GL_FUNC(glTexCoord2fNormal3fVertex3fSUN) \
+    USE_GL_FUNC(glTexCoord2fNormal3fVertex3fvSUN) \
+    USE_GL_FUNC(glTexCoord2fVertex3fSUN) \
+    USE_GL_FUNC(glTexCoord2fVertex3fvSUN) \
+    USE_GL_FUNC(glTexCoord2hNV) \
+    USE_GL_FUNC(glTexCoord2hvNV) \
+    USE_GL_FUNC(glTexCoord2xOES) \
+    USE_GL_FUNC(glTexCoord2xvOES) \
+    USE_GL_FUNC(glTexCoord3bOES) \
+    USE_GL_FUNC(glTexCoord3bvOES) \
+    USE_GL_FUNC(glTexCoord3hNV) \
+    USE_GL_FUNC(glTexCoord3hvNV) \
+    USE_GL_FUNC(glTexCoord3xOES) \
+    USE_GL_FUNC(glTexCoord3xvOES) \
+    USE_GL_FUNC(glTexCoord4bOES) \
+    USE_GL_FUNC(glTexCoord4bvOES) \
+    USE_GL_FUNC(glTexCoord4fColor4fNormal3fVertex4fSUN) \
+    USE_GL_FUNC(glTexCoord4fColor4fNormal3fVertex4fvSUN) \
+    USE_GL_FUNC(glTexCoord4fVertex4fSUN) \
+    USE_GL_FUNC(glTexCoord4fVertex4fvSUN) \
+    USE_GL_FUNC(glTexCoord4hNV) \
+    USE_GL_FUNC(glTexCoord4hvNV) \
+    USE_GL_FUNC(glTexCoord4xOES) \
+    USE_GL_FUNC(glTexCoord4xvOES) \
+    USE_GL_FUNC(glTexCoordFormatNV) \
+    USE_GL_FUNC(glTexCoordP1ui) \
+    USE_GL_FUNC(glTexCoordP1uiv) \
+    USE_GL_FUNC(glTexCoordP2ui) \
+    USE_GL_FUNC(glTexCoordP2uiv) \
+    USE_GL_FUNC(glTexCoordP3ui) \
+    USE_GL_FUNC(glTexCoordP3uiv) \
+    USE_GL_FUNC(glTexCoordP4ui) \
+    USE_GL_FUNC(glTexCoordP4uiv) \
+    USE_GL_FUNC(glTexCoordPointerEXT) \
+    USE_GL_FUNC(glTexCoordPointerListIBM) \
+    USE_GL_FUNC(glTexCoordPointervINTEL) \
+    USE_GL_FUNC(glTexEnvxOES) \
+    USE_GL_FUNC(glTexEnvxvOES) \
+    USE_GL_FUNC(glTexFilterFuncSGIS) \
+    USE_GL_FUNC(glTexGenxOES) \
+    USE_GL_FUNC(glTexGenxvOES) \
+    USE_GL_FUNC(glTexImage2DMultisample) \
+    USE_GL_FUNC(glTexImage2DMultisampleCoverageNV) \
+    USE_GL_FUNC(glTexImage3D) \
+    USE_GL_FUNC(glTexImage3DEXT) \
+    USE_GL_FUNC(glTexImage3DMultisample) \
+    USE_GL_FUNC(glTexImage3DMultisampleCoverageNV) \
+    USE_GL_FUNC(glTexImage4DSGIS) \
+    USE_GL_FUNC(glTexPageCommitmentARB) \
+    USE_GL_FUNC(glTexParameterIiv) \
+    USE_GL_FUNC(glTexParameterIivEXT) \
+    USE_GL_FUNC(glTexParameterIuiv) \
+    USE_GL_FUNC(glTexParameterIuivEXT) \
+    USE_GL_FUNC(glTexParameterxOES) \
+    USE_GL_FUNC(glTexParameterxvOES) \
+    USE_GL_FUNC(glTexRenderbufferNV) \
+    USE_GL_FUNC(glTexStorage1D) \
+    USE_GL_FUNC(glTexStorage2D) \
+    USE_GL_FUNC(glTexStorage2DMultisample) \
+    USE_GL_FUNC(glTexStorage3D) \
+    USE_GL_FUNC(glTexStorage3DMultisample) \
+    USE_GL_FUNC(glTexStorageMem1DEXT) \
+    USE_GL_FUNC(glTexStorageMem2DEXT) \
+    USE_GL_FUNC(glTexStorageMem2DMultisampleEXT) \
+    USE_GL_FUNC(glTexStorageMem3DEXT) \
+    USE_GL_FUNC(glTexStorageMem3DMultisampleEXT) \
+    USE_GL_FUNC(glTexStorageSparseAMD) \
+    USE_GL_FUNC(glTexSubImage1DEXT) \
+    USE_GL_FUNC(glTexSubImage2DEXT) \
+    USE_GL_FUNC(glTexSubImage3D) \
+    USE_GL_FUNC(glTexSubImage3DEXT) \
+    USE_GL_FUNC(glTexSubImage4DSGIS) \
+    USE_GL_FUNC(glTextureAttachMemoryNV) \
+    USE_GL_FUNC(glTextureBarrier) \
+    USE_GL_FUNC(glTextureBarrierNV) \
+    USE_GL_FUNC(glTextureBuffer) \
+    USE_GL_FUNC(glTextureBufferEXT) \
+    USE_GL_FUNC(glTextureBufferRange) \
+    USE_GL_FUNC(glTextureBufferRangeEXT) \
+    USE_GL_FUNC(glTextureColorMaskSGIS) \
+    USE_GL_FUNC(glTextureImage1DEXT) \
+    USE_GL_FUNC(glTextureImage2DEXT) \
+    USE_GL_FUNC(glTextureImage2DMultisampleCoverageNV) \
+    USE_GL_FUNC(glTextureImage2DMultisampleNV) \
+    USE_GL_FUNC(glTextureImage3DEXT) \
+    USE_GL_FUNC(glTextureImage3DMultisampleCoverageNV) \
+    USE_GL_FUNC(glTextureImage3DMultisampleNV) \
+    USE_GL_FUNC(glTextureLightEXT) \
+    USE_GL_FUNC(glTextureMaterialEXT) \
+    USE_GL_FUNC(glTextureNormalEXT) \
+    USE_GL_FUNC(glTexturePageCommitmentEXT) \
+    USE_GL_FUNC(glTextureParameterIiv) \
+    USE_GL_FUNC(glTextureParameterIivEXT) \
+    USE_GL_FUNC(glTextureParameterIuiv) \
+    USE_GL_FUNC(glTextureParameterIuivEXT) \
+    USE_GL_FUNC(glTextureParameterf) \
+    USE_GL_FUNC(glTextureParameterfEXT) \
+    USE_GL_FUNC(glTextureParameterfv) \
+    USE_GL_FUNC(glTextureParameterfvEXT) \
+    USE_GL_FUNC(glTextureParameteri) \
+    USE_GL_FUNC(glTextureParameteriEXT) \
+    USE_GL_FUNC(glTextureParameteriv) \
+    USE_GL_FUNC(glTextureParameterivEXT) \
+    USE_GL_FUNC(glTextureRangeAPPLE) \
+    USE_GL_FUNC(glTextureRenderbufferEXT) \
+    USE_GL_FUNC(glTextureStorage1D) \
+    USE_GL_FUNC(glTextureStorage1DEXT) \
+    USE_GL_FUNC(glTextureStorage2D) \
+    USE_GL_FUNC(glTextureStorage2DEXT) \
+    USE_GL_FUNC(glTextureStorage2DMultisample) \
+    USE_GL_FUNC(glTextureStorage2DMultisampleEXT) \
+    USE_GL_FUNC(glTextureStorage3D) \
+    USE_GL_FUNC(glTextureStorage3DEXT) \
+    USE_GL_FUNC(glTextureStorage3DMultisample) \
+    USE_GL_FUNC(glTextureStorage3DMultisampleEXT) \
+    USE_GL_FUNC(glTextureStorageMem1DEXT) \
+    USE_GL_FUNC(glTextureStorageMem2DEXT) \
+    USE_GL_FUNC(glTextureStorageMem2DMultisampleEXT) \
+    USE_GL_FUNC(glTextureStorageMem3DEXT) \
+    USE_GL_FUNC(glTextureStorageMem3DMultisampleEXT) \
+    USE_GL_FUNC(glTextureStorageSparseAMD) \
+    USE_GL_FUNC(glTextureSubImage1D) \
+    USE_GL_FUNC(glTextureSubImage1DEXT) \
+    USE_GL_FUNC(glTextureSubImage2D) \
+    USE_GL_FUNC(glTextureSubImage2DEXT) \
+    USE_GL_FUNC(glTextureSubImage3D) \
+    USE_GL_FUNC(glTextureSubImage3DEXT) \
+    USE_GL_FUNC(glTextureView) \
+    USE_GL_FUNC(glTrackMatrixNV) \
+    USE_GL_FUNC(glTransformFeedbackAttribsNV) \
+    USE_GL_FUNC(glTransformFeedbackBufferBase) \
+    USE_GL_FUNC(glTransformFeedbackBufferRange) \
+    USE_GL_FUNC(glTransformFeedbackStreamAttribsNV) \
+    USE_GL_FUNC(glTransformFeedbackVaryings) \
+    USE_GL_FUNC(glTransformFeedbackVaryingsEXT) \
+    USE_GL_FUNC(glTransformFeedbackVaryingsNV) \
+    USE_GL_FUNC(glTransformPathNV) \
+    USE_GL_FUNC(glTranslatexOES) \
+    USE_GL_FUNC(glUniform1d) \
+    USE_GL_FUNC(glUniform1dv) \
+    USE_GL_FUNC(glUniform1f) \
+    USE_GL_FUNC(glUniform1fARB) \
+    USE_GL_FUNC(glUniform1fv) \
+    USE_GL_FUNC(glUniform1fvARB) \
+    USE_GL_FUNC(glUniform1i) \
+    USE_GL_FUNC(glUniform1i64ARB) \
+    USE_GL_FUNC(glUniform1i64NV) \
+    USE_GL_FUNC(glUniform1i64vARB) \
+    USE_GL_FUNC(glUniform1i64vNV) \
+    USE_GL_FUNC(glUniform1iARB) \
+    USE_GL_FUNC(glUniform1iv) \
+    USE_GL_FUNC(glUniform1ivARB) \
+    USE_GL_FUNC(glUniform1ui) \
+    USE_GL_FUNC(glUniform1ui64ARB) \
+    USE_GL_FUNC(glUniform1ui64NV) \
+    USE_GL_FUNC(glUniform1ui64vARB) \
+    USE_GL_FUNC(glUniform1ui64vNV) \
+    USE_GL_FUNC(glUniform1uiEXT) \
+    USE_GL_FUNC(glUniform1uiv) \
+    USE_GL_FUNC(glUniform1uivEXT) \
+    USE_GL_FUNC(glUniform2d) \
+    USE_GL_FUNC(glUniform2dv) \
+    USE_GL_FUNC(glUniform2f) \
+    USE_GL_FUNC(glUniform2fARB) \
+    USE_GL_FUNC(glUniform2fv) \
+    USE_GL_FUNC(glUniform2fvARB) \
+    USE_GL_FUNC(glUniform2i) \
+    USE_GL_FUNC(glUniform2i64ARB) \
+    USE_GL_FUNC(glUniform2i64NV) \
+    USE_GL_FUNC(glUniform2i64vARB) \
+    USE_GL_FUNC(glUniform2i64vNV) \
+    USE_GL_FUNC(glUniform2iARB) \
+    USE_GL_FUNC(glUniform2iv) \
+    USE_GL_FUNC(glUniform2ivARB) \
+    USE_GL_FUNC(glUniform2ui) \
+    USE_GL_FUNC(glUniform2ui64ARB) \
+    USE_GL_FUNC(glUniform2ui64NV) \
+    USE_GL_FUNC(glUniform2ui64vARB) \
+    USE_GL_FUNC(glUniform2ui64vNV) \
+    USE_GL_FUNC(glUniform2uiEXT) \
+    USE_GL_FUNC(glUniform2uiv) \
+    USE_GL_FUNC(glUniform2uivEXT) \
+    USE_GL_FUNC(glUniform3d) \
+    USE_GL_FUNC(glUniform3dv) \
+    USE_GL_FUNC(glUniform3f) \
+    USE_GL_FUNC(glUniform3fARB) \
+    USE_GL_FUNC(glUniform3fv) \
+    USE_GL_FUNC(glUniform3fvARB) \
+    USE_GL_FUNC(glUniform3i) \
+    USE_GL_FUNC(glUniform3i64ARB) \
+    USE_GL_FUNC(glUniform3i64NV) \
+    USE_GL_FUNC(glUniform3i64vARB) \
+    USE_GL_FUNC(glUniform3i64vNV) \
+    USE_GL_FUNC(glUniform3iARB) \
+    USE_GL_FUNC(glUniform3iv) \
+    USE_GL_FUNC(glUniform3ivARB) \
+    USE_GL_FUNC(glUniform3ui) \
+    USE_GL_FUNC(glUniform3ui64ARB) \
+    USE_GL_FUNC(glUniform3ui64NV) \
+    USE_GL_FUNC(glUniform3ui64vARB) \
+    USE_GL_FUNC(glUniform3ui64vNV) \
+    USE_GL_FUNC(glUniform3uiEXT) \
+    USE_GL_FUNC(glUniform3uiv) \
+    USE_GL_FUNC(glUniform3uivEXT) \
+    USE_GL_FUNC(glUniform4d) \
+    USE_GL_FUNC(glUniform4dv) \
+    USE_GL_FUNC(glUniform4f) \
+    USE_GL_FUNC(glUniform4fARB) \
+    USE_GL_FUNC(glUniform4fv) \
+    USE_GL_FUNC(glUniform4fvARB) \
+    USE_GL_FUNC(glUniform4i) \
+    USE_GL_FUNC(glUniform4i64ARB) \
+    USE_GL_FUNC(glUniform4i64NV) \
+    USE_GL_FUNC(glUniform4i64vARB) \
+    USE_GL_FUNC(glUniform4i64vNV) \
+    USE_GL_FUNC(glUniform4iARB) \
+    USE_GL_FUNC(glUniform4iv) \
+    USE_GL_FUNC(glUniform4ivARB) \
+    USE_GL_FUNC(glUniform4ui) \
+    USE_GL_FUNC(glUniform4ui64ARB) \
+    USE_GL_FUNC(glUniform4ui64NV) \
+    USE_GL_FUNC(glUniform4ui64vARB) \
+    USE_GL_FUNC(glUniform4ui64vNV) \
+    USE_GL_FUNC(glUniform4uiEXT) \
+    USE_GL_FUNC(glUniform4uiv) \
+    USE_GL_FUNC(glUniform4uivEXT) \
+    USE_GL_FUNC(glUniformBlockBinding) \
+    USE_GL_FUNC(glUniformBufferEXT) \
+    USE_GL_FUNC(glUniformHandleui64ARB) \
+    USE_GL_FUNC(glUniformHandleui64NV) \
+    USE_GL_FUNC(glUniformHandleui64vARB) \
+    USE_GL_FUNC(glUniformHandleui64vNV) \
+    USE_GL_FUNC(glUniformMatrix2dv) \
+    USE_GL_FUNC(glUniformMatrix2fv) \
+    USE_GL_FUNC(glUniformMatrix2fvARB) \
+    USE_GL_FUNC(glUniformMatrix2x3dv) \
+    USE_GL_FUNC(glUniformMatrix2x3fv) \
+    USE_GL_FUNC(glUniformMatrix2x4dv) \
+    USE_GL_FUNC(glUniformMatrix2x4fv) \
+    USE_GL_FUNC(glUniformMatrix3dv) \
+    USE_GL_FUNC(glUniformMatrix3fv) \
+    USE_GL_FUNC(glUniformMatrix3fvARB) \
+    USE_GL_FUNC(glUniformMatrix3x2dv) \
+    USE_GL_FUNC(glUniformMatrix3x2fv) \
+    USE_GL_FUNC(glUniformMatrix3x4dv) \
+    USE_GL_FUNC(glUniformMatrix3x4fv) \
+    USE_GL_FUNC(glUniformMatrix4dv) \
+    USE_GL_FUNC(glUniformMatrix4fv) \
+    USE_GL_FUNC(glUniformMatrix4fvARB) \
+    USE_GL_FUNC(glUniformMatrix4x2dv) \
+    USE_GL_FUNC(glUniformMatrix4x2fv) \
+    USE_GL_FUNC(glUniformMatrix4x3dv) \
+    USE_GL_FUNC(glUniformMatrix4x3fv) \
+    USE_GL_FUNC(glUniformSubroutinesuiv) \
+    USE_GL_FUNC(glUniformui64NV) \
+    USE_GL_FUNC(glUniformui64vNV) \
+    USE_GL_FUNC(glUnlockArraysEXT) \
+    USE_GL_FUNC(glUnmapBuffer) \
+    USE_GL_FUNC(glUnmapBufferARB) \
+    USE_GL_FUNC(glUnmapNamedBuffer) \
+    USE_GL_FUNC(glUnmapNamedBufferEXT) \
+    USE_GL_FUNC(glUnmapObjectBufferATI) \
+    USE_GL_FUNC(glUnmapTexture2DINTEL) \
+    USE_GL_FUNC(glUpdateObjectBufferATI) \
+    USE_GL_FUNC(glUploadGpuMaskNVX) \
+    USE_GL_FUNC(glUseProgram) \
+    USE_GL_FUNC(glUseProgramObjectARB) \
+    USE_GL_FUNC(glUseProgramStages) \
+    USE_GL_FUNC(glUseShaderProgramEXT) \
+    USE_GL_FUNC(glVDPAUFiniNV) \
+    USE_GL_FUNC(glVDPAUGetSurfaceivNV) \
+    USE_GL_FUNC(glVDPAUInitNV) \
+    USE_GL_FUNC(glVDPAUIsSurfaceNV) \
+    USE_GL_FUNC(glVDPAUMapSurfacesNV) \
+    USE_GL_FUNC(glVDPAURegisterOutputSurfaceNV) \
+    USE_GL_FUNC(glVDPAURegisterVideoSurfaceNV) \
+    USE_GL_FUNC(glVDPAURegisterVideoSurfaceWithPictureStructureNV) \
+    USE_GL_FUNC(glVDPAUSurfaceAccessNV) \
+    USE_GL_FUNC(glVDPAUUnmapSurfacesNV) \
+    USE_GL_FUNC(glVDPAUUnregisterSurfaceNV) \
+    USE_GL_FUNC(glValidateProgram) \
+    USE_GL_FUNC(glValidateProgramARB) \
+    USE_GL_FUNC(glValidateProgramPipeline) \
+    USE_GL_FUNC(glVariantArrayObjectATI) \
+    USE_GL_FUNC(glVariantPointerEXT) \
+    USE_GL_FUNC(glVariantbvEXT) \
+    USE_GL_FUNC(glVariantdvEXT) \
+    USE_GL_FUNC(glVariantfvEXT) \
+    USE_GL_FUNC(glVariantivEXT) \
+    USE_GL_FUNC(glVariantsvEXT) \
+    USE_GL_FUNC(glVariantubvEXT) \
+    USE_GL_FUNC(glVariantuivEXT) \
+    USE_GL_FUNC(glVariantusvEXT) \
+    USE_GL_FUNC(glVertex2bOES) \
+    USE_GL_FUNC(glVertex2bvOES) \
+    USE_GL_FUNC(glVertex2hNV) \
+    USE_GL_FUNC(glVertex2hvNV) \
+    USE_GL_FUNC(glVertex2xOES) \
+    USE_GL_FUNC(glVertex2xvOES) \
+    USE_GL_FUNC(glVertex3bOES) \
+    USE_GL_FUNC(glVertex3bvOES) \
+    USE_GL_FUNC(glVertex3hNV) \
+    USE_GL_FUNC(glVertex3hvNV) \
+    USE_GL_FUNC(glVertex3xOES) \
+    USE_GL_FUNC(glVertex3xvOES) \
+    USE_GL_FUNC(glVertex4bOES) \
+    USE_GL_FUNC(glVertex4bvOES) \
+    USE_GL_FUNC(glVertex4hNV) \
+    USE_GL_FUNC(glVertex4hvNV) \
+    USE_GL_FUNC(glVertex4xOES) \
+    USE_GL_FUNC(glVertex4xvOES) \
+    USE_GL_FUNC(glVertexArrayAttribBinding) \
+    USE_GL_FUNC(glVertexArrayAttribFormat) \
+    USE_GL_FUNC(glVertexArrayAttribIFormat) \
+    USE_GL_FUNC(glVertexArrayAttribLFormat) \
+    USE_GL_FUNC(glVertexArrayBindVertexBufferEXT) \
+    USE_GL_FUNC(glVertexArrayBindingDivisor) \
+    USE_GL_FUNC(glVertexArrayColorOffsetEXT) \
+    USE_GL_FUNC(glVertexArrayEdgeFlagOffsetEXT) \
+    USE_GL_FUNC(glVertexArrayElementBuffer) \
+    USE_GL_FUNC(glVertexArrayFogCoordOffsetEXT) \
+    USE_GL_FUNC(glVertexArrayIndexOffsetEXT) \
+    USE_GL_FUNC(glVertexArrayMultiTexCoordOffsetEXT) \
+    USE_GL_FUNC(glVertexArrayNormalOffsetEXT) \
+    USE_GL_FUNC(glVertexArrayParameteriAPPLE) \
+    USE_GL_FUNC(glVertexArrayRangeAPPLE) \
+    USE_GL_FUNC(glVertexArrayRangeNV) \
+    USE_GL_FUNC(glVertexArraySecondaryColorOffsetEXT) \
+    USE_GL_FUNC(glVertexArrayTexCoordOffsetEXT) \
+    USE_GL_FUNC(glVertexArrayVertexAttribBindingEXT) \
+    USE_GL_FUNC(glVertexArrayVertexAttribDivisorEXT) \
+    USE_GL_FUNC(glVertexArrayVertexAttribFormatEXT) \
+    USE_GL_FUNC(glVertexArrayVertexAttribIFormatEXT) \
+    USE_GL_FUNC(glVertexArrayVertexAttribIOffsetEXT) \
+    USE_GL_FUNC(glVertexArrayVertexAttribLFormatEXT) \
+    USE_GL_FUNC(glVertexArrayVertexAttribLOffsetEXT) \
+    USE_GL_FUNC(glVertexArrayVertexAttribOffsetEXT) \
+    USE_GL_FUNC(glVertexArrayVertexBindingDivisorEXT) \
+    USE_GL_FUNC(glVertexArrayVertexBuffer) \
+    USE_GL_FUNC(glVertexArrayVertexBuffers) \
+    USE_GL_FUNC(glVertexArrayVertexOffsetEXT) \
+    USE_GL_FUNC(glVertexAttrib1d) \
+    USE_GL_FUNC(glVertexAttrib1dARB) \
+    USE_GL_FUNC(glVertexAttrib1dNV) \
+    USE_GL_FUNC(glVertexAttrib1dv) \
+    USE_GL_FUNC(glVertexAttrib1dvARB) \
+    USE_GL_FUNC(glVertexAttrib1dvNV) \
+    USE_GL_FUNC(glVertexAttrib1f) \
+    USE_GL_FUNC(glVertexAttrib1fARB) \
+    USE_GL_FUNC(glVertexAttrib1fNV) \
+    USE_GL_FUNC(glVertexAttrib1fv) \
+    USE_GL_FUNC(glVertexAttrib1fvARB) \
+    USE_GL_FUNC(glVertexAttrib1fvNV) \
+    USE_GL_FUNC(glVertexAttrib1hNV) \
+    USE_GL_FUNC(glVertexAttrib1hvNV) \
+    USE_GL_FUNC(glVertexAttrib1s) \
+    USE_GL_FUNC(glVertexAttrib1sARB) \
+    USE_GL_FUNC(glVertexAttrib1sNV) \
+    USE_GL_FUNC(glVertexAttrib1sv) \
+    USE_GL_FUNC(glVertexAttrib1svARB) \
+    USE_GL_FUNC(glVertexAttrib1svNV) \
+    USE_GL_FUNC(glVertexAttrib2d) \
+    USE_GL_FUNC(glVertexAttrib2dARB) \
+    USE_GL_FUNC(glVertexAttrib2dNV) \
+    USE_GL_FUNC(glVertexAttrib2dv) \
+    USE_GL_FUNC(glVertexAttrib2dvARB) \
+    USE_GL_FUNC(glVertexAttrib2dvNV) \
+    USE_GL_FUNC(glVertexAttrib2f) \
+    USE_GL_FUNC(glVertexAttrib2fARB) \
+    USE_GL_FUNC(glVertexAttrib2fNV) \
+    USE_GL_FUNC(glVertexAttrib2fv) \
+    USE_GL_FUNC(glVertexAttrib2fvARB) \
+    USE_GL_FUNC(glVertexAttrib2fvNV) \
+    USE_GL_FUNC(glVertexAttrib2hNV) \
+    USE_GL_FUNC(glVertexAttrib2hvNV) \
+    USE_GL_FUNC(glVertexAttrib2s) \
+    USE_GL_FUNC(glVertexAttrib2sARB) \
+    USE_GL_FUNC(glVertexAttrib2sNV) \
+    USE_GL_FUNC(glVertexAttrib2sv) \
+    USE_GL_FUNC(glVertexAttrib2svARB) \
+    USE_GL_FUNC(glVertexAttrib2svNV) \
+    USE_GL_FUNC(glVertexAttrib3d) \
+    USE_GL_FUNC(glVertexAttrib3dARB) \
+    USE_GL_FUNC(glVertexAttrib3dNV) \
+    USE_GL_FUNC(glVertexAttrib3dv) \
+    USE_GL_FUNC(glVertexAttrib3dvARB) \
+    USE_GL_FUNC(glVertexAttrib3dvNV) \
+    USE_GL_FUNC(glVertexAttrib3f) \
+    USE_GL_FUNC(glVertexAttrib3fARB) \
+    USE_GL_FUNC(glVertexAttrib3fNV) \
+    USE_GL_FUNC(glVertexAttrib3fv) \
+    USE_GL_FUNC(glVertexAttrib3fvARB) \
+    USE_GL_FUNC(glVertexAttrib3fvNV) \
+    USE_GL_FUNC(glVertexAttrib3hNV) \
+    USE_GL_FUNC(glVertexAttrib3hvNV) \
+    USE_GL_FUNC(glVertexAttrib3s) \
+    USE_GL_FUNC(glVertexAttrib3sARB) \
+    USE_GL_FUNC(glVertexAttrib3sNV) \
+    USE_GL_FUNC(glVertexAttrib3sv) \
+    USE_GL_FUNC(glVertexAttrib3svARB) \
+    USE_GL_FUNC(glVertexAttrib3svNV) \
+    USE_GL_FUNC(glVertexAttrib4Nbv) \
+    USE_GL_FUNC(glVertexAttrib4NbvARB) \
+    USE_GL_FUNC(glVertexAttrib4Niv) \
+    USE_GL_FUNC(glVertexAttrib4NivARB) \
+    USE_GL_FUNC(glVertexAttrib4Nsv) \
+    USE_GL_FUNC(glVertexAttrib4NsvARB) \
+    USE_GL_FUNC(glVertexAttrib4Nub) \
+    USE_GL_FUNC(glVertexAttrib4NubARB) \
+    USE_GL_FUNC(glVertexAttrib4Nubv) \
+    USE_GL_FUNC(glVertexAttrib4NubvARB) \
+    USE_GL_FUNC(glVertexAttrib4Nuiv) \
+    USE_GL_FUNC(glVertexAttrib4NuivARB) \
+    USE_GL_FUNC(glVertexAttrib4Nusv) \
+    USE_GL_FUNC(glVertexAttrib4NusvARB) \
+    USE_GL_FUNC(glVertexAttrib4bv) \
+    USE_GL_FUNC(glVertexAttrib4bvARB) \
+    USE_GL_FUNC(glVertexAttrib4d) \
+    USE_GL_FUNC(glVertexAttrib4dARB) \
+    USE_GL_FUNC(glVertexAttrib4dNV) \
+    USE_GL_FUNC(glVertexAttrib4dv) \
+    USE_GL_FUNC(glVertexAttrib4dvARB) \
+    USE_GL_FUNC(glVertexAttrib4dvNV) \
+    USE_GL_FUNC(glVertexAttrib4f) \
+    USE_GL_FUNC(glVertexAttrib4fARB) \
+    USE_GL_FUNC(glVertexAttrib4fNV) \
+    USE_GL_FUNC(glVertexAttrib4fv) \
+    USE_GL_FUNC(glVertexAttrib4fvARB) \
+    USE_GL_FUNC(glVertexAttrib4fvNV) \
+    USE_GL_FUNC(glVertexAttrib4hNV) \
+    USE_GL_FUNC(glVertexAttrib4hvNV) \
+    USE_GL_FUNC(glVertexAttrib4iv) \
+    USE_GL_FUNC(glVertexAttrib4ivARB) \
+    USE_GL_FUNC(glVertexAttrib4s) \
+    USE_GL_FUNC(glVertexAttrib4sARB) \
+    USE_GL_FUNC(glVertexAttrib4sNV) \
+    USE_GL_FUNC(glVertexAttrib4sv) \
+    USE_GL_FUNC(glVertexAttrib4svARB) \
+    USE_GL_FUNC(glVertexAttrib4svNV) \
+    USE_GL_FUNC(glVertexAttrib4ubNV) \
+    USE_GL_FUNC(glVertexAttrib4ubv) \
+    USE_GL_FUNC(glVertexAttrib4ubvARB) \
+    USE_GL_FUNC(glVertexAttrib4ubvNV) \
+    USE_GL_FUNC(glVertexAttrib4uiv) \
+    USE_GL_FUNC(glVertexAttrib4uivARB) \
+    USE_GL_FUNC(glVertexAttrib4usv) \
+    USE_GL_FUNC(glVertexAttrib4usvARB) \
+    USE_GL_FUNC(glVertexAttribArrayObjectATI) \
+    USE_GL_FUNC(glVertexAttribBinding) \
+    USE_GL_FUNC(glVertexAttribDivisor) \
+    USE_GL_FUNC(glVertexAttribDivisorARB) \
+    USE_GL_FUNC(glVertexAttribFormat) \
+    USE_GL_FUNC(glVertexAttribFormatNV) \
+    USE_GL_FUNC(glVertexAttribI1i) \
+    USE_GL_FUNC(glVertexAttribI1iEXT) \
+    USE_GL_FUNC(glVertexAttribI1iv) \
+    USE_GL_FUNC(glVertexAttribI1ivEXT) \
+    USE_GL_FUNC(glVertexAttribI1ui) \
+    USE_GL_FUNC(glVertexAttribI1uiEXT) \
+    USE_GL_FUNC(glVertexAttribI1uiv) \
+    USE_GL_FUNC(glVertexAttribI1uivEXT) \
+    USE_GL_FUNC(glVertexAttribI2i) \
+    USE_GL_FUNC(glVertexAttribI2iEXT) \
+    USE_GL_FUNC(glVertexAttribI2iv) \
+    USE_GL_FUNC(glVertexAttribI2ivEXT) \
+    USE_GL_FUNC(glVertexAttribI2ui) \
+    USE_GL_FUNC(glVertexAttribI2uiEXT) \
+    USE_GL_FUNC(glVertexAttribI2uiv) \
+    USE_GL_FUNC(glVertexAttribI2uivEXT) \
+    USE_GL_FUNC(glVertexAttribI3i) \
+    USE_GL_FUNC(glVertexAttribI3iEXT) \
+    USE_GL_FUNC(glVertexAttribI3iv) \
+    USE_GL_FUNC(glVertexAttribI3ivEXT) \
+    USE_GL_FUNC(glVertexAttribI3ui) \
+    USE_GL_FUNC(glVertexAttribI3uiEXT) \
+    USE_GL_FUNC(glVertexAttribI3uiv) \
+    USE_GL_FUNC(glVertexAttribI3uivEXT) \
+    USE_GL_FUNC(glVertexAttribI4bv) \
+    USE_GL_FUNC(glVertexAttribI4bvEXT) \
+    USE_GL_FUNC(glVertexAttribI4i) \
+    USE_GL_FUNC(glVertexAttribI4iEXT) \
+    USE_GL_FUNC(glVertexAttribI4iv) \
+    USE_GL_FUNC(glVertexAttribI4ivEXT) \
+    USE_GL_FUNC(glVertexAttribI4sv) \
+    USE_GL_FUNC(glVertexAttribI4svEXT) \
+    USE_GL_FUNC(glVertexAttribI4ubv) \
+    USE_GL_FUNC(glVertexAttribI4ubvEXT) \
+    USE_GL_FUNC(glVertexAttribI4ui) \
+    USE_GL_FUNC(glVertexAttribI4uiEXT) \
+    USE_GL_FUNC(glVertexAttribI4uiv) \
+    USE_GL_FUNC(glVertexAttribI4uivEXT) \
+    USE_GL_FUNC(glVertexAttribI4usv) \
+    USE_GL_FUNC(glVertexAttribI4usvEXT) \
+    USE_GL_FUNC(glVertexAttribIFormat) \
+    USE_GL_FUNC(glVertexAttribIFormatNV) \
+    USE_GL_FUNC(glVertexAttribIPointer) \
+    USE_GL_FUNC(glVertexAttribIPointerEXT) \
+    USE_GL_FUNC(glVertexAttribL1d) \
+    USE_GL_FUNC(glVertexAttribL1dEXT) \
+    USE_GL_FUNC(glVertexAttribL1dv) \
+    USE_GL_FUNC(glVertexAttribL1dvEXT) \
+    USE_GL_FUNC(glVertexAttribL1i64NV) \
+    USE_GL_FUNC(glVertexAttribL1i64vNV) \
+    USE_GL_FUNC(glVertexAttribL1ui64ARB) \
+    USE_GL_FUNC(glVertexAttribL1ui64NV) \
+    USE_GL_FUNC(glVertexAttribL1ui64vARB) \
+    USE_GL_FUNC(glVertexAttribL1ui64vNV) \
+    USE_GL_FUNC(glVertexAttribL2d) \
+    USE_GL_FUNC(glVertexAttribL2dEXT) \
+    USE_GL_FUNC(glVertexAttribL2dv) \
+    USE_GL_FUNC(glVertexAttribL2dvEXT) \
+    USE_GL_FUNC(glVertexAttribL2i64NV) \
+    USE_GL_FUNC(glVertexAttribL2i64vNV) \
+    USE_GL_FUNC(glVertexAttribL2ui64NV) \
+    USE_GL_FUNC(glVertexAttribL2ui64vNV) \
+    USE_GL_FUNC(glVertexAttribL3d) \
+    USE_GL_FUNC(glVertexAttribL3dEXT) \
+    USE_GL_FUNC(glVertexAttribL3dv) \
+    USE_GL_FUNC(glVertexAttribL3dvEXT) \
+    USE_GL_FUNC(glVertexAttribL3i64NV) \
+    USE_GL_FUNC(glVertexAttribL3i64vNV) \
+    USE_GL_FUNC(glVertexAttribL3ui64NV) \
+    USE_GL_FUNC(glVertexAttribL3ui64vNV) \
+    USE_GL_FUNC(glVertexAttribL4d) \
+    USE_GL_FUNC(glVertexAttribL4dEXT) \
+    USE_GL_FUNC(glVertexAttribL4dv) \
+    USE_GL_FUNC(glVertexAttribL4dvEXT) \
+    USE_GL_FUNC(glVertexAttribL4i64NV) \
+    USE_GL_FUNC(glVertexAttribL4i64vNV) \
+    USE_GL_FUNC(glVertexAttribL4ui64NV) \
+    USE_GL_FUNC(glVertexAttribL4ui64vNV) \
+    USE_GL_FUNC(glVertexAttribLFormat) \
+    USE_GL_FUNC(glVertexAttribLFormatNV) \
+    USE_GL_FUNC(glVertexAttribLPointer) \
+    USE_GL_FUNC(glVertexAttribLPointerEXT) \
+    USE_GL_FUNC(glVertexAttribP1ui) \
+    USE_GL_FUNC(glVertexAttribP1uiv) \
+    USE_GL_FUNC(glVertexAttribP2ui) \
+    USE_GL_FUNC(glVertexAttribP2uiv) \
+    USE_GL_FUNC(glVertexAttribP3ui) \
+    USE_GL_FUNC(glVertexAttribP3uiv) \
+    USE_GL_FUNC(glVertexAttribP4ui) \
+    USE_GL_FUNC(glVertexAttribP4uiv) \
+    USE_GL_FUNC(glVertexAttribParameteriAMD) \
+    USE_GL_FUNC(glVertexAttribPointer) \
+    USE_GL_FUNC(glVertexAttribPointerARB) \
+    USE_GL_FUNC(glVertexAttribPointerNV) \
+    USE_GL_FUNC(glVertexAttribs1dvNV) \
+    USE_GL_FUNC(glVertexAttribs1fvNV) \
+    USE_GL_FUNC(glVertexAttribs1hvNV) \
+    USE_GL_FUNC(glVertexAttribs1svNV) \
+    USE_GL_FUNC(glVertexAttribs2dvNV) \
+    USE_GL_FUNC(glVertexAttribs2fvNV) \
+    USE_GL_FUNC(glVertexAttribs2hvNV) \
+    USE_GL_FUNC(glVertexAttribs2svNV) \
+    USE_GL_FUNC(glVertexAttribs3dvNV) \
+    USE_GL_FUNC(glVertexAttribs3fvNV) \
+    USE_GL_FUNC(glVertexAttribs3hvNV) \
+    USE_GL_FUNC(glVertexAttribs3svNV) \
+    USE_GL_FUNC(glVertexAttribs4dvNV) \
+    USE_GL_FUNC(glVertexAttribs4fvNV) \
+    USE_GL_FUNC(glVertexAttribs4hvNV) \
+    USE_GL_FUNC(glVertexAttribs4svNV) \
+    USE_GL_FUNC(glVertexAttribs4ubvNV) \
+    USE_GL_FUNC(glVertexBindingDivisor) \
+    USE_GL_FUNC(glVertexBlendARB) \
+    USE_GL_FUNC(glVertexBlendEnvfATI) \
+    USE_GL_FUNC(glVertexBlendEnviATI) \
+    USE_GL_FUNC(glVertexFormatNV) \
+    USE_GL_FUNC(glVertexP2ui) \
+    USE_GL_FUNC(glVertexP2uiv) \
+    USE_GL_FUNC(glVertexP3ui) \
+    USE_GL_FUNC(glVertexP3uiv) \
+    USE_GL_FUNC(glVertexP4ui) \
+    USE_GL_FUNC(glVertexP4uiv) \
+    USE_GL_FUNC(glVertexPointerEXT) \
+    USE_GL_FUNC(glVertexPointerListIBM) \
+    USE_GL_FUNC(glVertexPointervINTEL) \
+    USE_GL_FUNC(glVertexStream1dATI) \
+    USE_GL_FUNC(glVertexStream1dvATI) \
+    USE_GL_FUNC(glVertexStream1fATI) \
+    USE_GL_FUNC(glVertexStream1fvATI) \
+    USE_GL_FUNC(glVertexStream1iATI) \
+    USE_GL_FUNC(glVertexStream1ivATI) \
+    USE_GL_FUNC(glVertexStream1sATI) \
+    USE_GL_FUNC(glVertexStream1svATI) \
+    USE_GL_FUNC(glVertexStream2dATI) \
+    USE_GL_FUNC(glVertexStream2dvATI) \
+    USE_GL_FUNC(glVertexStream2fATI) \
+    USE_GL_FUNC(glVertexStream2fvATI) \
+    USE_GL_FUNC(glVertexStream2iATI) \
+    USE_GL_FUNC(glVertexStream2ivATI) \
+    USE_GL_FUNC(glVertexStream2sATI) \
+    USE_GL_FUNC(glVertexStream2svATI) \
+    USE_GL_FUNC(glVertexStream3dATI) \
+    USE_GL_FUNC(glVertexStream3dvATI) \
+    USE_GL_FUNC(glVertexStream3fATI) \
+    USE_GL_FUNC(glVertexStream3fvATI) \
+    USE_GL_FUNC(glVertexStream3iATI) \
+    USE_GL_FUNC(glVertexStream3ivATI) \
+    USE_GL_FUNC(glVertexStream3sATI) \
+    USE_GL_FUNC(glVertexStream3svATI) \
+    USE_GL_FUNC(glVertexStream4dATI) \
+    USE_GL_FUNC(glVertexStream4dvATI) \
+    USE_GL_FUNC(glVertexStream4fATI) \
+    USE_GL_FUNC(glVertexStream4fvATI) \
+    USE_GL_FUNC(glVertexStream4iATI) \
+    USE_GL_FUNC(glVertexStream4ivATI) \
+    USE_GL_FUNC(glVertexStream4sATI) \
+    USE_GL_FUNC(glVertexStream4svATI) \
+    USE_GL_FUNC(glVertexWeightPointerEXT) \
+    USE_GL_FUNC(glVertexWeightfEXT) \
+    USE_GL_FUNC(glVertexWeightfvEXT) \
+    USE_GL_FUNC(glVertexWeighthNV) \
+    USE_GL_FUNC(glVertexWeighthvNV) \
+    USE_GL_FUNC(glVideoCaptureNV) \
+    USE_GL_FUNC(glVideoCaptureStreamParameterdvNV) \
+    USE_GL_FUNC(glVideoCaptureStreamParameterfvNV) \
+    USE_GL_FUNC(glVideoCaptureStreamParameterivNV) \
+    USE_GL_FUNC(glViewportArrayv) \
+    USE_GL_FUNC(glViewportIndexedf) \
+    USE_GL_FUNC(glViewportIndexedfv) \
+    USE_GL_FUNC(glViewportPositionWScaleNV) \
+    USE_GL_FUNC(glViewportSwizzleNV) \
+    USE_GL_FUNC(glWaitSemaphoreEXT) \
+    USE_GL_FUNC(glWaitSemaphoreui64NVX) \
+    USE_GL_FUNC(glWaitSync) \
+    USE_GL_FUNC(glWaitVkSemaphoreNV) \
+    USE_GL_FUNC(glWeightPathsNV) \
+    USE_GL_FUNC(glWeightPointerARB) \
+    USE_GL_FUNC(glWeightbvARB) \
+    USE_GL_FUNC(glWeightdvARB) \
+    USE_GL_FUNC(glWeightfvARB) \
+    USE_GL_FUNC(glWeightivARB) \
+    USE_GL_FUNC(glWeightsvARB) \
+    USE_GL_FUNC(glWeightubvARB) \
+    USE_GL_FUNC(glWeightuivARB) \
+    USE_GL_FUNC(glWeightusvARB) \
+    USE_GL_FUNC(glWindowPos2d) \
+    USE_GL_FUNC(glWindowPos2dARB) \
+    USE_GL_FUNC(glWindowPos2dMESA) \
+    USE_GL_FUNC(glWindowPos2dv) \
+    USE_GL_FUNC(glWindowPos2dvARB) \
+    USE_GL_FUNC(glWindowPos2dvMESA) \
+    USE_GL_FUNC(glWindowPos2f) \
+    USE_GL_FUNC(glWindowPos2fARB) \
+    USE_GL_FUNC(glWindowPos2fMESA) \
+    USE_GL_FUNC(glWindowPos2fv) \
+    USE_GL_FUNC(glWindowPos2fvARB) \
+    USE_GL_FUNC(glWindowPos2fvMESA) \
+    USE_GL_FUNC(glWindowPos2i) \
+    USE_GL_FUNC(glWindowPos2iARB) \
+    USE_GL_FUNC(glWindowPos2iMESA) \
+    USE_GL_FUNC(glWindowPos2iv) \
+    USE_GL_FUNC(glWindowPos2ivARB) \
+    USE_GL_FUNC(glWindowPos2ivMESA) \
+    USE_GL_FUNC(glWindowPos2s) \
+    USE_GL_FUNC(glWindowPos2sARB) \
+    USE_GL_FUNC(glWindowPos2sMESA) \
+    USE_GL_FUNC(glWindowPos2sv) \
+    USE_GL_FUNC(glWindowPos2svARB) \
+    USE_GL_FUNC(glWindowPos2svMESA) \
+    USE_GL_FUNC(glWindowPos3d) \
+    USE_GL_FUNC(glWindowPos3dARB) \
+    USE_GL_FUNC(glWindowPos3dMESA) \
+    USE_GL_FUNC(glWindowPos3dv) \
+    USE_GL_FUNC(glWindowPos3dvARB) \
+    USE_GL_FUNC(glWindowPos3dvMESA) \
+    USE_GL_FUNC(glWindowPos3f) \
+    USE_GL_FUNC(glWindowPos3fARB) \
+    USE_GL_FUNC(glWindowPos3fMESA) \
+    USE_GL_FUNC(glWindowPos3fv) \
+    USE_GL_FUNC(glWindowPos3fvARB) \
+    USE_GL_FUNC(glWindowPos3fvMESA) \
+    USE_GL_FUNC(glWindowPos3i) \
+    USE_GL_FUNC(glWindowPos3iARB) \
+    USE_GL_FUNC(glWindowPos3iMESA) \
+    USE_GL_FUNC(glWindowPos3iv) \
+    USE_GL_FUNC(glWindowPos3ivARB) \
+    USE_GL_FUNC(glWindowPos3ivMESA) \
+    USE_GL_FUNC(glWindowPos3s) \
+    USE_GL_FUNC(glWindowPos3sARB) \
+    USE_GL_FUNC(glWindowPos3sMESA) \
+    USE_GL_FUNC(glWindowPos3sv) \
+    USE_GL_FUNC(glWindowPos3svARB) \
+    USE_GL_FUNC(glWindowPos3svMESA) \
+    USE_GL_FUNC(glWindowPos4dMESA) \
+    USE_GL_FUNC(glWindowPos4dvMESA) \
+    USE_GL_FUNC(glWindowPos4fMESA) \
+    USE_GL_FUNC(glWindowPos4fvMESA) \
+    USE_GL_FUNC(glWindowPos4iMESA) \
+    USE_GL_FUNC(glWindowPos4ivMESA) \
+    USE_GL_FUNC(glWindowPos4sMESA) \
+    USE_GL_FUNC(glWindowPos4svMESA) \
+    USE_GL_FUNC(glWindowRectanglesEXT) \
+    USE_GL_FUNC(glWriteMaskEXT)
 
 #endif /* __WINE_WGL_H */
diff --git a/include/wine/wgl_driver.h b/include/wine/wgl_driver.h
index b4bc5abf658..a5397b20814 100644
--- a/include/wine/wgl_driver.h
+++ b/include/wine/wgl_driver.h
@@ -3097,7 +3097,7 @@ struct opengl_funcs
     } ext;
 };
 
-#define ALL_WGL_FUNCS \
+#define ALL_GL_UNIX_FUNCS \
     USE_GL_FUNC(glAccum) \
     USE_GL_FUNC(glAlphaFunc) \
     USE_GL_FUNC(glAreTexturesResident) \
-- 
GitLab

