From beca98dc8b4ff374a1c97ff1330738f7ed0205bc Mon Sep 17 00:00:00 2001
From: Kevin Puetz <PuetzKevinA@JohnDeere.com>
Date: Fri, 25 Apr 2025 00:09:00 -0400
Subject: [PATCH] Implement ClassLibrary refcount leak test

Demonstrate a refcount leak on the class factory when a class with
ThreadingModel=Apartment is instantiated in the MTA. CoGetClassObject
ends up using apartment_hostobject to launch an STA thread in which to
host the object, but the process of marshaling this class factory back
into the MTA leaks a reference on it.

This leak is usually minor (class factory implementations are usually
singletons, so it's a one-off rather than a cumulative leak), but will
generally lock that COM server and e.g. prevent CoFreeUnusedLibraries
from being able to clean up properly. Since the refcount of an object
obtained from a hostapt in this fashion will generally be obscured by
by the resulting proxy/stub, test the leak via DllCanUnloadNow.

Signed-off-by: Kevin Puetz <PuetzKevinA@JohnDeere.com>
---
 dlls/ole32/tests/compobj.c    | 32 +++++++++++++
 dlls/ole32/tests/testlib.c    | 90 +++++++++++++++++++++++++++++++++++
 dlls/ole32/tests/testlib.spec |  1 +
 3 files changed, 123 insertions(+)

diff --git a/dlls/ole32/tests/compobj.c b/dlls/ole32/tests/compobj.c
index 94b83024b91..5a2febdfc46 100644
--- a/dlls/ole32/tests/compobj.c
+++ b/dlls/ole32/tests/compobj.c
@@ -101,6 +101,7 @@ static const GUID IID_Testiface8 = { 0x92222222, 0x1234, 0x1234, { 0x12, 0x34, 0
 static const GUID IID_TestPS = { 0x66666666, 0x8888, 0x7777, { 0x66, 0x66, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 } };
 
 DEFINE_GUID(CLSID_testclsid, 0xacd014c7,0x9535,0x4fac,0x8b,0x53,0xa4,0x8c,0xa7,0xf4,0xd7,0x26);
+DEFINE_GUID(CLSID_Creatable, 0xa2222222,0x9535,0x4fac,0x8b,0x53,0xa4,0x8c,0xa7,0xf4,0xd7,0x26);
 
 static const WCHAR stdfont[] = {'S','t','d','F','o','n','t',0};
 static const WCHAR wszNonExistent[] = {'N','o','n','E','x','i','s','t','e','n','t',0};
@@ -316,6 +317,13 @@ static const char actctx_manifest[] =
 "    <comClass clsid=\"{62222222-1234-1234-1234-56789abcdef0}\" >"
 "        <progid>ProgId.ProgId.1</progid>"
 "    </comClass>"
+"    <comClass "
+"        clsid=\"{a2222222-9535-4fac-8b53-a48ca7f4d726}\""
+"        description=\"Creatable Class\""
+"        threadingModel=\"Apartment\""
+"        progid=\"TestLib.Creatable\" >"
+"        <progid>TestLib.Creatable.1</progid>"
+"    </comClass>"
 "    <comInterfaceProxyStub "
 "        name=\"Iifaceps\""
 "        iid=\"{22222222-1234-1234-1234-56789abcdef0}\""
@@ -809,6 +817,30 @@ static void test_CoGetClassObject(void)
         hr = CoGetClassObject(&IID_Testiface8, CLSCTX_INPROC_SERVER, NULL, &IID_IUnknown, (void **)&pUnk);
         ok(hr == REGDB_E_CLASSNOTREG, "Unexpected hr %#lx.\n", hr);
 
+        hr = CoGetClassObject(&CLSID_Creatable, CLSCTX_INPROC_SERVER, NULL, &IID_IClassFactory, (void**)&pUnk);
+        ok(hr == S_OK, "Unexpected hr %#lx.\n", hr);
+        ok(pUnk != NULL, "Could not load test class factory\n");
+        if(pUnk != NULL)
+        {
+            HMODULE htestlib = NULL;
+            HRESULT(WINAPI * pDllCanUnloadNow)(void) = NULL;
+
+            ok(GetModuleHandleExA(0, "testlib.dll", &htestlib), "GetModuleHandleEx failed, error = %lu\n", GetLastError());
+            pDllCanUnloadNow = (void*)GetProcAddress(htestlib, "DllCanUnloadNow");
+            ok(pDllCanUnloadNow != NULL, "GetProcAddress(\"DllCanUnloadNow\") failed, error = %lu\n", GetLastError());
+            if(pDllCanUnloadNow)
+            {
+                hr = (*pDllCanUnloadNow)();
+                ok(S_FALSE == hr, "Unexpected hr %#lx.\n", hr);
+                IUnknown_Release(pUnk);
+                pUnk = NULL;
+
+                hr = (*pDllCanUnloadNow)();
+                todo_wine ok(S_OK == hr, "Unexpected hr %#lx.\n", hr);
+                CloseHandle(htestlib);
+            }
+        }
+
         deactivate_context(handle, cookie);
     }
 
diff --git a/dlls/ole32/tests/testlib.c b/dlls/ole32/tests/testlib.c
index 0d5c915d12f..05bc244ddc1 100644
--- a/dlls/ole32/tests/testlib.c
+++ b/dlls/ole32/tests/testlib.c
@@ -23,11 +23,93 @@
 #endif
 
 #include <stdio.h>
+#define COBJMACROS
+#define CONST_VTABLE
 #include <windows.h>
 #include <initguid.h>
+#include "windef.h"
+#include "winbase.h"
+#include "objbase.h"
 
 DEFINE_GUID(CLSID_WineOOPTest, 0x5201163f, 0x8164, 0x4fd0, 0xa1, 0xa2, 0x5d, 0x5a, 0x36, 0x54, 0xd3, 0xbd);
 DEFINE_GUID(IID_Testiface7, 0x82222222, 0x1234, 0x1234, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0);
+DEFINE_GUID(CLSID_creatable, 0xa2222222,0x9535,0x4fac,0x8b,0x53,0xa4,0x8c,0xa7,0xf4,0xd7,0x26);
+
+static LONG cLocks = 0;
+static LONG cRefs = 1; /* Statically created with refcount = 1 */
+
+static void LockModule(void)
+{
+    InterlockedIncrement(&cLocks);
+}
+
+static void UnlockModule(void)
+{
+    InterlockedDecrement(&cLocks);
+}
+
+static HRESULT WINAPI Test_IClassFactory_QueryInterface(
+    LPCLASSFACTORY iface,
+    REFIID riid,
+    LPVOID* ppvObj)
+{
+    if (ppvObj == NULL) return E_POINTER;
+
+    if (IsEqualGUID(riid, &IID_IUnknown) ||
+        IsEqualGUID(riid, &IID_IClassFactory))
+    {
+        *ppvObj = iface;
+        IClassFactory_AddRef(iface);
+        return S_OK;
+    }
+
+    *ppvObj = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI Test_IClassFactory_AddRef(LPCLASSFACTORY iface)
+{
+    ULONG res = (ULONG)InterlockedIncrement(&cRefs);
+    if (res == 2)
+        LockModule();
+    return res;
+}
+
+static ULONG WINAPI Test_IClassFactory_Release(LPCLASSFACTORY iface)
+{
+    ULONG res = (ULONG)InterlockedDecrement(&cRefs);
+    if (res == 1)
+        UnlockModule();
+    return res;
+}
+
+static HRESULT WINAPI Test_IClassFactory_CreateInstance(
+    LPCLASSFACTORY iface,
+    IUnknown* pUnkOuter,
+    REFIID riid,
+    LPVOID* ppvObj)
+{
+    *ppvObj = NULL;
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI Test_IClassFactory_LockServer(
+    LPCLASSFACTORY iface,
+    BOOL fLock)
+{
+    return S_OK;
+}
+
+static const IClassFactoryVtbl TestClassFactory_Vtbl =
+{
+    Test_IClassFactory_QueryInterface,
+    Test_IClassFactory_AddRef,
+    Test_IClassFactory_Release,
+    Test_IClassFactory_CreateInstance,
+    Test_IClassFactory_LockServer
+};
+
+static IClassFactory Test_ClassFactory = { &TestClassFactory_Vtbl };
 
 HRESULT WINAPI DllGetClassObject(REFCLSID clsid, REFIID riid, void **obj)
 {
@@ -37,5 +119,13 @@ HRESULT WINAPI DllGetClassObject(REFCLSID clsid, REFIID riid, void **obj)
     if (IsEqualGUID(clsid, &IID_Testiface7))
         return 0x80001235;
 
+    if (IsEqualGUID(clsid, &CLSID_creatable))
+        return IClassFactory_QueryInterface(&Test_ClassFactory, riid, obj);
+
     return E_NOTIMPL;
 }
+
+HRESULT WINAPI DllCanUnloadNow(void)
+{
+    return (cLocks == 0) ? S_OK : S_FALSE;
+}
diff --git a/dlls/ole32/tests/testlib.spec b/dlls/ole32/tests/testlib.spec
index 8737274e9c6..234d86ac9cf 100644
--- a/dlls/ole32/tests/testlib.spec
+++ b/dlls/ole32/tests/testlib.spec
@@ -1 +1,2 @@
 @ stdcall DllGetClassObject(ptr ptr ptr)
+@ stdcall DllCanUnloadNow()
-- 
GitLab

