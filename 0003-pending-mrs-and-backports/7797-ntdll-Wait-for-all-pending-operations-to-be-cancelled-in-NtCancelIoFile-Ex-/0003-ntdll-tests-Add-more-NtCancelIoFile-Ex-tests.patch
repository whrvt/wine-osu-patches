From 8ad3240792317b8b000d29e2651c114f3d6d9ce4 Mon Sep 17 00:00:00 2001
From: Matteo Bruni <mbruni@codeweavers.com>
Date: Wed, 9 Apr 2025 19:55:36 +0200
Subject: [PATCH] ntdll/tests: Add more NtCancelIoFile[Ex]() tests.

---
 dlls/ntdll/tests/pipe.c | 63 ++++++++++++++++++++++++++++++++++++-----
 1 file changed, 56 insertions(+), 7 deletions(-)

diff --git a/dlls/ntdll/tests/pipe.c b/dlls/ntdll/tests/pipe.c
index cf98d555455..36bb1f1194c 100644
--- a/dlls/ntdll/tests/pipe.c
+++ b/dlls/ntdll/tests/pipe.c
@@ -569,13 +569,36 @@ static void test_nonalertable(void)
     CloseHandle(hPipe);
 }
 
-static void test_cancelio(void)
+struct cancelio_ctx
 {
-    IO_STATUS_BLOCK iosb;
+    HANDLE pipe;
+    HANDLE event;
+    IO_STATUS_BLOCK *iosb;
+    BOOL null_iosb;
+};
+
+static DWORD WINAPI cancelioex_thread_func(void *arg)
+{
+    struct cancelio_ctx *ctx = arg;
     IO_STATUS_BLOCK cancel_sb;
-    HANDLE hEvent;
-    HANDLE hPipe;
-    NTSTATUS res;
+    NTSTATUS res, status;
+
+    res = pNtCancelIoFileEx(ctx->pipe, ctx->null_iosb ? NULL : ctx->iosb, &cancel_sb);
+    status = ctx->iosb->Status;
+    ok(!res, "NtCancelIoFileEx returned %lx\n", res);
+
+    ok(status == STATUS_CANCELLED, "Wrong iostatus %lx\n", status);
+    ok(WaitForSingleObject(ctx->event, 0) == 0, "hEvent not signaled\n");
+
+    return 0;
+}
+
+static void test_cancelio(void)
+{
+    IO_STATUS_BLOCK cancel_sb, iosb;
+    HANDLE hEvent, hPipe, thread;
+    struct cancelio_ctx ctx;
+    NTSTATUS res, status;
 
     hEvent = CreateEventW(NULL, TRUE, FALSE, NULL);
     ok(hEvent != INVALID_HANDLE_VALUE, "can't create event, GetLastError: %lx\n", GetLastError());
@@ -589,9 +612,13 @@ static void test_cancelio(void)
     ok(res == STATUS_PENDING, "NtFsControlFile returned %lx\n", res);
 
     res = pNtCancelIoFile(hPipe, &cancel_sb);
+    /* Save Status first thing after the call. We want to make very unlikely
+     * that the kernel APC updating Status could be executed after the call
+     * but before peeking at Status here. */
+    status = iosb.Status;
     ok(!res, "NtCancelIoFile returned %lx\n", res);
 
-    ok(iosb.Status == STATUS_CANCELLED, "Wrong iostatus %lx\n", iosb.Status);
+    ok(status == STATUS_CANCELLED, "Wrong iostatus %lx\n", status);
     ok(WaitForSingleObject(hEvent, 0) == 0, "hEvent not signaled\n");
 
     ok(!ioapc_called, "IOAPC ran too early\n");
@@ -616,9 +643,10 @@ static void test_cancelio(void)
         ok(res == STATUS_PENDING, "NtFsControlFile returned %lx\n", res);
 
         res = pNtCancelIoFileEx(hPipe, &iosb, &cancel_sb);
+        status = iosb.Status;
         ok(!res, "NtCancelIoFileEx returned %lx\n", res);
 
-        ok(iosb.Status == STATUS_CANCELLED, "Wrong iostatus %lx\n", iosb.Status);
+        ok(status == STATUS_CANCELLED, "Wrong iostatus %lx\n", status);
         ok(WaitForSingleObject(hEvent, 0) == 0, "hEvent not signaled\n");
 
         iosb.Status = 0xdeadbeef;
@@ -626,6 +654,27 @@ static void test_cancelio(void)
         ok(res == STATUS_NOT_FOUND, "NtCancelIoFileEx returned %lx\n", res);
         ok(iosb.Status == 0xdeadbeef, "Wrong iostatus %lx\n", iosb.Status);
 
+        memset(&iosb, 0x55, sizeof(iosb));
+        res = listen_pipe(hPipe, hEvent, &iosb, FALSE);
+        ok(res == STATUS_PENDING, "NtFsControlFile returned %lx\n", res);
+
+        ctx.pipe = hPipe;
+        ctx.event = hEvent;
+        ctx.iosb = &iosb;
+        ctx.null_iosb = FALSE;
+        thread = CreateThread(NULL, 0, cancelioex_thread_func, &ctx, 0, NULL);
+        WaitForSingleObject(thread, INFINITE);
+        CloseHandle(thread);
+
+        memset(&iosb, 0x55, sizeof(iosb));
+        res = listen_pipe(hPipe, hEvent, &iosb, FALSE);
+        ok(res == STATUS_PENDING, "NtFsControlFile returned %lx\n", res);
+
+        ctx.null_iosb = TRUE;
+        thread = CreateThread(NULL, 0, cancelioex_thread_func, &ctx, 0, NULL);
+        WaitForSingleObject(thread, INFINITE);
+        CloseHandle(thread);
+
         CloseHandle(hPipe);
     }
     else
-- 
GitLab

