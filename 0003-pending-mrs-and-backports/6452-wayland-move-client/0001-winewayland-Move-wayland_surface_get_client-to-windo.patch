From c53d69818a212280ba1553eef7a3fbbcb935c31b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 5 Sep 2024 15:40:56 +0200
Subject: [PATCH 1/5] winewayland: Move wayland_surface_get_client to window.c.

---
 dlls/winewayland.drv/wayland_surface.c | 42 +-------------------------
 dlls/winewayland.drv/waylanddrv.h      |  1 +
 dlls/winewayland.drv/window.c          | 40 ++++++++++++++++++++++++
 3 files changed, 42 insertions(+), 41 deletions(-)

diff --git a/dlls/winewayland.drv/wayland_surface.c b/dlls/winewayland.drv/wayland_surface.c
index 488132ca8d5..13503cc849d 100644
--- a/dlls/winewayland.drv/wayland_surface.c
+++ b/dlls/winewayland.drv/wayland_surface.c
@@ -494,7 +494,7 @@ static void wayland_surface_reconfigure_size(struct wayland_surface *surface,
  *
  * Reconfigures the subsurface covering the client area.
  */
-static void wayland_surface_reconfigure_client(struct wayland_surface *surface)
+void wayland_surface_reconfigure_client(struct wayland_surface *surface)
 {
     struct wayland_window_config *window = &surface->window;
     int client_x, client_y, x, y;
@@ -815,46 +815,6 @@ err:
     return NULL;
 }
 
-/**********************************************************************
- *          wayland_surface_get_client
- */
-struct wayland_client_surface *wayland_surface_get_client(struct wayland_surface *surface)
-{
-    struct wayland_client_surface *client;
-
-    if ((client = surface->client))
-    {
-        InterlockedIncrement(&client->ref);
-        return client;
-    }
-
-    if (!(client = wayland_client_surface_create(surface->hwnd)))
-        return NULL;
-
-    client->wl_subsurface =
-        wl_subcompositor_get_subsurface(process_wayland.wl_subcompositor,
-                                        client->wl_surface,
-                                        surface->wl_surface);
-    if (!client->wl_subsurface)
-    {
-        ERR("Failed to create client wl_subsurface\n");
-        goto err;
-    }
-    /* Present contents independently of the parent surface. */
-    wl_subsurface_set_desync(client->wl_subsurface);
-
-    wayland_surface_reconfigure_client(surface);
-    /* Commit to apply subsurface positioning. */
-    wl_surface_commit(surface->wl_surface);
-
-    surface->client = client;
-    return client;
-
-err:
-    wayland_client_surface_release(client);
-    return NULL;
-}
-
 static void dummy_buffer_release(void *data, struct wl_buffer *buffer)
 {
     struct wayland_shm_buffer *shm_buffer = data;
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index 4551540e0d4..bd6fcb50147 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -241,6 +241,7 @@ void wayland_surface_clear_role(struct wayland_surface *surface);
 void wayland_surface_attach_shm(struct wayland_surface *surface,
                                 struct wayland_shm_buffer *shm_buffer,
                                 HRGN surface_damage_region);
+void wayland_surface_reconfigure_client(struct wayland_surface *surface);
 BOOL wayland_surface_reconfigure(struct wayland_surface *surface);
 BOOL wayland_surface_config_is_compatible(struct wayland_surface_config *conf,
                                           int width, int height,
diff --git a/dlls/winewayland.drv/window.c b/dlls/winewayland.drv/window.c
index 942d56870a3..0874ec5121e 100644
--- a/dlls/winewayland.drv/window.c
+++ b/dlls/winewayland.drv/window.c
@@ -682,6 +682,46 @@ LRESULT WAYLAND_SysCommand(HWND hwnd, WPARAM wparam, LPARAM lparam)
     return ret;
 }
 
+/**********************************************************************
+ *          wayland_surface_get_client
+ */
+struct wayland_client_surface *wayland_surface_get_client(struct wayland_surface *surface)
+{
+    struct wayland_client_surface *client;
+
+    if ((client = surface->client))
+    {
+        InterlockedIncrement(&client->ref);
+        return client;
+    }
+
+    if (!(client = wayland_client_surface_create(surface->hwnd)))
+        return NULL;
+
+    client->wl_subsurface =
+        wl_subcompositor_get_subsurface(process_wayland.wl_subcompositor,
+                                        client->wl_surface,
+                                        surface->wl_surface);
+    if (!client->wl_subsurface)
+    {
+        ERR("Failed to create client wl_subsurface\n");
+        goto err;
+    }
+    /* Present contents independently of the parent surface. */
+    wl_subsurface_set_desync(client->wl_subsurface);
+
+    wayland_surface_reconfigure_client(surface);
+    /* Commit to apply subsurface positioning. */
+    wl_surface_commit(surface->wl_surface);
+
+    surface->client = client;
+    return client;
+
+err:
+    wayland_client_surface_release(client);
+    return NULL;
+}
+
 BOOL set_window_surface_contents(HWND hwnd, struct wayland_shm_buffer *shm_buffer, HRGN damage_region)
 {
     struct wayland_surface *wayland_surface;
-- 
2.46.0

