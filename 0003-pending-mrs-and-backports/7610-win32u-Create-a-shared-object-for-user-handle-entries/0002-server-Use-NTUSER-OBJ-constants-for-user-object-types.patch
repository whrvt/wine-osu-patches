From 3d34e98a0cf469398fc05058321c8c370a3b6c1e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 18 Mar 2025 20:50:09 +0100
Subject: [PATCH] server: Use NTUSER_OBJ constants for user object types.

---
 dlls/win32u/ntuser_private.h |  8 ++++----
 dlls/win32u/window.c         | 10 ++++++----
 server/hook.c                |  6 +++---
 server/protocol.def          |  2 ++
 server/queue.c               |  4 ++--
 server/user.c                | 30 ++++++++++++++++++++++--------
 server/user.h                | 17 +++++------------
 server/window.c              | 24 ++++++++++++------------
 8 files changed, 56 insertions(+), 45 deletions(-)

diff --git a/dlls/win32u/ntuser_private.h b/dlls/win32u/ntuser_private.h
index 2f3bbdf91c0..4dd7d49cb22 100644
--- a/dlls/win32u/ntuser_private.h
+++ b/dlls/win32u/ntuser_private.h
@@ -230,11 +230,11 @@ extern BOOL vulkan_init(void);
 extern void vulkan_detach_surfaces( struct list *surfaces );
 
 /* window.c */
-HANDLE alloc_user_handle( struct user_object *ptr, unsigned int type );
-void *free_user_handle( HANDLE handle, unsigned int type );
-void *get_user_handle_ptr( HANDLE handle, unsigned int type );
+HANDLE alloc_user_handle( struct user_object *ptr, unsigned short type );
+void *free_user_handle( HANDLE handle, unsigned short type );
+void *get_user_handle_ptr( HANDLE handle, unsigned short type );
 void release_user_handle_ptr( void *ptr );
-void *next_process_user_handle_ptr( HANDLE *handle, unsigned int type );
+void *next_process_user_handle_ptr( HANDLE *handle, unsigned short type );
 UINT win_set_flags( HWND hwnd, UINT set_mask, UINT clear_mask );
 
 static inline UINT win_get_flags( HWND hwnd )
diff --git a/dlls/win32u/window.c b/dlls/win32u/window.c
index 3fb64755ba0..72f241a753f 100644
--- a/dlls/win32u/window.c
+++ b/dlls/win32u/window.c
@@ -55,12 +55,13 @@ static void *user_handles[NB_USER_HANDLES];
 /***********************************************************************
  *           alloc_user_handle
  */
-HANDLE alloc_user_handle( struct user_object *ptr, unsigned int type )
+HANDLE alloc_user_handle( struct user_object *ptr, unsigned short type )
 {
     HANDLE handle = 0;
 
     SERVER_START_REQ( alloc_user_handle )
     {
+        req->type = type;
         if (!wine_server_call_err( req )) handle = wine_server_ptr_handle( reply->handle );
     }
     SERVER_END_REQ;
@@ -80,7 +81,7 @@ HANDLE alloc_user_handle( struct user_object *ptr, unsigned int type )
 /***********************************************************************
  *           get_user_handle_ptr
  */
-void *get_user_handle_ptr( HANDLE handle, unsigned int type )
+void *get_user_handle_ptr( HANDLE handle, unsigned short type )
 {
     struct user_object *ptr;
     WORD index = USER_HANDLE_TO_INDEX( handle );
@@ -106,7 +107,7 @@ void *get_user_handle_ptr( HANDLE handle, unsigned int type )
  *
  * user_lock must be held by caller.
  */
-void *next_process_user_handle_ptr( HANDLE *handle, unsigned int type )
+void *next_process_user_handle_ptr( HANDLE *handle, unsigned short type )
 {
     struct user_object *ptr;
     WORD index = *handle ? USER_HANDLE_TO_INDEX( *handle ) + 1 : 0;
@@ -143,7 +144,7 @@ void release_user_handle_ptr( void *ptr )
 /***********************************************************************
  *           free_user_handle
  */
-void *free_user_handle( HANDLE handle, unsigned int type )
+void *free_user_handle( HANDLE handle, unsigned short type )
 {
     struct user_object *ptr;
     WORD index = USER_HANDLE_TO_INDEX( handle );
@@ -152,6 +153,7 @@ void *free_user_handle( HANDLE handle, unsigned int type )
     {
         SERVER_START_REQ( free_user_handle )
         {
+            req->type = type;
             req->handle = wine_server_user_handle( handle );
             if (wine_server_call( req )) ptr = NULL;
             else InterlockedCompareExchangePointer( &user_handles[index], NULL, ptr );
diff --git a/server/hook.c b/server/hook.c
index ffe7206369e..bf2ad266e76 100644
--- a/server/hook.c
+++ b/server/hook.c
@@ -153,7 +153,7 @@ static struct hook *add_hook( struct desktop *desktop, struct process *process,
     }
     if (!(hook = mem_alloc( sizeof(*hook) ))) return NULL;
 
-    if (!(hook->handle = alloc_user_handle( hook, USER_HOOK )))
+    if (!(hook->handle = alloc_user_handle( hook, NTUSER_OBJ_HOOK )))
     {
         free( hook );
         return NULL;
@@ -502,7 +502,7 @@ DECL_HANDLER(remove_hook)
 
     if (req->handle)
     {
-        if (!(hook = get_user_object( req->handle, USER_HOOK )))
+        if (!(hook = get_user_object( req->handle, NTUSER_OBJ_HOOK )))
         {
             set_error( STATUS_INVALID_HANDLE );
             return;
@@ -589,7 +589,7 @@ DECL_HANDLER(get_hook_info)
 {
     struct hook *hook;
 
-    if (!(hook = get_user_object( req->handle, USER_HOOK ))) return;
+    if (!(hook = get_user_object( req->handle, NTUSER_OBJ_HOOK ))) return;
     if (hook->thread && (hook->thread != current))
     {
         set_error( STATUS_INVALID_HANDLE );
diff --git a/server/protocol.def b/server/protocol.def
index 63bb0111473..1a2808d24a6 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -3928,6 +3928,7 @@ struct handle_info
 
 /* Allocate an arbitrary user handle */
 @REQ(alloc_user_handle)
+    unsigned short type;          /* user object type */
 @REPLY
     user_handle_t  handle;        /* allocated handle */
 @END
@@ -3935,6 +3936,7 @@ struct handle_info
 
 /* Free an arbitrary user handle */
 @REQ(free_user_handle)
+    unsigned short type;          /* user object type */
     user_handle_t  handle;        /* handle to free*/
 @END
 
diff --git a/server/queue.c b/server/queue.c
index 520659d377c..df3258a5158 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -3331,7 +3331,7 @@ DECL_HANDLER(get_message)
     const queue_shm_t *queue_shm;
     unsigned int filter;
 
-    if (get_win && get_win != 1 && get_win != -1 && !get_user_object( get_win, USER_WINDOW ))
+    if (get_win && get_win != 1 && get_win != -1 && !get_user_object( get_win, NTUSER_OBJ_WINDOW ))
     {
         set_win32_error( ERROR_INVALID_WINDOW_HANDLE );
         return;
@@ -4047,7 +4047,7 @@ DECL_HANDLER(set_cursor)
     reply->prev_y      = desktop_shm->cursor.y;
 
     if ((req->flags & SET_CURSOR_HANDLE) && req->handle &&
-        !get_user_object( req->handle, USER_CLIENT ))
+        !get_user_object( req->handle, NTUSER_OBJ_ICON ))
     {
         set_win32_error( ERROR_INVALID_CURSOR_HANDLE );
         return;
diff --git a/server/user.c b/server/user.c
index 2d038a6ddbf..22d72c669e7 100644
--- a/server/user.c
+++ b/server/user.c
@@ -90,7 +90,7 @@ static inline void *free_user_entry( struct user_handle *ptr )
 }
 
 /* allocate a user handle for a given object */
-user_handle_t alloc_user_handle( void *ptr, enum user_object type )
+user_handle_t alloc_user_handle( void *ptr, unsigned short type )
 {
     struct user_handle *entry = alloc_user_entry();
     if (!entry) return 0;
@@ -101,7 +101,7 @@ user_handle_t alloc_user_handle( void *ptr, enum user_object type )
 }
 
 /* return a pointer to a user object from its handle */
-void *get_user_object( user_handle_t handle, enum user_object type )
+void *get_user_object( user_handle_t handle, unsigned short type )
 {
     struct user_handle *entry;
 
@@ -120,7 +120,7 @@ user_handle_t get_user_full_handle( user_handle_t handle )
 }
 
 /* same as get_user_object plus set the handle to the full 32-bit value */
-void *get_user_object_handle( user_handle_t *handle, enum user_object type )
+void *get_user_object_handle( user_handle_t *handle, unsigned short type )
 {
     struct user_handle *entry;
 
@@ -143,7 +143,7 @@ void *free_user_handle( user_handle_t handle )
 }
 
 /* return the next user handle after 'handle' that is of a given type */
-void *next_user_handle( user_handle_t *handle, enum user_object type )
+void *next_user_handle( user_handle_t *handle, unsigned short type )
 {
     struct user_handle *entry;
 
@@ -172,14 +172,28 @@ void free_process_user_handles( struct process *process )
     unsigned int i;
 
     for (i = 0; i < nb_handles; i++)
-        if (handles[i].type == USER_CLIENT && handles[i].ptr == process)
-            free_user_entry( &handles[i] );
+    {
+        switch (handles[i].type)
+        {
+        case NTUSER_OBJ_MENU:
+        case NTUSER_OBJ_ICON:
+        case NTUSER_OBJ_WINPOS:
+        case NTUSER_OBJ_ACCEL:
+        case NTUSER_OBJ_IMC:
+            if (handles[i].ptr == process) free_user_entry( &handles[i] );
+            break;
+        case NTUSER_OBJ_HOOK:
+        case NTUSER_OBJ_WINDOW:
+        default:
+            continue;
+        }
+    }
 }
 
 /* allocate an arbitrary user handle */
 DECL_HANDLER(alloc_user_handle)
 {
-    reply->handle = alloc_user_handle( current->process, USER_CLIENT );
+    reply->handle = alloc_user_handle( current->process, req->type );
 }
 
 
@@ -188,7 +202,7 @@ DECL_HANDLER(free_user_handle)
 {
     struct user_handle *entry;
 
-    if ((entry = handle_to_entry( req->handle )) && entry->type == USER_CLIENT)
+    if ((entry = handle_to_entry( req->handle )) && entry->type == req->type)
         free_user_entry( entry );
     else
         set_error( STATUS_INVALID_HANDLE );
diff --git a/server/user.h b/server/user.h
index ce463b9395d..b103fcd5652 100644
--- a/server/user.h
+++ b/server/user.h
@@ -34,13 +34,6 @@ struct window_class;
 struct atom_table;
 struct clipboard;
 
-enum user_object
-{
-    USER_WINDOW = 1,
-    USER_HOOK,
-    USER_CLIENT  /* arbitrary client handle */
-};
-
 #define DESKTOP_ATOM  ((atom_t)32769)
 
 #define MAX_USER_HANDLES ((LAST_USER_HANDLE - FIRST_USER_HANDLE + 1) >> 1)
@@ -99,12 +92,12 @@ struct desktop
 
 /* user handles functions */
 
-extern user_handle_t alloc_user_handle( void *ptr, enum user_object type );
-extern void *get_user_object( user_handle_t handle, enum user_object type );
-extern void *get_user_object_handle( user_handle_t *handle, enum user_object type );
+extern user_handle_t alloc_user_handle( void *ptr, unsigned short type );
+extern void *get_user_object( user_handle_t handle, unsigned short type );
+extern void *get_user_object_handle( user_handle_t *handle, unsigned short type );
 extern user_handle_t get_user_full_handle( user_handle_t handle );
 extern void *free_user_handle( user_handle_t handle );
-extern void *next_user_handle( user_handle_t *handle, enum user_object type );
+extern void *next_user_handle( user_handle_t *handle, unsigned short type );
 extern void free_process_user_handles( struct process *process );
 
 /* clipboard functions */
@@ -314,7 +307,7 @@ static inline void union_rect( struct rectangle *dest, const struct rectangle *s
 /* validate a window handle and return the full handle */
 static inline user_handle_t get_valid_window_handle( user_handle_t win )
 {
-    if (get_user_object_handle( &win, USER_WINDOW )) return win;
+    if (get_user_object_handle( &win, NTUSER_OBJ_WINDOW )) return win;
     set_win32_error( ERROR_INVALID_WINDOW_HANDLE );
     return 0;
 }
diff --git a/server/window.c b/server/window.c
index f7f9d5e517f..1eb815dfe3e 100644
--- a/server/window.c
+++ b/server/window.c
@@ -185,7 +185,7 @@ static void window_destroy( struct object *obj )
 /* retrieve a pointer to a window from its handle */
 static inline struct window *get_window( user_handle_t handle )
 {
-    struct window *ret = get_user_object( handle, USER_WINDOW );
+    struct window *ret = get_user_object( handle, NTUSER_OBJ_WINDOW );
     if (!ret) set_win32_error( ERROR_INVALID_WINDOW_HANDLE );
     return ret;
 }
@@ -672,7 +672,7 @@ static struct window *create_window( struct window *parent, struct window *owner
         memset( win->extra_bytes, 0, extra_bytes );
         win->nb_extra_bytes = extra_bytes;
     }
-    if (!(win->handle = alloc_user_handle( win, USER_WINDOW ))) goto failed;
+    if (!(win->handle = alloc_user_handle( win, NTUSER_OBJ_WINDOW ))) goto failed;
     win->last_active = win->handle;
 
     /* if parent belongs to a different thread and the window isn't */
@@ -728,7 +728,7 @@ void destroy_thread_windows( struct thread *thread )
     user_handle_t handle = 0;
     struct window *win;
 
-    while ((win = next_user_handle( &handle, USER_WINDOW )))
+    while ((win = next_user_handle( &handle, NTUSER_OBJ_WINDOW )))
     {
         if (win->thread != thread) continue;
         if (is_desktop_window( win )) detach_window_thread( win );
@@ -751,8 +751,8 @@ static struct window *get_desktop_window( struct thread *thread )
 /* check whether child is a descendant of parent */
 int is_child_window( user_handle_t parent, user_handle_t child )
 {
-    struct window *child_ptr = get_user_object( child, USER_WINDOW );
-    struct window *parent_ptr = get_user_object( parent, USER_WINDOW );
+    struct window *child_ptr = get_user_object( child, NTUSER_OBJ_WINDOW );
+    struct window *parent_ptr = get_user_object( parent, NTUSER_OBJ_WINDOW );
 
     if (!child_ptr || !parent_ptr) return 0;
     while (child_ptr->parent)
@@ -766,7 +766,7 @@ int is_child_window( user_handle_t parent, user_handle_t child )
 /* check if window can be set as foreground window */
 int is_valid_foreground_window( user_handle_t window )
 {
-    struct window *win = get_user_object( window, USER_WINDOW );
+    struct window *win = get_user_object( window, NTUSER_OBJ_WINDOW );
     return win && (win->style & (WS_POPUP|WS_CHILD)) != WS_CHILD;
 }
 
@@ -782,7 +782,7 @@ int make_window_active( user_handle_t window )
     while (owner)
     {
         owner->last_active = win->handle;
-        owner = get_user_object( owner->owner, USER_WINDOW );
+        owner = get_user_object( owner->owner, NTUSER_OBJ_WINDOW );
     }
     return 1;
 }
@@ -860,14 +860,14 @@ static int is_visible( const struct window *win )
 /* same as is_visible but takes a window handle */
 int is_window_visible( user_handle_t window )
 {
-    struct window *win = get_user_object( window, USER_WINDOW );
+    struct window *win = get_user_object( window, NTUSER_OBJ_WINDOW );
     if (!win) return 0;
     return is_visible( win );
 }
 
 int is_window_transparent( user_handle_t window )
 {
-    struct window *win = get_user_object( window, USER_WINDOW );
+    struct window *win = get_user_object( window, NTUSER_OBJ_WINDOW );
     if (!win) return 0;
     return (win->ex_style & (WS_EX_LAYERED|WS_EX_TRANSPARENT)) == (WS_EX_LAYERED|WS_EX_TRANSPARENT);
 }
@@ -1026,7 +1026,7 @@ user_handle_t shallow_window_from_point( struct desktop *desktop, int x, int y )
 /* return thread of top-most window containing point (in absolute raw coords) */
 struct thread *window_thread_from_point( user_handle_t scope, int x, int y )
 {
-    struct window *win = get_user_object( scope, USER_WINDOW );
+    struct window *win = get_user_object( scope, NTUSER_OBJ_WINDOW );
 
     if (!win) return NULL;
 
@@ -1068,7 +1068,7 @@ static int all_windows_from_point( struct window *top, int x, int y, unsigned in
 /* return the thread owning a window */
 struct thread *get_window_thread( user_handle_t handle )
 {
-    struct window *win = get_user_object( handle, USER_WINDOW );
+    struct window *win = get_user_object( handle, NTUSER_OBJ_WINDOW );
     if (!win || !win->thread) return NULL;
     return (struct thread *)grab_object( win->thread );
 }
@@ -2326,7 +2326,7 @@ DECL_HANDLER(get_window_info)
     reply->is_unicode  = win->is_unicode;
     reply->dpi_context = win->dpi_context;
 
-    if (get_user_object( win->last_active, USER_WINDOW )) reply->last_active = win->last_active;
+    if (get_user_object( win->last_active, NTUSER_OBJ_WINDOW )) reply->last_active = win->last_active;
     if (win->thread)
     {
         reply->tid  = get_thread_id( win->thread );
-- 
GitLab

