From 978a3f97d0fb473b3df42e1778f3c261f0d65ecf Mon Sep 17 00:00:00 2001
From: Yuxuan Shui <yshui@codeweavers.com>
Date: Tue, 1 Jul 2025 00:50:36 +0100
Subject: [PATCH] ntdll: Also restore rbp before calling user mode callback.

If wine dlls are built with frame pointers enabled, the frame pointer will be
used during unwinding.

If we don't restore frame pointer before calling the user mode callback, then
later when the unwinder encounters the user mode callback frame, it will set
the frame pointer to something unexpected (depends on what it was during
`call_user_mode_callback`). Then for the subsequent frame it adjusts the stack
pointer based on the frame pointer, thus derailing the unwinding process.
---
 dlls/ntdll/unix/signal_x86_64.c | 7 ++++---
 dlls/user32/tests/win.c         | 2 +-
 2 files changed, 5 insertions(+), 4 deletions(-)

diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
index 6ec662b9850..e75b7205b07 100644
--- a/dlls/ntdll/unix/signal_x86_64.c
+++ b/dlls/ntdll/unix/signal_x86_64.c
@@ -1642,8 +1642,8 @@ __ASM_GLOBAL_FUNC( call_user_mode_callback,
                    "andq $~63,%rsp\n\t"
                    "leaq 0x10(%rbp),%rax\n\t"
                    "movq %rax,0xa8(%rsp)\n\t"  /* frame->syscall_cfa */
-                   "movq 0x378(%r13),%r10\n\t" /* thread_data->syscall_frame */
-                   "movq %r10,0xa0(%rsp)\n\t"  /* frame->prev_frame */
+                   "movq 0x378(%r13),%r14\n\t" /* thread_data->syscall_frame */
+                   "movq %r14,0xa0(%rsp)\n\t"  /* frame->prev_frame */
                    "movq %rsp,0x378(%r13)\n\t" /* thread_data->syscall_frame */
                    "testl $1,0x380(%r13)\n\t"  /* thread_data->syscall_trace */
                    "jz 1f\n\t"
@@ -1658,6 +1658,7 @@ __ASM_GLOBAL_FUNC( call_user_mode_callback,
                    "movq %r15,%rcx\n"          /* func */
                    /* switch to user stack */
                    "1:\tmovq %rdi,%rsp\n\t"    /* user_rsp */
+                   "movq 0x98(%r14),%rbp\n\t"  /* user_frame->Rbp */
 #ifdef __linux__
                    "movw 0x338(%r13),%ax\n"    /* amd64_thread_data()->fs */
                    "testw %ax,%ax\n\t"
@@ -1677,7 +1678,7 @@ __ASM_GLOBAL_FUNC( call_user_mode_callback,
                    "test %r10,%r10\n\t"
                    "jz 1f\n\t"
                    "xchgq %rcx,%r10\n\t"
-                   "1\t:jmpq *%rcx" )          /* func */
+                   "1:\tjmpq *%rcx" )          /* func */
 
 
 /***********************************************************************
diff --git a/dlls/user32/tests/win.c b/dlls/user32/tests/win.c
index 358a529e245..8885f1354eb 100644
--- a/dlls/user32/tests/win.c
+++ b/dlls/user32/tests/win.c
@@ -13787,7 +13787,7 @@ static LRESULT unwinding_wnd_proc(HWND w, UINT msg, WPARAM p2, LPARAM p3)
                 ok(context.R13 != 0xdeadbeef, "unexpected register value, %%r13 = %#I64x\n", context.R13);
                 ok(context.R14 != 0xdeadbeef, "unexpected register value, %%r14 = %#I64x\n", context.R14);
                 ok(context.R15 != 0xdeadbeef, "unexpected register value, %%r15 = %#I64x\n", context.R15);
-                todo_wine ok(context.Rbp == 0xdeadbeef, "unexpected register value, %%rbp = %#I64x\n", context.Rbp);
+                ok(context.Rbp == 0xdeadbeef, "unexpected register value, %%rbp = %#I64x\n", context.Rbp);
 
                 /* native seems to zero these registers, unclear whether wine should do the same. */
                 todo_wine {
-- 
GitLab

