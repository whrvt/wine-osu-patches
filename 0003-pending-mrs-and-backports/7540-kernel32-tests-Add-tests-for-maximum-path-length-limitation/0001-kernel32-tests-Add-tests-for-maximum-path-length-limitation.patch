From d2661b550e6b743be7c9acbc664a1c73cedcc5e3 Mon Sep 17 00:00:00 2001
From: yaoyongjie <yaoyongjie@uniontech.com>
Date: Tue, 11 Mar 2025 14:18:18 +0800
Subject: [PATCH] kernel32/tests: Add tests for maximum path length limitation.

In CopyFileEx, and DeleteFile functions, by default, the file name
and path are limited to MAX_PATH characters. To extend this limit
to 32,767 wide characters, need prepend "\\\\?\\" to the path.

Starting in Windows 10, version 1607, MAX_PATH limitations have been
removed from many common Win32 file and directory functions.
However, your app must opt-in to the new behavior.

To enable the new long path behavior per application, two conditions
must be met. A registry value must be set, and the application manifest
must include the longPathAware element.
---
 dlls/kernel32/tests/file.c             | 268 +++++++++++++++++++++++++
 dlls/kernel32/tests/wine_test.manifest |   9 +-
 2 files changed, 275 insertions(+), 2 deletions(-)

diff --git a/dlls/kernel32/tests/file.c b/dlls/kernel32/tests/file.c
index cf0c40d5cd6..ab63b8ad120 100644
--- a/dlls/kernel32/tests/file.c
+++ b/dlls/kernel32/tests/file.c
@@ -34,6 +34,7 @@
 #include "winternl.h"
 #include "winnls.h"
 #include "fileapi.h"
+#include "winreg.h"
 
 static HANDLE (WINAPI *pFindFirstFileExA)(LPCSTR,FINDEX_INFO_LEVELS,LPVOID,FINDEX_SEARCH_OPS,LPVOID,DWORD);
 static BOOL (WINAPI *pReplaceFileW)(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, LPVOID, LPVOID);
@@ -57,6 +58,7 @@ static void (WINAPI *pRtlInitAnsiString)(PANSI_STRING,PCSZ);
 static void (WINAPI *pRtlFreeUnicodeString)(PUNICODE_STRING);
 static BOOL (WINAPI *pSetFileCompletionNotificationModes)(HANDLE, UCHAR);
 static HANDLE (WINAPI *pFindFirstStreamW)(LPCWSTR filename, STREAM_INFO_LEVELS infolevel, void *data, DWORD flags);
+static NTSTATUS(WINAPI* pRtlGetVersion)(PRTL_OSVERSIONINFOEXW);
 
 static char filename[MAX_PATH];
 static const char sillytext[] =
@@ -106,6 +108,7 @@ static void InitFunctionPointers(void)
     pReOpenFile = (void *) GetProcAddress(hkernel32, "ReOpenFile");
     pSetFileCompletionNotificationModes = (void *)GetProcAddress(hkernel32, "SetFileCompletionNotificationModes");
     pFindFirstStreamW = (void *)GetProcAddress(hkernel32, "FindFirstStreamW");
+    pRtlGetVersion = (void *)GetProcAddress(hntdll, "RtlGetVersion");
 }
 
 static void create_file( const char *path )
@@ -904,12 +907,85 @@ static void test_CopyFileA(void)
     ok(ret, "DeleteFileA: error %ld\n", GetLastError());
 }
 
+/* Windows 10, version 1607, building number 14393, Redstone, August 2, 2016 */
+static BOOL is_win10_1607_or_later(void)
+{
+    static RTL_OSVERSIONINFOEXW rovi = { 0 };
+    if (rovi.dwOSVersionInfoSize == 0)
+    {
+        rovi.dwOSVersionInfoSize = sizeof(rovi);
+        if (pRtlGetVersion && S_OK == pRtlGetVersion(&rovi))
+            trace("windows version: win %ld, build %ld\n", rovi.dwMajorVersion, rovi.dwBuildNumber);
+    }
+
+    return rovi.dwMajorVersion >= 10 && rovi.dwBuildNumber >= 14393;
+}
+
+static BOOL is_reg_enable_long_path(void)
+{
+    static DWORD LongPathEnabled = -1;
+
+    DWORD ret;
+    HKEY hkey;
+    DWORD type, size = sizeof(LongPathEnabled);
+
+    if (LongPathEnabled == -1)
+    {
+        ret = RegOpenKeyExA( HKEY_LOCAL_MACHINE, "SYSTEM\\CurrentControlSet\\Control\\FileSystem", 0, KEY_READ, &hkey);
+        if (ret == ERROR_SUCCESS)
+        {
+            ret = RegQueryValueExA(hkey, "LongPathsEnabled", NULL, &type, (LPBYTE)&LongPathEnabled, &size);
+            RegCloseKey(hkey);
+        }
+        else
+        {
+            LongPathEnabled = 0;
+        }
+        trace("in registry LongPathsEnabled: %ld\n", LongPathEnabled);
+    }
+    return LongPathEnabled == 1;
+}
+
+static BOOL is_app_enabled_long_path(void)
+{
+    static WCHAR buffer[10] = { 0 };
+    static const WCHAR *trueW = L"true";
+    static const WCHAR *longPathAwareW = L"longPathAware";
+    static const WCHAR *namespace2016W = L"http://schemas.microsoft.com/SMI/2016/WindowsSettings";
+
+    BOOL ret;
+    SIZE_T size;
+
+    if (buffer[0] == 0)
+    {
+        memset( buffer, 0xcc, sizeof(buffer) );
+        ret = QueryActCtxSettingsW( 0, NULL, namespace2016W, longPathAwareW, buffer, lstrlenW(trueW) + 1, &size );
+        if (ret && size == lstrlenW(trueW) + 1)
+        {
+            trace("in app manifest LongPathAware: %s\n", debugstr_w(buffer));
+        }
+    }
+
+    return lstrcmpiW(buffer, trueW) == 0;
+}
+
+static BOOL is_enabled_long_path(void)
+{
+    return is_win10_1607_or_later() && is_reg_enable_long_path() && is_app_enabled_long_path();
+}
+
 static void test_CopyFileW(void)
 {
     WCHAR temp_path[MAX_PATH];
     WCHAR source[MAX_PATH], dest[MAX_PATH];
     static const WCHAR prefix[] = {'p','f','x',0};
     DWORD ret;
+    /* long file name, 247 charactors */
+    const WCHAR *a = L"a2345678lsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfie.txt";
+    const WCHAR *b = L"b2345678lsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfie.txt";
+    /* long file path is %TEMP%/%long_name% */
+    WCHAR long_path_1[MAX_PATH * 2] = { 0 };
+    WCHAR long_path_2[MAX_PATH * 2] = { 0 };
 
     ret = GetTempPathW(MAX_PATH, temp_path);
     if (ret == 0 && GetLastError() == ERROR_CALL_NOT_IMPLEMENTED)
@@ -942,6 +1018,101 @@ static void test_CopyFileW(void)
     ok(GetLastError() == ERROR_SUCCESS || broken(GetLastError() == ERROR_INVALID_PARAMETER) /* some win8 machines */,
         "Unexpected error %lu.\n", GetLastError());
 
+    /* test long file path, the length of the long_dest is larger than MAX_PATH. */
+    if (is_enabled_long_path())
+    {
+        wcscpy(long_path_1, temp_path);
+        wcscat(long_path_1, a);
+        SetLastError(0xdeadbeef);
+        ret = CopyFileExW(source, long_path_1, NULL, NULL, NULL, 0);
+        ok(ret, "Expected CopyFileExW successed, but got %ld, copy %s -> %s\n", GetLastError(), wine_dbgstr_w(source), wine_dbgstr_w(long_path_1));
+
+        DeleteFileW(dest);
+        SetLastError(0xdeadbeef);
+        ret = CopyFileExW(long_path_1, dest, NULL, NULL, NULL, 0);
+        ok(ret, "Expected CopyFileExW successed, but got %ld, copy %s -> %s\n", GetLastError(), wine_dbgstr_w(long_path_1), wine_dbgstr_w(dest));
+
+        wcscpy(long_path_2, temp_path);
+        wcscat(long_path_2, b);
+        SetLastError(0xdeadbeef);
+        ret = CopyFileExW(long_path_1, long_path_2, NULL, NULL, NULL, 0);
+        ok(ret, "Expected CopyFileExW successed, but got %ld, copy %s -> %s\n", GetLastError(), wine_dbgstr_w(long_path_1), wine_dbgstr_w(long_path_2));
+        ret = DeleteFileW(long_path_1);
+        ok(ret, "Unexpected DeleteFileW successed\n");
+        ret = DeleteFileW(long_path_2);
+        ok(ret, "Unexpected DeleteFileW successed\n");
+    }
+    else
+    {
+        wcscpy(long_path_1, temp_path);
+        wcscat(long_path_1, a);
+        SetLastError(0xdeadbeef);
+        ret = CopyFileExW(source, long_path_1, NULL, NULL, NULL, 0);
+        todo_wine ok(!ret && GetLastError() == ERROR_PATH_NOT_FOUND, "Expected CopyFileExW failed with ERROR_PATH_NOT_FOUND, but got %ld, copy %s -> %s\n", GetLastError(), wine_dbgstr_w(source), wine_dbgstr_w(long_path_1));
+        wcscpy(long_path_2, temp_path);
+        wcscat(long_path_2, b);
+        SetLastError(0xdeadbeef);
+        ret = CopyFileExW(long_path_1, long_path_2, NULL, NULL, NULL, 0);
+        todo_wine ok(!ret && GetLastError() == ERROR_PATH_NOT_FOUND, "Expected CopyFileExW failed with ERROR_PATH_NOT_FOUND, but got %ld, copy %s -> %s\n", GetLastError(), wine_dbgstr_w(long_path_1), wine_dbgstr_w(long_path_2));
+        ret = DeleteFileW(long_path_1);
+        todo_wine ok(!ret, "Unexpected DeleteFileW successed\n");
+        ret = DeleteFileW(long_path_2);
+        todo_wine ok(!ret, "Unexpected DeleteFileW successed\n");
+    }
+
+    /* test long file name prepend "\\?\" */
+    wcscpy(long_path_1, L"\\\\?\\");
+    wcscat(long_path_1, temp_path);
+    wcscat(long_path_1, a);
+    SetLastError(0xdeadbeef);
+    ret = CopyFileExW(source, long_path_1, NULL, NULL, NULL, 0);
+    ok(ret, "CopyFileExW failed, got %ld, copy %s -> %s failed\n", GetLastError(), wine_dbgstr_w(source), wine_dbgstr_w(long_path_1));
+    wcscpy(long_path_2, L"\\\\?\\");
+    wcscat(long_path_2, temp_path);
+    wcscat(long_path_2, b);
+    SetLastError(0xdeadbeef);
+    ret = CopyFileExW(long_path_1, long_path_2, NULL, NULL, NULL, 0);
+    ok(ret, "CopyFileExW failed, got %ld, copy %s -> %s failed\n", GetLastError(), wine_dbgstr_w(long_path_1), wine_dbgstr_w(long_path_2));
+
+    if (is_enabled_long_path())
+    {
+        wcscpy(long_path_1, temp_path);
+        wcscat(long_path_1, a);
+        ret = DeleteFileW(long_path_1);
+        todo_wine ok(ret, "DeleteFileW: error %ld\n", GetLastError());
+        wcscpy(long_path_2, temp_path);
+        wcscat(long_path_2, b);
+        ret = DeleteFileW(long_path_2);
+        todo_wine ok(ret, "DeleteFileW: error %ld\n", GetLastError());
+    }
+    else
+    {
+        wcscpy(long_path_1, temp_path);
+        wcscat(long_path_1, a);
+        ret = DeleteFileW(long_path_1);
+        todo_wine ok(!ret, "Unexpected DeleteFileW successed, %s\n", wine_dbgstr_w(long_path_1));
+        wcscpy(long_path_2, temp_path);
+        wcscat(long_path_2, b);
+        ret = DeleteFileW(long_path_2);
+        todo_wine ok(!ret, "Unexpected DeleteFileW successed, %s\n", wine_dbgstr_w(long_path_1));
+
+        wcscpy(long_path_1, L"\\\\?\\");
+        wcscat(long_path_1, temp_path);
+        wcscat(long_path_1, a);
+        SetLastError(0xdeadbeef);
+        ret = DeleteFileW(long_path_1);
+        todo_wine ok(ret, "DeleteFileW: error %ld\n", GetLastError());
+        wcscpy(long_path_2, L"\\\\?\\");
+        wcscat(long_path_2, temp_path);
+        wcscat(long_path_2, b);
+        SetLastError(0xdeadbeef);
+        ret = DeleteFileW(long_path_2);
+        todo_wine ok(ret, "DeleteFileW: error %ld\n", GetLastError());
+    }
+
+    ret = DeleteFileW(NULL);
+    ok(!ret && GetLastError() == ERROR_PATH_NOT_FOUND, "Expected ERROR_PATH_NOT_FOUND for DeleteFileW(NULL), but got error %ld\n", GetLastError());
+
     ret = DeleteFileW(source);
     ok(ret, "DeleteFileW: error %ld\n", GetLastError());
     ret = DeleteFileW(dest);
@@ -1194,6 +1365,12 @@ static void test_CopyFileEx(void)
     HANDLE hfile;
     DWORD ret;
     BOOL retok;
+    /* long file name, 247 charactors */
+    const char *a = "a2345678lsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfie.txt";
+    const char *b = "b2345678lsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfielfelfjellsfalfielsfleflsfie.txt";
+    /* long file path is %TEMP%/%long_name% */
+    char long_path_1[MAX_PATH * 2] = { 0 };
+    char long_path_2[MAX_PATH * 2] = { 0 };
 
     ret = GetTempPathA(MAX_PATH, temp_path);
     ok(ret != 0, "GetTempPathA error %ld\n", GetLastError());
@@ -1235,6 +1412,97 @@ static void test_CopyFileEx(void)
     ok(!retok, "CopyFileExA unexpectedly succeeded\n");
     ok(GetLastError() == ERROR_PATH_NOT_FOUND, "expected ERROR_PATH_NOT_FOUND, got %ld\n", GetLastError());
 
+    /* test long file path, the length of the long_dest is larger than MAX_PATH. */
+    if (is_enabled_long_path())
+    {
+        strcpy(long_path_1, temp_path);
+        strcat(long_path_1, a);
+        SetLastError(0xdeadbeef);
+        retok = CopyFileExA(source, long_path_1, NULL, NULL, NULL, 0);
+        ok(retok, "Expected CopyFileExA succeeded, but got %ld, copy %s -> %s\n", GetLastError(), source, long_path_1);
+
+        DeleteFileA(dest);
+        SetLastError(0xdeadbeef);
+        retok = CopyFileExA(long_path_1, dest, NULL, NULL, NULL, 0);
+        ok(retok, "Expected CopyFileExA successed, but got %ld, copy %s -> %s\n", GetLastError(), long_path_1, dest);
+
+        strcpy(long_path_2, temp_path);
+        strcat(long_path_2, b);
+        SetLastError(0xdeadbeef);
+        retok = CopyFileExA(long_path_1, long_path_2, NULL, NULL, NULL, 0);
+        ok(retok, "Expected CopyFileExA succeeded, but got %ld, copy %s -> %s\n", GetLastError(), long_path_1, long_path_2);
+        retok = DeleteFileA(long_path_1);
+        todo_wine ok(retok, "DeleteFileA failed: %ld, %s\n", GetLastError(), long_path_1);
+        retok = DeleteFileA(long_path_2);
+        todo_wine ok(retok, "DeleteFileA failed: %ld, %s\n", GetLastError(), long_path_2);
+    }
+    else
+    {
+        strcpy(long_path_1, temp_path);
+        strcat(long_path_1, a);
+        SetLastError(0xdeadbeef);
+        retok = CopyFileExA(source, long_path_1, NULL, NULL, NULL, 0);
+        todo_wine ok(!retok && GetLastError() == ERROR_PATH_NOT_FOUND, "Expected CopyFileExA failed with ERROR_PATH_NOT_FOUND, but got %ld, copy %s -> %s\n", GetLastError(), source, long_path_1);
+        strcpy(long_path_2, temp_path);
+        strcat(long_path_2, b);
+        SetLastError(0xdeadbeef);
+        retok = CopyFileExA(long_path_1, long_path_2, NULL, NULL, NULL, 0);
+        todo_wine ok(!retok && GetLastError() == ERROR_PATH_NOT_FOUND, "Expected CopyFileExA failed with ERROR_PATH_NOT_FOUND, but got %ld, copy %s -> %s\n", GetLastError(), long_path_1, long_path_2);
+        retok = DeleteFileA(long_path_1);
+        todo_wine ok(!retok, "Unexpected DeleteFileA successed\n");
+        retok = DeleteFileA(long_path_2);
+        todo_wine ok(!retok, "Unexpected DeleteFileA successed\n");
+    }
+
+    /* test long file name prepend "\\?\" */
+    strcpy(long_path_1, "\\\\?\\");
+    strcat(long_path_1, temp_path);
+    strcat(long_path_1, a);
+    SetLastError(0xdeadbeef);
+    retok = CopyFileExA(source, long_path_1, NULL, NULL, NULL, 0);
+    ok(retok, "CopyFileExA failed, got %ld, copy %s -> %s failed\n", GetLastError(), source, long_path_1);
+    strcpy(long_path_2, "\\\\?\\");
+    strcat(long_path_2, temp_path);
+    strcat(long_path_2, b);
+    SetLastError(0xdeadbeef);
+    retok = CopyFileExA(long_path_1, long_path_2, NULL, NULL, NULL, 0);
+    ok(retok, "CopyFileExA failed, got %ld, copy %s -> %s failed\n", GetLastError(), long_path_1, long_path_2);
+    if (is_enabled_long_path())
+    {
+        strcpy(long_path_1, temp_path);
+        strcat(long_path_1, a);
+        ret = DeleteFileA(long_path_1);
+        todo_wine ok(ret, "DeleteFileA failed with error %ld\n", GetLastError());
+        strcpy(long_path_2, temp_path);
+        strcat(long_path_2, b);
+        ret = DeleteFileA(long_path_2);
+        todo_wine ok(ret, "DeleteFileA failed with error %ld\n", GetLastError());
+    }
+    else
+    {
+        strcpy(long_path_1, temp_path);
+        strcat(long_path_1, a);
+        ret = DeleteFileA(long_path_1);
+        todo_wine ok(!ret, "Unexpected DeleteFileA successed, %s\n", long_path_1);
+        strcpy(long_path_2, temp_path);
+        strcat(long_path_2, b);
+        ret = DeleteFileA(long_path_2);
+        todo_wine ok(!ret, "Unexpected DeleteFileA successed, %s\n", long_path_2);
+
+        strcpy(long_path_1, "\\\\?\\");
+        strcat(long_path_1, temp_path);
+        strcat(long_path_1, a);
+        SetLastError(0xdeadbeef);
+        ret = DeleteFileA(long_path_1);
+        todo_wine ok(ret, "DeleteFileA failed with error %ld\n", GetLastError());
+        strcpy(long_path_2, "\\\\?\\");
+        strcat(long_path_2, temp_path);
+        strcat(long_path_2, b);
+        SetLastError(0xdeadbeef);
+        ret = DeleteFileA(long_path_2);
+        todo_wine ok(ret, "DeleteFileA failed with error %ld\n", GetLastError());
+    }
+
     ret = DeleteFileA(source);
     ok(ret, "DeleteFileA failed with error %ld\n", GetLastError());
     ret = DeleteFileA(dest);
diff --git a/dlls/kernel32/tests/wine_test.manifest b/dlls/kernel32/tests/wine_test.manifest
index de77de3e201..124fa6713ac 100644
--- a/dlls/kernel32/tests/wine_test.manifest
+++ b/dlls/kernel32/tests/wine_test.manifest
@@ -1,4 +1,9 @@
 <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
-<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
-  <assemblyIdentity version="1.0.0.0" name="Wine.Test"/>
+<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0" xmlns:asmv3="urn:schemas-microsoft-com:asm.v3">
+  <assemblyIdentity type="win32" version="1.0.0.0" name="Wine.Test"/>
+  <asmv3:application>
+    <asmv3:windowsSettings xmlns:ws2="http://schemas.microsoft.com/SMI/2016/WindowsSettings">
+      <ws2:longPathAware>true</ws2:longPathAware>
+    </asmv3:windowsSettings>
+  </asmv3:application>
 </assembly>
-- 
GitLab

