diff --git a/dlls/winewayland.drv/window.c b/dlls/winewayland.drv/window.c
index c76f8686014..00035ba7fde 100644
--- a/dlls/winewayland.drv/window.c
+++ b/dlls/winewayland.drv/window.c
@@ -557,28 +557,15 @@ BOOL WAYLAND_WindowPosChanging(HWND hwnd, UINT swp_flags, BOOL shaped, const REC
                                const RECT *client_rect, RECT *visible_rect)
 {
     struct wayland_win_data *data = wayland_win_data_get(hwnd);
-    HWND parent;
-    BOOL ret = FALSE;
 
     TRACE("hwnd %p, swp_flags %04x, shaped %u, window_rect %s, client_rect %s, visible_rect %s\n",
           hwnd, swp_flags, shaped, wine_dbgstr_rect(window_rect), wine_dbgstr_rect(client_rect),
           wine_dbgstr_rect(visible_rect));
 
-    if (!data && !(data = wayland_win_data_create(hwnd, window_rect, client_rect, visible_rect)))
-        return FALSE; /* use default surface */
-
-    /* Use the default surface for child windows, unless we need a dedicated
-     * wayland surface in which case use a dedicated window surface. */
-     parent = NtUserGetAncestor(hwnd, GA_PARENT);
-     if (parent && parent != NtUserGetDesktopWindow() &&
-         !wayland_win_data_needs_wayland_surface(data, wayland_win_data_get_top_parent(data)))
-        goto done; /* use default surface */
-
-    ret = TRUE;
-
-done:
+    if (!data && !(data = wayland_win_data_create(hwnd, window_rect, client_rect, visible_rect))) return FALSE; /* use default surface */
     wayland_win_data_release(data);
-    return ret;
+
+    return TRUE;
 }
 
 
