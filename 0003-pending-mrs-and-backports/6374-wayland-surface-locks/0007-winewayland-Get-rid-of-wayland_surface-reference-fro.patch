From 5cf56fdce17d6da49011c3b27c0d188430c14db4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 20 Aug 2024 12:04:57 +0200
Subject: [PATCH 07/10] winewayland: Get rid of wayland_surface reference from
 window_surface.

---
 dlls/winewayland.drv/waylanddrv.h     |  7 -------
 dlls/winewayland.drv/window.c         | 12 +----------
 dlls/winewayland.drv/window_surface.c | 29 ---------------------------
 3 files changed, 1 insertion(+), 47 deletions(-)

diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index 5644045109c..85df9865a3d 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -267,13 +267,6 @@ struct wayland_shm_buffer *wayland_shm_buffer_create(int width, int height,
 void wayland_shm_buffer_ref(struct wayland_shm_buffer *shm_buffer);
 void wayland_shm_buffer_unref(struct wayland_shm_buffer *shm_buffer);
 
-/**********************************************************************
- *          Wayland window surface
- */
-
-void wayland_window_surface_update_wayland_surface(struct window_surface *surface, const RECT *visible_rect,
-                                                   struct wayland_surface *wayland_surface);
-
 /**********************************************************************
  *          Wayland Window
  */
diff --git a/dlls/winewayland.drv/window.c b/dlls/winewayland.drv/window.c
index a4446b34c56..7b273fdd202 100644
--- a/dlls/winewayland.drv/window.c
+++ b/dlls/winewayland.drv/window.c
@@ -119,11 +119,7 @@ static void wayland_win_data_destroy(struct wayland_win_data *data)
 
     pthread_mutex_unlock(&win_data_mutex);
 
-    if (data->window_surface)
-    {
-        wayland_window_surface_update_wayland_surface(data->window_surface, NULL, NULL);
-        window_surface_release(data->window_surface);
-    }
+    if (data->window_surface) window_surface_release(data->window_surface);
     if (data->wayland_surface) wayland_surface_destroy(data->wayland_surface);
     if (data->window_contents) wayland_shm_buffer_unref(data->window_contents);
     free(data);
@@ -210,8 +206,6 @@ static void wayland_win_data_update_wayland_surface(struct wayland_win_data *dat
     /* We don't want wayland surfaces for child windows. */
     if (parent != NtUserGetDesktopWindow() && parent != 0)
     {
-        if (data->window_surface)
-            wayland_window_surface_update_wayland_surface(data->window_surface, NULL, NULL);
         if (surface) wayland_surface_destroy(surface);
         surface = NULL;
         goto out;
@@ -248,10 +242,6 @@ static void wayland_win_data_update_wayland_surface(struct wayland_win_data *dat
 
     pthread_mutex_unlock(&surface->mutex);
 
-    if (data->window_surface)
-        wayland_window_surface_update_wayland_surface(data->window_surface,
-                                                      &data->rects.visible, surface);
-
     /* Size/position changes affect the effective pointer constraint, so update
      * it as needed. */
     if (data->hwnd == NtUserGetForegroundWindow()) reapply_cursor_clipping();
diff --git a/dlls/winewayland.drv/window_surface.c b/dlls/winewayland.drv/window_surface.c
index b4aea7ab580..36bbb2d4f67 100644
--- a/dlls/winewayland.drv/window_surface.c
+++ b/dlls/winewayland.drv/window_surface.c
@@ -43,7 +43,6 @@ struct wayland_buffer_queue
 struct wayland_window_surface
 {
     struct window_surface header;
-    struct wayland_surface *wayland_surface;
     struct wayland_buffer_queue *wayland_buffer_queue;
 };
 
@@ -329,12 +328,6 @@ static BOOL wayland_window_surface_flush(struct window_surface *window_surface,
     HRGN surface_damage_region = NULL;
     HRGN copy_from_window_region;
 
-    if (!wws->wayland_surface)
-    {
-        ERR("missing wayland surface=%p, returning\n", wws->wayland_surface);
-        goto done;
-    }
-
     surface_damage_region = NtGdiCreateRectRgn(rect->left + dirty->left, rect->top + dirty->top,
                                                rect->left + dirty->right, rect->top + dirty->bottom);
     if (!surface_damage_region)
@@ -446,28 +439,6 @@ static struct window_surface *wayland_window_surface_create(HWND hwnd, const REC
     return window_surface;
 }
 
-/***********************************************************************
- *           wayland_window_surface_update_wayland_surface
- */
-void wayland_window_surface_update_wayland_surface(struct window_surface *window_surface, const RECT *visible_rect,
-                                                   struct wayland_surface *wayland_surface)
-{
-    struct wayland_window_surface *wws;
-
-    /* ignore calls with the dummy surface */
-    if (window_surface->funcs != &wayland_window_surface_funcs) return;
-
-    wws = wayland_window_surface_cast(window_surface);
-    window_surface_lock(window_surface);
-
-    TRACE("surface=%p hwnd=%p visible_rect=%s wayland_surface=%p\n", wws, window_surface->hwnd,
-          wine_dbgstr_rect(visible_rect), wayland_surface);
-
-    wws->wayland_surface = wayland_surface;
-    window_surface_unlock(window_surface);
-}
-
-
 /***********************************************************************
  *           WAYLAND_CreateWindowSurface
  */
-- 
2.46.0

