From 83e95cfeaf1a997f714180a9c96e4eb58dd7efb5 Mon Sep 17 00:00:00 2001
From: Connor McAdams <cmcadams@codeweavers.com>
Date: Tue, 24 Sep 2024 09:04:45 -0400
Subject: [PATCH] d3dx9: Add support for D3DFMT_X8L8V8U8.

Signed-off-by: Connor McAdams <cmcadams@codeweavers.com>
---
 dlls/d3dx9_36/tests/surface.c | 46 +++++++++++++++++------------------
 dlls/d3dx9_36/util.c          |  1 +
 2 files changed, 23 insertions(+), 24 deletions(-)

diff --git a/dlls/d3dx9_36/tests/surface.c b/dlls/d3dx9_36/tests/surface.c
index f3053b165c9..02c5ac010b9 100644
--- a/dlls/d3dx9_36/tests/surface.c
+++ b/dlls/d3dx9_36/tests/surface.c
@@ -739,7 +739,7 @@ static void test_D3DXGetImageInfo(void)
     check_dds_pixel_format(DDS_PF_LUMINANCE | DDS_PF_ALPHA, 0, 8, 0x0f, 0, 0, 0xf0, D3DFMT_A4L4);
     check_dds_pixel_format(DDS_PF_BUMPDUDV, 0, 16, 0x00ff, 0xff00, 0, 0, D3DFMT_V8U8);
     todo_wine check_dds_pixel_format(DDS_PF_BUMPDUDV, 0, 32, 0x0000ffff, 0xffff0000, 0, 0, D3DFMT_V16U16);
-    todo_wine check_dds_pixel_format(DDS_PF_BUMPLUMINANCE, 0, 32, 0x0000ff, 0x00ff00, 0xff0000, 0, D3DFMT_X8L8V8U8);
+    check_dds_pixel_format(DDS_PF_BUMPLUMINANCE, 0, 32, 0x0000ff, 0x00ff00, 0xff0000, 0, D3DFMT_X8L8V8U8);
 
     test_dds_header_handling();
 
@@ -2254,19 +2254,17 @@ static void test_D3DXLoadSurface(IDirect3DDevice9 *device)
         /* X8L8V8U8 unorm/snorm. */
         hr = D3DXLoadSurfaceFromMemory(surf, NULL, NULL, pixdata_x8l8v8u8, D3DFMT_X8L8V8U8, 8, NULL, &rect,
                 D3DX_FILTER_NONE, 0);
-        todo_wine ok(hr == D3D_OK, "Got unexpected hr %#lx.\n", hr);
-        if (SUCCEEDED(hr))
-        {
-            /* The luma value goes into the alpha channel. */
-            hr = IDirect3DSurface9_LockRect(surf, &lockrect, NULL, D3DLOCK_READONLY);
-            ok(hr == D3D_OK, "Failed to lock surface, hr %#lx.\n", hr);
-            check_pixel_float4(&lockrect, 0, 0,  0.0,               3.77952754e-001f, 1.0f, 0.0f,            0, FALSE);
-            check_pixel_float4(&lockrect, 1, 0,  5.03937006e-001f,  1.0f,             1.0f, 3.33333343e-001, 0, FALSE);
-            check_pixel_float4(&lockrect, 0, 1, -1.0f,             -1.0f,             1.0f, 6.66666687e-001, 0, FALSE);
-            check_pixel_float4(&lockrect, 1, 1, -5.03937006e-001f, -7.87401572e-003f, 1.0f, 1.0f,            0, FALSE);
-            hr = IDirect3DSurface9_UnlockRect(surf);
-            ok(hr == D3D_OK, "Failed to unlock surface, hr %#lx.\n", hr);
-        }
+        ok(hr == D3D_OK, "Got unexpected hr %#lx.\n", hr);
+
+        /* The luma value goes into the alpha channel. */
+        hr = IDirect3DSurface9_LockRect(surf, &lockrect, NULL, D3DLOCK_READONLY);
+        ok(hr == D3D_OK, "Failed to lock surface, hr %#lx.\n", hr);
+        check_pixel_float4(&lockrect, 0, 0,  0.0,               3.77952754e-001f, 1.0f, 0.0f,            0, FALSE);
+        check_pixel_float4(&lockrect, 1, 0,  5.03937006e-001f,  1.0f,             1.0f, 3.33333343e-001, 0, FALSE);
+        check_pixel_float4(&lockrect, 0, 1, -1.0f,             -1.0f,             1.0f, 6.66666687e-001, 0, FALSE);
+        check_pixel_float4(&lockrect, 1, 1, -5.03937006e-001f, -7.87401572e-003f, 1.0f, 1.0f,            0, FALSE);
+        hr = IDirect3DSurface9_UnlockRect(surf);
+        ok(hr == D3D_OK, "Failed to unlock surface, hr %#lx.\n", hr);
 
         check_release((IUnknown*)surf, 0);
     }
@@ -2349,7 +2347,7 @@ static void test_D3DXLoadSurface(IDirect3DDevice9 *device)
         SetRect(&rect, 0, 0, 2, 2);
         hr = D3DXLoadSurfaceFromMemory(surf, NULL, NULL, pixdata_a8b8g8r8_2, D3DFMT_A8B8G8R8, 8, NULL, &rect,
                 D3DX_FILTER_NONE, 0);
-        todo_wine ok(hr == D3D_OK, "Unexpected hr %#lx.\n", hr);
+        ok(hr == D3D_OK, "Unexpected hr %#lx.\n", hr);
 
         /*
          * The luma channel here doesn't do RGB->Luma conversion, it just
@@ -2358,10 +2356,10 @@ static void test_D3DXLoadSurface(IDirect3DDevice9 *device)
          */
         hr = IDirect3DSurface9_LockRect(surf, &lockrect, NULL, D3DLOCK_READONLY);
         ok(hr == D3D_OK, "Failed to lock surface, hr %#lx.\n", hr);
-        todo_wine check_pixel_4bpp(&lockrect, 0, 0, 0x00309282);
-        todo_wine check_pixel_4bpp(&lockrect, 1, 0, 0x0070d2c2);
-        todo_wine check_pixel_4bpp(&lockrect, 0, 1, 0x00b01000);
-        todo_wine check_pixel_4bpp(&lockrect, 1, 1, 0x00ff5040);
+        check_pixel_4bpp(&lockrect, 0, 0, 0x00309282);
+        check_pixel_4bpp(&lockrect, 1, 0, 0x0070d2c2);
+        check_pixel_4bpp(&lockrect, 0, 1, 0x00b01000);
+        check_pixel_4bpp(&lockrect, 1, 1, 0x00ff5040);
         hr = IDirect3DSurface9_UnlockRect(surf);
         ok(hr == D3D_OK, "Failed to unlock surface, hr %#lx.\n", hr);
 
@@ -2372,14 +2370,14 @@ static void test_D3DXLoadSurface(IDirect3DDevice9 *device)
          */
         hr = D3DXLoadSurfaceFromMemory(surf, NULL, NULL, pixdata_q8w8v8u8, D3DFMT_Q8W8V8U8, 8, NULL, &rect,
                 D3DX_FILTER_NONE, 0);
-        todo_wine ok(hr == D3D_OK, "Unexpected hr %#lx.\n", hr);
+        ok(hr == D3D_OK, "Unexpected hr %#lx.\n", hr);
 
         hr = IDirect3DSurface9_LockRect(surf, &lockrect, NULL, D3DLOCK_READONLY);
         ok(hr == D3D_OK, "Failed to lock surface, hr %#lx.\n", hr);
-        todo_wine check_pixel_4bpp(&lockrect, 0, 0, 0x00b01000);
-        todo_wine check_pixel_4bpp(&lockrect, 1, 0, 0x00ff5040);
-        todo_wine check_pixel_4bpp(&lockrect, 0, 1, 0x002f8282);
-        todo_wine check_pixel_4bpp(&lockrect, 1, 1, 0x007ed1c1);
+        check_pixel_4bpp(&lockrect, 0, 0, 0x00b01000);
+        check_pixel_4bpp(&lockrect, 1, 0, 0x00ff5040);
+        check_pixel_4bpp(&lockrect, 0, 1, 0x002f8282);
+        check_pixel_4bpp(&lockrect, 1, 1, 0x007ed1c1);
         hr = IDirect3DSurface9_UnlockRect(surf);
         ok(hr == D3D_OK, "Failed to unlock surface, hr %#lx.\n", hr);
 
diff --git a/dlls/d3dx9_36/util.c b/dlls/d3dx9_36/util.c
index 39d33816bcb..a618100870a 100644
--- a/dlls/d3dx9_36/util.c
+++ b/dlls/d3dx9_36/util.c
@@ -66,6 +66,7 @@ static const struct pixel_format_desc formats[] =
     {D3DFMT_P8,            { 8,  8,  8,  8}, { 0,  0,  0,  0},  1, 1, 1,  1, CTYPE_INDEX, CTYPE_INDEX, 0           },
     {D3DFMT_Q8W8V8U8,      { 8,  8,  8,  8}, {24,  0,  8, 16},  4, 1, 1,  4, CTYPE_SNORM, CTYPE_SNORM, 0           },
     {D3DFMT_V8U8,          { 0,  8,  8,  0}, { 0,  0,  8,  0},  2, 1, 1,  2, CTYPE_EMPTY, CTYPE_SNORM, 0           },
+    {D3DFMT_X8L8V8U8,      { 8,  8,  8,  0}, {16,  0,  8,  0},  4, 1, 1,  4, CTYPE_UNORM, CTYPE_SNORM, 0           },
     /* marks last element */
     {D3DFMT_UNKNOWN,       { 0,  0,  0,  0}, { 0,  0,  0,  0},  0, 1, 1,  0, CTYPE_EMPTY, CTYPE_EMPTY, 0           },
 };
-- 
GitLab

