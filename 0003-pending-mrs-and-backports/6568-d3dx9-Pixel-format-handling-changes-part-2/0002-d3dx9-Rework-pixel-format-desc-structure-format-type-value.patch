From 316ccbd0ed66d1d5e80a0ee0a27b599f2e40a449 Mon Sep 17 00:00:00 2001
From: Connor McAdams <cmcadams@codeweavers.com>
Date: Tue, 24 Sep 2024 09:46:13 -0400
Subject: [PATCH] d3dx9: Rework pixel_format_desc structure format type value.

Signed-off-by: Connor McAdams <cmcadams@codeweavers.com>
---
 dlls/d3dx9_36/d3dx9_private.h |  47 +++++++++-----
 dlls/d3dx9_36/surface.c       | 113 ++++++++++++++++++++++------------
 dlls/d3dx9_36/texture.c       |   6 +-
 dlls/d3dx9_36/util.c          |  74 +++++++++++-----------
 4 files changed, 147 insertions(+), 93 deletions(-)

diff --git a/dlls/d3dx9_36/d3dx9_private.h b/dlls/d3dx9_36/d3dx9_private.h
index eb2594a43fa..cf78e1a1444 100644
--- a/dlls/d3dx9_36/d3dx9_private.h
+++ b/dlls/d3dx9_36/d3dx9_private.h
@@ -64,13 +64,16 @@ enum range {
 struct d3dx_color
 {
     struct vec4 value;
-    enum range range;
+    enum range rgb_range;
+    enum range a_range;
 };
 
-static inline void set_d3dx_color(struct d3dx_color *color, const struct vec4 *value, enum range range)
+static inline void set_d3dx_color(struct d3dx_color *color, const struct vec4 *value, enum range rgb_range,
+        enum range a_range)
 {
     color->value = *value;
-    color->range = range;
+    color->rgb_range = rgb_range;
+    color->a_range = a_range;
 }
 
 struct volume
@@ -88,14 +91,17 @@ static inline void set_volume_struct(struct volume *volume, uint32_t width, uint
 }
 
 /* for internal use */
-enum format_type {
-    FORMAT_ARGB,   /* unsigned */
-    FORMAT_ARGBF16,/* float 16 */
-    FORMAT_ARGBF,  /* float */
-    FORMAT_ARGB_SNORM,
-    FORMAT_DXT,
-    FORMAT_INDEX,
-    FORMAT_UNKNOWN
+enum component_type {
+    CTYPE_EMPTY = 0x00,
+    CTYPE_UNORM = 0x01,
+    CTYPE_SNORM = 0x02,
+    CTYPE_FLOAT = 0x03,
+    CTYPE_LUMA  = 0x04,
+    CTYPE_INDEX = 0x05,
+};
+
+enum format_flag {
+    FMT_FLAG_DXT  = 0x01,
 };
 
 struct pixel_format_desc {
@@ -106,7 +112,9 @@ struct pixel_format_desc {
     UINT block_width;
     UINT block_height;
     UINT block_byte_count;
-    enum format_type type;
+    enum component_type a_type;
+    enum component_type rgb_type;
+    uint32_t flags;
     void (*from_rgba)(const struct vec4 *src, struct vec4 *dst);
     void (*to_rgba)(const struct vec4 *src, struct vec4 *dst, const PALETTEENTRY *palette);
 };
@@ -180,17 +188,26 @@ static inline BOOL is_unknown_format(const struct pixel_format_desc *format)
 
 static inline BOOL is_index_format(const struct pixel_format_desc *format)
 {
-    return (format->type == FORMAT_INDEX);
+    return (format->a_type == CTYPE_INDEX || format->rgb_type == CTYPE_INDEX);
 }
 
 static inline BOOL is_compressed_format(const struct pixel_format_desc *format)
 {
-    return (format->type == FORMAT_DXT);
+    return !!(format->flags & FMT_FLAG_DXT);
 }
 
 static inline BOOL format_types_match(const struct pixel_format_desc *src, const struct pixel_format_desc *dst)
 {
-    return (src->type == dst->type);
+    if ((src->a_type && dst->a_type) && (src->a_type != dst->a_type))
+        return FALSE;
+
+    if ((src->rgb_type && dst->rgb_type) && (src->rgb_type != dst->rgb_type))
+        return FALSE;
+
+    if (src->flags != dst->flags)
+        return FALSE;
+
+    return (src->rgb_type == dst->rgb_type || src->a_type == dst->a_type);
 }
 
 static inline BOOL is_conversion_from_supported(const struct pixel_format_desc *format)
diff --git a/dlls/d3dx9_36/surface.c b/dlls/d3dx9_36/surface.c
index fa9db1167f2..8c5e89f1f9c 100644
--- a/dlls/d3dx9_36/surface.c
+++ b/dlls/d3dx9_36/surface.c
@@ -1505,32 +1505,34 @@ static DWORD make_argb_color(const struct argb_conversion_info *info, const DWOR
     return val;
 }
 
+static enum range get_range_for_component_type(enum component_type type)
+{
+    switch (type)
+    {
+    case CTYPE_SNORM:
+        return RANGE_SNORM;
+
+    case CTYPE_LUMA:
+    case CTYPE_INDEX:
+    case CTYPE_UNORM:
+        return RANGE_UNORM;
+
+    default:
+        return RANGE_FULL;
+    }
+}
+
 /* It doesn't work for components bigger than 32 bits (or somewhat smaller but unaligned). */
 void format_to_d3dx_color(const struct pixel_format_desc *format, const BYTE *src, struct d3dx_color *dst)
 {
     DWORD mask, tmp;
     unsigned int c;
 
-    switch (format->type)
-    {
-    case FORMAT_ARGBF16:
-    case FORMAT_ARGBF:
-        dst->range = RANGE_FULL;
-        break;
-    case FORMAT_ARGB:
-    case FORMAT_INDEX:
-        dst->range = RANGE_UNORM;
-        break;
-    case FORMAT_ARGB_SNORM:
-        dst->range = RANGE_SNORM;
-        break;
-    default: /* Shouldn't pass FORMAT_DXT/FORMAT_UNKNOWN into here. */
-        assert(0);
-        break;
-    }
-
+    dst->rgb_range = get_range_for_component_type(format->rgb_type);
+    dst->a_range = get_range_for_component_type(format->a_type);
     for (c = 0; c < 4; ++c)
     {
+        const enum component_type dst_ctype = !c ? format->a_type : format->rgb_type;
         static const unsigned int component_offsets[4] = {3, 0, 1, 2};
         float *dst_component = &dst->value.x + component_offsets[c];
 
@@ -1541,11 +1543,22 @@ void format_to_d3dx_color(const struct pixel_format_desc *format, const BYTE *sr
             memcpy(&tmp, src + format->shift[c] / 8,
                     min(sizeof(DWORD), (format->shift[c] % 8 + format->bits[c] + 7) / 8));
 
-            if (format->type == FORMAT_ARGBF16)
-                *dst_component = float_16_to_32(tmp);
-            else if (format->type == FORMAT_ARGBF)
-                *dst_component = *(float *)&tmp;
-            else if (format->type == FORMAT_ARGB_SNORM)
+            switch (dst_ctype)
+            {
+            case CTYPE_FLOAT:
+                if (format->bits[c] == 16)
+                    *dst_component = float_16_to_32(tmp);
+                else
+                    *dst_component = *(float *)&tmp;
+                break;
+
+            case CTYPE_LUMA:
+            case CTYPE_INDEX:
+            case CTYPE_UNORM:
+                *dst_component = (float)((tmp >> format->shift[c] % 8) & mask) / mask;
+                break;
+
+            case CTYPE_SNORM:
             {
                 const uint32_t sign_bit = (1u << (format->bits[c] - 1));
                 uint32_t tmp_extended, tmp_masked = (tmp >> format->shift[c] % 8) & mask;
@@ -1564,9 +1577,12 @@ void format_to_d3dx_color(const struct pixel_format_desc *format, const BYTE *sr
                 }
 
                 *dst_component = (float)(((int32_t)tmp_extended)) / (sign_bit - 1);
+                break;
+            }
+
+            default:
+                break;
             }
-            else
-                *dst_component = (float)((tmp >> format->shift[c] % 8) & mask) / mask;
         }
         else
             *dst_component = 1.0f;
@@ -1583,36 +1599,57 @@ void format_from_d3dx_color(const struct pixel_format_desc *format, const struct
 
     for (c = 0; c < 4; ++c)
     {
+        const enum component_type dst_ctype = !c ? format->a_type : format->rgb_type;
         static const unsigned int component_offsets[4] = {3, 0, 1, 2};
-        const float src_component = *((const float *)src + component_offsets[c]);
+        const float src_component = *(&src->value.x + component_offsets[c]);
+        const enum range src_range = !c ? src->a_range : src->rgb_range;
 
         if (!format->bits[c])
             continue;
 
         mask32 = ~0u >> (32 - format->bits[c]);
 
-        if (format->type == FORMAT_ARGBF16)
-            v = float_32_to_16(src_component);
-        else if (format->type == FORMAT_ARGBF)
-            v = *(DWORD *)&src_component;
-        else if (format->type == FORMAT_ARGB_SNORM)
+        switch (dst_ctype)
+        {
+        case CTYPE_FLOAT:
+            if (format->bits[c] == 16)
+                v = float_32_to_16(src_component);
+            else
+                v = *(DWORD *)&src_component;
+            break;
+
+        case CTYPE_LUMA:
+        case CTYPE_UNORM:
+        {
+            float val = src_component;
+
+            if (src_range == RANGE_SNORM)
+                val = (val + 1.0f) / 2.0f;
+
+            v = d3dx_clamp(val, 0.0f, 1.0f) * ((1u << format->bits[c]) - 1) + 0.5f;
+            break;
+        }
+
+        case CTYPE_SNORM:
         {
             const uint32_t max_value = (1u << (format->bits[c] - 1)) - 1;
             float val = src_component;
 
-            if (src->range == RANGE_UNORM)
+            if (src_range == RANGE_UNORM)
                 val = (val * 2.0f) - 1.0f;
 
             v = d3dx_clamp(val, -1.0f, 1.0f) * max_value + 0.5f;
+            break;
         }
-        else
-        {
-            float val = src_component;
 
-            if (src->range == RANGE_SNORM)
-                val = (val + 1.0f) / 2.0f;
+        /* We shouldn't be trying to output to CTYPE_INDEX. */
+        case CTYPE_INDEX:
+            assert(0);
+            break;
 
-            v = d3dx_clamp(val, 0.0f, 1.0f) * ((1u << format->bits[c]) - 1) + 0.5f;
+        default:
+            v = 0;
+            break;
         }
 
         for (i = format->shift[c] / 8 * 8; i < format->shift[c] + format->bits[c]; i += 8)
diff --git a/dlls/d3dx9_36/texture.c b/dlls/d3dx9_36/texture.c
index 73d52f16a42..fda6d44fe5a 100644
--- a/dlls/d3dx9_36/texture.c
+++ b/dlls/d3dx9_36/texture.c
@@ -1321,7 +1321,7 @@ HRESULT WINAPI D3DXFillTexture(struct IDirect3DTexture9 *texture, LPD3DXFILL2D f
 
                 function(&value, &coord, &size, funcdata);
 
-                set_d3dx_color(&color, (const struct vec4 *)&value, RANGE_FULL);
+                set_d3dx_color(&color, (const struct vec4 *)&value, RANGE_FULL, RANGE_FULL);
                 format_from_d3dx_color(format, &color, dst);
             }
         }
@@ -1714,7 +1714,7 @@ HRESULT WINAPI D3DXFillCubeTexture(struct IDirect3DCubeTexture9 *texture, LPD3DX
 
                     function(&value, &coord, &size, funcdata);
 
-                    set_d3dx_color(&color, (const struct vec4 *)&value, RANGE_FULL);
+                    set_d3dx_color(&color, (const struct vec4 *)&value, RANGE_FULL, RANGE_FULL);
                     format_from_d3dx_color(format, &color, dst);
                 }
             }
@@ -1783,7 +1783,7 @@ HRESULT WINAPI D3DXFillVolumeTexture(struct IDirect3DVolumeTexture9 *texture, LP
 
                     function(&value, &coord, &size, funcdata);
 
-                    set_d3dx_color(&color, (const struct vec4 *)&value, RANGE_FULL);
+                    set_d3dx_color(&color, (const struct vec4 *)&value, RANGE_FULL, RANGE_FULL);
                     format_from_d3dx_color(format, &color, dst);
                 }
             }
diff --git a/dlls/d3dx9_36/util.c b/dlls/d3dx9_36/util.c
index a73467f5e68..a9235b9d613 100644
--- a/dlls/d3dx9_36/util.c
+++ b/dlls/d3dx9_36/util.c
@@ -54,44 +54,44 @@ static void index_to_rgba(const struct vec4 *index, struct vec4 *rgba, const PAL
  */
 static const struct pixel_format_desc formats[] =
 {
-    /* format              bpc               shifts             bpp blocks   type            from_rgba     to_rgba */
-    {D3DFMT_R8G8B8,        { 0,  8,  8,  8}, { 0, 16,  8,  0},  3, 1, 1,  3, FORMAT_ARGB,    NULL,         NULL      },
-    {D3DFMT_A8R8G8B8,      { 8,  8,  8,  8}, {24, 16,  8,  0},  4, 1, 1,  4, FORMAT_ARGB,    NULL,         NULL      },
-    {D3DFMT_X8R8G8B8,      { 0,  8,  8,  8}, { 0, 16,  8,  0},  4, 1, 1,  4, FORMAT_ARGB,    NULL,         NULL      },
-    {D3DFMT_A8B8G8R8,      { 8,  8,  8,  8}, {24,  0,  8, 16},  4, 1, 1,  4, FORMAT_ARGB,    NULL,         NULL      },
-    {D3DFMT_X8B8G8R8,      { 0,  8,  8,  8}, { 0,  0,  8, 16},  4, 1, 1,  4, FORMAT_ARGB,    NULL,         NULL      },
-    {D3DFMT_R5G6B5,        { 0,  5,  6,  5}, { 0, 11,  5,  0},  2, 1, 1,  2, FORMAT_ARGB,    NULL,         NULL      },
-    {D3DFMT_X1R5G5B5,      { 0,  5,  5,  5}, { 0, 10,  5,  0},  2, 1, 1,  2, FORMAT_ARGB,    NULL,         NULL      },
-    {D3DFMT_A1R5G5B5,      { 1,  5,  5,  5}, {15, 10,  5,  0},  2, 1, 1,  2, FORMAT_ARGB,    NULL,         NULL      },
-    {D3DFMT_R3G3B2,        { 0,  3,  3,  2}, { 0,  5,  2,  0},  1, 1, 1,  1, FORMAT_ARGB,    NULL,         NULL      },
-    {D3DFMT_A8R3G3B2,      { 8,  3,  3,  2}, { 8,  5,  2,  0},  2, 1, 1,  2, FORMAT_ARGB,    NULL,         NULL      },
-    {D3DFMT_A4R4G4B4,      { 4,  4,  4,  4}, {12,  8,  4,  0},  2, 1, 1,  2, FORMAT_ARGB,    NULL,         NULL      },
-    {D3DFMT_X4R4G4B4,      { 0,  4,  4,  4}, { 0,  8,  4,  0},  2, 1, 1,  2, FORMAT_ARGB,    NULL,         NULL      },
-    {D3DFMT_A2R10G10B10,   { 2, 10, 10, 10}, {30, 20, 10,  0},  4, 1, 1,  4, FORMAT_ARGB,    NULL,         NULL      },
-    {D3DFMT_A2B10G10R10,   { 2, 10, 10, 10}, {30,  0, 10, 20},  4, 1, 1,  4, FORMAT_ARGB,    NULL,         NULL      },
-    {D3DFMT_A16B16G16R16,  {16, 16, 16, 16}, {48,  0, 16, 32},  8, 1, 1,  8, FORMAT_ARGB,    NULL,         NULL      },
-    {D3DFMT_G16R16,        { 0, 16, 16,  0}, { 0,  0, 16,  0},  4, 1, 1,  4, FORMAT_ARGB,    NULL,         NULL      },
-    {D3DFMT_A8,            { 8,  0,  0,  0}, { 0,  0,  0,  0},  1, 1, 1,  1, FORMAT_ARGB,    NULL,         NULL      },
-    {D3DFMT_A8L8,          { 8,  8,  0,  0}, { 8,  0,  0,  0},  2, 1, 1,  2, FORMAT_ARGB,    la_from_rgba, la_to_rgba},
-    {D3DFMT_A4L4,          { 4,  4,  0,  0}, { 4,  0,  0,  0},  1, 1, 1,  1, FORMAT_ARGB,    la_from_rgba, la_to_rgba},
-    {D3DFMT_L8,            { 0,  8,  0,  0}, { 0,  0,  0,  0},  1, 1, 1,  1, FORMAT_ARGB,    la_from_rgba, la_to_rgba},
-    {D3DFMT_L16,           { 0, 16,  0,  0}, { 0,  0,  0,  0},  2, 1, 1,  2, FORMAT_ARGB,    la_from_rgba, la_to_rgba},
-    {D3DFMT_DXT1,          { 0,  0,  0,  0}, { 0,  0,  0,  0},  1, 4, 4,  8, FORMAT_DXT,     NULL,         NULL      },
-    {D3DFMT_DXT2,          { 0,  0,  0,  0}, { 0,  0,  0,  0},  1, 4, 4, 16, FORMAT_DXT,     NULL,         NULL      },
-    {D3DFMT_DXT3,          { 0,  0,  0,  0}, { 0,  0,  0,  0},  1, 4, 4, 16, FORMAT_DXT,     NULL,         NULL      },
-    {D3DFMT_DXT4,          { 0,  0,  0,  0}, { 0,  0,  0,  0},  1, 4, 4, 16, FORMAT_DXT,     NULL,         NULL      },
-    {D3DFMT_DXT5,          { 0,  0,  0,  0}, { 0,  0,  0,  0},  1, 4, 4, 16, FORMAT_DXT,     NULL,         NULL      },
-    {D3DFMT_R16F,          { 0, 16,  0,  0}, { 0,  0,  0,  0},  2, 1, 1,  2, FORMAT_ARGBF16, NULL,         NULL      },
-    {D3DFMT_G16R16F,       { 0, 16, 16,  0}, { 0,  0, 16,  0},  4, 1, 1,  4, FORMAT_ARGBF16, NULL,         NULL      },
-    {D3DFMT_A16B16G16R16F, {16, 16, 16, 16}, {48,  0, 16, 32},  8, 1, 1,  8, FORMAT_ARGBF16, NULL,         NULL      },
-    {D3DFMT_R32F,          { 0, 32,  0,  0}, { 0,  0,  0,  0},  4, 1, 1,  4, FORMAT_ARGBF,   NULL,         NULL      },
-    {D3DFMT_G32R32F,       { 0, 32, 32,  0}, { 0,  0, 32,  0},  8, 1, 1,  8, FORMAT_ARGBF,   NULL,         NULL      },
-    {D3DFMT_A32B32G32R32F, {32, 32, 32, 32}, {96,  0, 32, 64}, 16, 1, 1, 16, FORMAT_ARGBF,   NULL,         NULL      },
-    {D3DFMT_P8,            { 8,  8,  8,  8}, { 0,  0,  0,  0},  1, 1, 1,  1, FORMAT_INDEX,   NULL,         index_to_rgba},
-    {D3DFMT_Q8W8V8U8,      { 8,  8,  8,  8}, {24,  0,  8, 16},  4, 1, 1,  4, FORMAT_ARGB_SNORM,  NULL,     NULL      },
-    {D3DFMT_V8U8,          { 0,  8,  8,  0}, { 0,  0,  8,  0},  2, 1, 1,  2, FORMAT_ARGB_SNORM,  NULL,     NULL      },
+    /* format              bpc               shifts             bpp blocks   alpha type   rgb type     flags          from_rgba     to_rgba */
+    {D3DFMT_R8G8B8,        { 0,  8,  8,  8}, { 0, 16,  8,  0},  3, 1, 1,  3, CTYPE_EMPTY, CTYPE_UNORM, 0,             NULL,         NULL         },
+    {D3DFMT_A8R8G8B8,      { 8,  8,  8,  8}, {24, 16,  8,  0},  4, 1, 1,  4, CTYPE_UNORM, CTYPE_UNORM, 0,             NULL,         NULL         },
+    {D3DFMT_X8R8G8B8,      { 0,  8,  8,  8}, { 0, 16,  8,  0},  4, 1, 1,  4, CTYPE_EMPTY, CTYPE_UNORM, 0,             NULL,         NULL         },
+    {D3DFMT_A8B8G8R8,      { 8,  8,  8,  8}, {24,  0,  8, 16},  4, 1, 1,  4, CTYPE_UNORM, CTYPE_UNORM, 0,             NULL,         NULL         },
+    {D3DFMT_X8B8G8R8,      { 0,  8,  8,  8}, { 0,  0,  8, 16},  4, 1, 1,  4, CTYPE_EMPTY, CTYPE_UNORM, 0,             NULL,         NULL         },
+    {D3DFMT_R5G6B5,        { 0,  5,  6,  5}, { 0, 11,  5,  0},  2, 1, 1,  2, CTYPE_EMPTY, CTYPE_UNORM, 0,             NULL,         NULL         },
+    {D3DFMT_X1R5G5B5,      { 0,  5,  5,  5}, { 0, 10,  5,  0},  2, 1, 1,  2, CTYPE_EMPTY, CTYPE_UNORM, 0,             NULL,         NULL         },
+    {D3DFMT_A1R5G5B5,      { 1,  5,  5,  5}, {15, 10,  5,  0},  2, 1, 1,  2, CTYPE_UNORM, CTYPE_UNORM, 0,             NULL,         NULL         },
+    {D3DFMT_R3G3B2,        { 0,  3,  3,  2}, { 0,  5,  2,  0},  1, 1, 1,  1, CTYPE_EMPTY, CTYPE_UNORM, 0,             NULL,         NULL         },
+    {D3DFMT_A8R3G3B2,      { 8,  3,  3,  2}, { 8,  5,  2,  0},  2, 1, 1,  2, CTYPE_UNORM, CTYPE_UNORM, 0,             NULL,         NULL         },
+    {D3DFMT_A4R4G4B4,      { 4,  4,  4,  4}, {12,  8,  4,  0},  2, 1, 1,  2, CTYPE_UNORM, CTYPE_UNORM, 0,             NULL,         NULL         },
+    {D3DFMT_X4R4G4B4,      { 0,  4,  4,  4}, { 0,  8,  4,  0},  2, 1, 1,  2, CTYPE_EMPTY, CTYPE_UNORM, 0,             NULL,         NULL         },
+    {D3DFMT_A2R10G10B10,   { 2, 10, 10, 10}, {30, 20, 10,  0},  4, 1, 1,  4, CTYPE_UNORM, CTYPE_UNORM, 0,             NULL,         NULL         },
+    {D3DFMT_A2B10G10R10,   { 2, 10, 10, 10}, {30,  0, 10, 20},  4, 1, 1,  4, CTYPE_UNORM, CTYPE_UNORM, 0,             NULL,         NULL         },
+    {D3DFMT_A16B16G16R16,  {16, 16, 16, 16}, {48,  0, 16, 32},  8, 1, 1,  8, CTYPE_UNORM, CTYPE_UNORM, 0,             NULL,         NULL         },
+    {D3DFMT_G16R16,        { 0, 16, 16,  0}, { 0,  0, 16,  0},  4, 1, 1,  4, CTYPE_EMPTY, CTYPE_UNORM, 0,             NULL,         NULL         },
+    {D3DFMT_A8,            { 8,  0,  0,  0}, { 0,  0,  0,  0},  1, 1, 1,  1, CTYPE_UNORM, CTYPE_EMPTY, 0,             NULL,         NULL         },
+    {D3DFMT_A8L8,          { 8,  8,  0,  0}, { 8,  0,  0,  0},  2, 1, 1,  2, CTYPE_UNORM, CTYPE_LUMA,  0,             la_from_rgba, la_to_rgba   },
+    {D3DFMT_A4L4,          { 4,  4,  0,  0}, { 4,  0,  0,  0},  1, 1, 1,  1, CTYPE_UNORM, CTYPE_LUMA,  0,             la_from_rgba, la_to_rgba   },
+    {D3DFMT_L8,            { 0,  8,  0,  0}, { 0,  0,  0,  0},  1, 1, 1,  1, CTYPE_EMPTY, CTYPE_LUMA,  0,             la_from_rgba, la_to_rgba   },
+    {D3DFMT_L16,           { 0, 16,  0,  0}, { 0,  0,  0,  0},  2, 1, 1,  2, CTYPE_EMPTY, CTYPE_LUMA,  0,             la_from_rgba, la_to_rgba   },
+    {D3DFMT_DXT1,          { 0,  0,  0,  0}, { 0,  0,  0,  0},  1, 4, 4,  8, CTYPE_UNORM, CTYPE_UNORM, FMT_FLAG_DXT,  NULL,         NULL         },
+    {D3DFMT_DXT2,          { 0,  0,  0,  0}, { 0,  0,  0,  0},  1, 4, 4, 16, CTYPE_UNORM, CTYPE_UNORM, FMT_FLAG_DXT,  NULL,         NULL         },
+    {D3DFMT_DXT3,          { 0,  0,  0,  0}, { 0,  0,  0,  0},  1, 4, 4, 16, CTYPE_UNORM, CTYPE_UNORM, FMT_FLAG_DXT,  NULL,         NULL         },
+    {D3DFMT_DXT4,          { 0,  0,  0,  0}, { 0,  0,  0,  0},  1, 4, 4, 16, CTYPE_UNORM, CTYPE_UNORM, FMT_FLAG_DXT,  NULL,         NULL         },
+    {D3DFMT_DXT5,          { 0,  0,  0,  0}, { 0,  0,  0,  0},  1, 4, 4, 16, CTYPE_UNORM, CTYPE_UNORM, FMT_FLAG_DXT,  NULL,         NULL         },
+    {D3DFMT_R16F,          { 0, 16,  0,  0}, { 0,  0,  0,  0},  2, 1, 1,  2, CTYPE_EMPTY, CTYPE_FLOAT, 0,             NULL,         NULL         },
+    {D3DFMT_G16R16F,       { 0, 16, 16,  0}, { 0,  0, 16,  0},  4, 1, 1,  4, CTYPE_EMPTY, CTYPE_FLOAT, 0,             NULL,         NULL         },
+    {D3DFMT_A16B16G16R16F, {16, 16, 16, 16}, {48,  0, 16, 32},  8, 1, 1,  8, CTYPE_FLOAT, CTYPE_FLOAT, 0,             NULL,         NULL         },
+    {D3DFMT_R32F,          { 0, 32,  0,  0}, { 0,  0,  0,  0},  4, 1, 1,  4, CTYPE_EMPTY, CTYPE_FLOAT, 0,             NULL,         NULL         },
+    {D3DFMT_G32R32F,       { 0, 32, 32,  0}, { 0,  0, 32,  0},  8, 1, 1,  8, CTYPE_EMPTY, CTYPE_FLOAT, 0,             NULL,         NULL         },
+    {D3DFMT_A32B32G32R32F, {32, 32, 32, 32}, {96,  0, 32, 64}, 16, 1, 1, 16, CTYPE_FLOAT, CTYPE_FLOAT, 0,             NULL,         NULL         },
+    {D3DFMT_P8,            { 8,  8,  8,  8}, { 0,  0,  0,  0},  1, 1, 1,  1, CTYPE_INDEX, CTYPE_INDEX, 0,             NULL,         index_to_rgba},
+    {D3DFMT_Q8W8V8U8,      { 8,  8,  8,  8}, {24,  0,  8, 16},  4, 1, 1,  4, CTYPE_SNORM, CTYPE_SNORM, 0,             NULL,         NULL         },
+    {D3DFMT_V8U8,          { 0,  8,  8,  0}, { 0,  0,  8,  0},  2, 1, 1,  2, CTYPE_EMPTY, CTYPE_SNORM, 0,             NULL,         NULL         },
     /* marks last element */
-    {D3DFMT_UNKNOWN,       { 0,  0,  0,  0}, { 0,  0,  0,  0},  0, 1, 1,  0, FORMAT_UNKNOWN, NULL,         NULL      },
+    {D3DFMT_UNKNOWN,       { 0,  0,  0,  0}, { 0,  0,  0,  0},  0, 1, 1,  0, CTYPE_EMPTY, CTYPE_EMPTY, 0,             NULL,         NULL         },
 };
 
 
-- 
GitLab

