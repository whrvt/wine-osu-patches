From 421a3ca62375fec19f643b7f2e53eb78a9a2afe4 Mon Sep 17 00:00:00 2001
From: Vibhav Pant <vibhavp@gmail.com>
Date: Fri, 22 Nov 2024 22:33:37 +0530
Subject: [PATCH] cryptowinrt: Rewrite IAsyncOperation using
 Windows.System.Threading.

---
 dlls/cryptowinrt/Makefile.in  |   1 -
 dlls/cryptowinrt/async.c      | 479 +++++++++++++++-------------------
 dlls/cryptowinrt/private.h    |   3 +-
 dlls/cryptowinrt/provider.idl |  47 ----
 4 files changed, 216 insertions(+), 314 deletions(-)
 delete mode 100644 dlls/cryptowinrt/provider.idl

diff --git a/dlls/cryptowinrt/Makefile.in b/dlls/cryptowinrt/Makefile.in
index 8d9d23a6cc2..9517170b1d3 100644
--- a/dlls/cryptowinrt/Makefile.in
+++ b/dlls/cryptowinrt/Makefile.in
@@ -6,4 +6,3 @@ SOURCES = \
 	classes.idl \
 	credentials.c \
 	main.c \
-	provider.idl
diff --git a/dlls/cryptowinrt/async.c b/dlls/cryptowinrt/async.c
index 5c3d718ae2d..bb6c76fec5e 100644
--- a/dlls/cryptowinrt/async.c
+++ b/dlls/cryptowinrt/async.c
@@ -2,6 +2,7 @@
  *
  * Copyright 2022 Bernhard Kölbl for CodeWeavers
  * Copyright 2022 Rémi Bernon for CodeWeavers
+ * Copyright 2024 Vibhav Pant
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -20,353 +21,268 @@
 
 #include "private.h"
 
+#include "roapi.h"
 #include "wine/debug.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(crypto);
 
-#define Closed 4
-#define HANDLER_NOT_SET ((void *)~(ULONG_PTR)0)
+typedef HRESULT (WINAPI *async_completed_invoke_callback)(IInspectable *handler, IInspectable *info, AsyncStatus status);
 
-struct async_info
+struct async_completed
 {
-    IWineAsyncInfoImpl IWineAsyncInfoImpl_iface;
-    IAsyncInfo IAsyncInfo_iface;
-    IInspectable *IInspectable_outer;
+    IAsyncActionCompletedHandler IAsyncActionCompletedHandler_iface;
+    IInspectable *outer_handler;
+    IInspectable *outer_operation;
+    async_completed_invoke_callback cb;
     LONG ref;
-
-    async_operation_callback callback;
-    TP_WORK *async_run_work;
-    IUnknown *invoker;
-    IUnknown *param;
-
-    CRITICAL_SECTION cs;
-    IWineAsyncOperationCompletedHandler *handler;
-    PROPVARIANT result;
-    AsyncStatus status;
-    HRESULT hr;
 };
 
-static inline struct async_info *impl_from_IWineAsyncInfoImpl( IWineAsyncInfoImpl *iface )
+#define DEFINE_ASYNC_COMPLETED_HANDLER_CALLBACK( type )                                                                \
+    static HRESULT WINAPI async_completed_handler_cb_##type( IInspectable *handler, IInspectable *operation,           \
+                                                             AsyncStatus status )                                      \
+    {                                                                                                                  \
+        return IAsyncOperationCompletedHandler_##type##_Invoke(                                                        \
+            (IAsyncOperationCompletedHandler_##type *)handler, (IAsyncOperation_##type *)operation, status );          \
+    }
+
+static inline struct async_completed *impl_from_IAsyncActionCompletedHandler( IAsyncActionCompletedHandler *iface )
 {
-    return CONTAINING_RECORD( iface, struct async_info, IWineAsyncInfoImpl_iface );
+    return CONTAINING_RECORD( iface, struct async_completed, IAsyncActionCompletedHandler_iface );
 }
 
-static HRESULT WINAPI async_impl_QueryInterface( IWineAsyncInfoImpl *iface, REFIID iid, void **out )
+static HRESULT WINAPI async_completed_QueryInterface( IAsyncActionCompletedHandler *iface, REFIID iid, void **out )
 {
-    struct async_info *impl = impl_from_IWineAsyncInfoImpl( iface );
+    struct async_completed *impl = impl_from_IAsyncActionCompletedHandler( iface );
 
     TRACE( "iface %p, iid %s, out %p.\n", iface, debugstr_guid( iid ), out );
 
     if (IsEqualGUID( iid, &IID_IUnknown ) ||
         IsEqualGUID( iid, &IID_IInspectable ) ||
-        IsEqualGUID( iid, &IID_IAgileObject ) ||
-        IsEqualGUID( iid, &IID_IWineAsyncInfoImpl ))
-    {
-        IInspectable_AddRef( (*out = &impl->IWineAsyncInfoImpl_iface) );
-        return S_OK;
-    }
-
-    if (IsEqualGUID( iid, &IID_IAsyncInfo ))
+        IsEqualGUID( iid, &IID_IAsyncActionCompletedHandler ))
     {
-        IInspectable_AddRef( (*out = &impl->IAsyncInfo_iface) );
+        *out = iface;
+        IUnknown_AddRef((IUnknown *)*out);
         return S_OK;
     }
 
-    FIXME( "%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid( iid ) );
-    *out = NULL;
-    return E_NOINTERFACE;
+    return IInspectable_QueryInterface( impl->outer_handler, iid, out );
 }
 
-static ULONG WINAPI async_impl_AddRef( IWineAsyncInfoImpl *iface )
+static ULONG WINAPI async_completed_AddRef( IAsyncActionCompletedHandler *iface )
 {
-    struct async_info *impl = impl_from_IWineAsyncInfoImpl( iface );
+    struct async_completed *impl = impl_from_IAsyncActionCompletedHandler( iface );
     ULONG ref = InterlockedIncrement( &impl->ref );
     TRACE( "iface %p, ref %lu.\n", iface, ref );
     return ref;
 }
 
-static ULONG WINAPI async_impl_Release( IWineAsyncInfoImpl *iface )
+static ULONG WINAPI async_completed_Release( IAsyncActionCompletedHandler *iface )
 {
-    struct async_info *impl = impl_from_IWineAsyncInfoImpl( iface );
+    struct async_completed *impl = impl_from_IAsyncActionCompletedHandler( iface );
     ULONG ref = InterlockedDecrement( &impl->ref );
     TRACE( "iface %p, ref %lu.\n", iface, ref );
 
     if (!ref)
     {
-        if (impl->handler && impl->handler != HANDLER_NOT_SET) IWineAsyncOperationCompletedHandler_Release( impl->handler );
-        IAsyncInfo_Close( &impl->IAsyncInfo_iface );
-        if (impl->param) IUnknown_Release( impl->param );
-        if (impl->invoker) IUnknown_Release( impl->invoker );
-        impl->cs.DebugInfo->Spare[0] = 0;
-        DeleteCriticalSection( &impl->cs );
+        IInspectable_Release( impl->outer_handler );
+        IInspectable_Release( impl->outer_operation );
         free( impl );
     }
 
     return ref;
 }
 
-static HRESULT WINAPI async_impl_put_Completed( IWineAsyncInfoImpl *iface, IWineAsyncOperationCompletedHandler *handler )
+static HRESULT WINAPI async_completed_Invoke( IAsyncActionCompletedHandler *iface, IAsyncAction *info,
+                                              AsyncStatus status )
 {
-    struct async_info *impl = impl_from_IWineAsyncInfoImpl( iface );
-    HRESULT hr = S_OK;
-
-    TRACE( "iface %p, handler %p.\n", iface, handler );
-
-    EnterCriticalSection( &impl->cs );
-    if (impl->status == Closed) hr = E_ILLEGAL_METHOD_CALL;
-    else if (impl->handler != HANDLER_NOT_SET) hr = E_ILLEGAL_DELEGATE_ASSIGNMENT;
-    else if ((impl->handler = handler))
-    {
-        IWineAsyncOperationCompletedHandler_AddRef( impl->handler );
-
-        if (impl->status > Started)
-        {
-            IInspectable *operation = impl->IInspectable_outer;
-            AsyncStatus status = impl->status;
-            impl->handler = NULL; /* Prevent concurrent invoke. */
-            LeaveCriticalSection( &impl->cs );
-
-            IWineAsyncOperationCompletedHandler_Invoke( handler, operation, status );
-            IWineAsyncOperationCompletedHandler_Release( handler );
-
-            return S_OK;
-        }
-    }
-    LeaveCriticalSection( &impl->cs );
-
-    return hr;
-}
-
-static HRESULT WINAPI async_impl_get_Completed( IWineAsyncInfoImpl *iface, IWineAsyncOperationCompletedHandler **handler )
-{
-    struct async_info *impl = impl_from_IWineAsyncInfoImpl( iface );
-    HRESULT hr = S_OK;
-
-    TRACE( "iface %p, handler %p.\n", iface, handler );
-
-    EnterCriticalSection( &impl->cs );
-    if (impl->status == Closed) hr = E_ILLEGAL_METHOD_CALL;
-    if (impl->handler == NULL || impl->handler == HANDLER_NOT_SET) *handler = NULL;
-    else IWineAsyncOperationCompletedHandler_AddRef( (*handler = impl->handler) );
-    LeaveCriticalSection( &impl->cs );
-
-    return hr;
+    struct async_completed *impl = impl_from_IAsyncActionCompletedHandler( iface );
+    return impl->cb( (IInspectable *)impl->outer_handler, (IInspectable *)impl->outer_operation, status);
 }
 
-static HRESULT WINAPI async_impl_get_Result( IWineAsyncInfoImpl *iface, PROPVARIANT *result )
+static const IAsyncActionCompletedHandlerVtbl async_completed_vtbl =
 {
-    struct async_info *impl = impl_from_IWineAsyncInfoImpl( iface );
-    HRESULT hr = E_ILLEGAL_METHOD_CALL;
-
-    TRACE( "iface %p, result %p.\n", iface, result );
-
-    EnterCriticalSection( &impl->cs );
-    if (impl->status == Completed || impl->status == Error)
-    {
-        PropVariantCopy( result, &impl->result );
-        hr = impl->hr;
-    }
-    LeaveCriticalSection( &impl->cs );
-
-    return hr;
-}
+    async_completed_QueryInterface,
+    async_completed_AddRef,
+    async_completed_Release,
+    async_completed_Invoke,
+};
 
-static HRESULT WINAPI async_impl_Start( IWineAsyncInfoImpl *iface )
+static HRESULT async_completed_create( IInspectable *outer_operation, IInspectable *outer_handler,
+                                       async_completed_invoke_callback cb, IAsyncActionCompletedHandler **handler )
 {
-    struct async_info *impl = impl_from_IWineAsyncInfoImpl( iface );
-
-    TRACE( "iface %p.\n", iface );
-
-    /* keep the async alive in the callback */
-    IInspectable_AddRef( impl->IInspectable_outer );
-    SubmitThreadpoolWork( impl->async_run_work );
+    struct async_completed *impl;
+
+    impl = calloc( 1, sizeof( *impl ) );
+    if (!impl)
+        return E_NOINTERFACE;
+
+    impl->IAsyncActionCompletedHandler_iface.lpVtbl = &async_completed_vtbl;
+    impl->outer_operation = outer_operation;
+    impl->outer_handler = outer_handler;
+    IInspectable_AddRef( impl->outer_operation );
+    IInspectable_AddRef( impl->outer_handler );
+    impl->cb = cb;
+    impl->ref = 1;
 
+    *handler = &impl->IAsyncActionCompletedHandler_iface;
     return S_OK;
 }
 
-static const struct IWineAsyncInfoImplVtbl async_impl_vtbl =
+struct async_operation_base
 {
-    /* IUnknown methods */
-    async_impl_QueryInterface,
-    async_impl_AddRef,
-    async_impl_Release,
-    /* IWineAsyncInfoImpl */
-    async_impl_put_Completed,
-    async_impl_get_Completed,
-    async_impl_get_Result,
-    async_impl_Start,
+    IWorkItemHandler *work_item;
+    IAsyncAction *inner_action;
+    PROPVARIANT *result;
+    LONG ref;
 };
 
-DEFINE_IINSPECTABLE_OUTER( async_info, IAsyncInfo, struct async_info, IInspectable_outer )
-
-static HRESULT WINAPI async_info_get_Id( IAsyncInfo *iface, UINT32 *id )
+/* operation should be an IAsyncOperation<T>, while handler should be an IAsyncOperationCompletedHandler<T>. */
+static HRESULT async_operation_put_Completed( struct async_operation_base *base, IInspectable *operation,
+                                              IInspectable *handler, async_completed_invoke_callback cb )
 {
-    struct async_info *impl = impl_from_IAsyncInfo( iface );
-    HRESULT hr = S_OK;
-
-    TRACE( "iface %p, id %p.\n", iface, id );
-
-    EnterCriticalSection( &impl->cs );
-    if (impl->status == Closed) hr = E_ILLEGAL_METHOD_CALL;
-    *id = 1;
-    LeaveCriticalSection( &impl->cs );
+    IAsyncActionCompletedHandler *wrapper;
+    HRESULT hr;
 
+    hr = async_completed_create( (IInspectable *)operation, (IInspectable *)handler, cb, &wrapper );
+    if (FAILED( hr ))
+        return hr;
+    hr = IAsyncAction_put_Completed( base->inner_action, wrapper );
+    IAsyncActionCompletedHandler_Release( wrapper );
     return hr;
 }
 
-static HRESULT WINAPI async_info_get_Status( IAsyncInfo *iface, AsyncStatus *status )
+static HRESULT async_operation_get_Completed( struct async_operation_base *base, REFIID iid, void **handler )
 {
-    struct async_info *impl = impl_from_IAsyncInfo( iface );
-    HRESULT hr = S_OK;
-
-    TRACE( "iface %p, status %p.\n", iface, status );
+    IAsyncActionCompletedHandler *wrapper;
+    HRESULT hr;
 
-    EnterCriticalSection( &impl->cs );
-    if (impl->status == Closed) hr = E_ILLEGAL_METHOD_CALL;
-    *status = impl->status;
-    LeaveCriticalSection( &impl->cs );
+    *handler = NULL;
+    hr = IAsyncAction_get_Completed( base->inner_action, &wrapper );
+    if (FAILED( hr ) || !wrapper)
+        return hr;
 
+    hr = IAsyncActionCompletedHandler_QueryInterface( wrapper, iid, (void **)handler );
+    IAsyncActionCompletedHandler_Release( wrapper );
     return hr;
 }
 
-static HRESULT WINAPI async_info_get_ErrorCode( IAsyncInfo *iface, HRESULT *error_code )
+struct work_item
 {
-    struct async_info *impl = impl_from_IAsyncInfo( iface );
-    HRESULT hr = S_OK;
-
-    TRACE( "iface %p, error_code %p.\n", iface, error_code );
+    IWorkItemHandler IWorkItemHandler_iface;
+    async_operation_callback callback;
+    PROPVARIANT result;
 
-    EnterCriticalSection( &impl->cs );
-    if (impl->status == Closed) *error_code = hr = E_ILLEGAL_METHOD_CALL;
-    else *error_code = impl->hr;
-    LeaveCriticalSection( &impl->cs );
+    IUnknown *invoker;
+    IUnknown *param;
+    LONG ref;
+};
 
-    return hr;
+static inline struct work_item *impl_from_IWorkItemHandler( IWorkItemHandler *iface )
+{
+    return CONTAINING_RECORD( iface, struct work_item, IWorkItemHandler_iface );
 }
 
-static HRESULT WINAPI async_info_Cancel( IAsyncInfo *iface )
+static HRESULT WINAPI work_item_QueryInterface( IWorkItemHandler *iface, REFIID iid, void **out )
 {
-    struct async_info *impl = impl_from_IAsyncInfo( iface );
-    HRESULT hr = S_OK;
-
-    TRACE( "iface %p.\n", iface );
+    TRACE( "iface %p, iid %s, out %p.\n", iface, debugstr_guid( iid ), out );
 
-    EnterCriticalSection( &impl->cs );
-    if (impl->status == Closed) hr = E_ILLEGAL_METHOD_CALL;
-    else if (impl->status == Started) impl->status = Canceled;
-    LeaveCriticalSection( &impl->cs );
+    if (IsEqualGUID( iid, &IID_IUnknown ) ||
+        IsEqualGUID( iid, &IID_IInspectable ) ||
+        IsEqualGUID( iid, &IID_IWorkItemHandler ))
+    {
+        *out = iface;
+        IUnknown_AddRef( (IUnknown *)*out );
+        return S_OK;
+    }
 
-    return hr;
+    *out = NULL;
+    FIXME( "%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid( iid ) );
+    return E_NOINTERFACE;
 }
 
-static HRESULT WINAPI async_info_Close( IAsyncInfo *iface )
+static ULONG WINAPI work_item_AddRef( IWorkItemHandler *iface )
 {
-    struct async_info *impl = impl_from_IAsyncInfo( iface );
-    HRESULT hr = S_OK;
+    struct work_item *impl = impl_from_IWorkItemHandler( iface );
+    ULONG ref = InterlockedIncrement( &impl->ref );
+    TRACE( "iface %p, ref %lu.\n", iface, ref );
+    return ref;
+}
 
-    TRACE( "iface %p.\n", iface );
+static ULONG WINAPI work_item_Release( IWorkItemHandler *iface )
+{
+    struct work_item *impl = impl_from_IWorkItemHandler( iface );
+    ULONG ref = InterlockedDecrement( &impl->ref );
+    TRACE( "iface %p, ref %lu.\n", iface, ref );
 
-    EnterCriticalSection( &impl->cs );
-    if (impl->status == Started)
-        hr = E_ILLEGAL_STATE_CHANGE;
-    else if (impl->status != Closed)
+    if (!ref)
     {
-        CloseThreadpoolWork( impl->async_run_work );
-        impl->async_run_work = NULL;
-        impl->status = Closed;
+        if (impl->invoker)
+            IUnknown_Release( impl->invoker );
+        if (impl->param)
+            IUnknown_Release( impl->param );
+        free( impl );
     }
-    LeaveCriticalSection( &impl->cs );
-
-    return hr;
+    return ref;
 }
 
-static const struct IAsyncInfoVtbl async_info_vtbl =
+static HRESULT WINAPI work_item_Invoke( IWorkItemHandler *iface, IAsyncAction *action )
 {
-    /* IUnknown methods */
-    async_info_QueryInterface,
-    async_info_AddRef,
-    async_info_Release,
-    /* IInspectable methods */
-    async_info_GetIids,
-    async_info_GetRuntimeClassName,
-    async_info_GetTrustLevel,
-    /* IAsyncInfo */
-    async_info_get_Id,
-    async_info_get_Status,
-    async_info_get_ErrorCode,
-    async_info_Cancel,
-    async_info_Close,
-};
-
-static void CALLBACK async_info_callback( TP_CALLBACK_INSTANCE *instance, void *iface, TP_WORK *work )
-{
-    struct async_info *impl = impl_from_IWineAsyncInfoImpl( iface );
-    IInspectable *operation = impl->IInspectable_outer;
-    PROPVARIANT result;
+    struct work_item *impl = impl_from_IWorkItemHandler( iface );
+    IAsyncInfo *info;
+    AsyncStatus status;
     HRESULT hr;
 
-    hr = impl->callback( impl->invoker, impl->param, &result );
+    TRACE( "iface %p, action %p.\n", iface, action );
 
-    EnterCriticalSection( &impl->cs );
-    if (impl->status != Closed) impl->status = FAILED(hr) ? Error : Completed;
-    PropVariantCopy( &impl->result, &result );
-    impl->hr = hr;
-
-    if (impl->handler != NULL && impl->handler != HANDLER_NOT_SET)
-    {
-        IWineAsyncOperationCompletedHandler *handler = impl->handler;
-        AsyncStatus status = impl->status;
-        impl->handler = NULL; /* Prevent concurrent invoke. */
-        LeaveCriticalSection( &impl->cs );
-
-        IWineAsyncOperationCompletedHandler_Invoke( handler, operation, status );
-        IWineAsyncOperationCompletedHandler_Release( handler );
-    }
-    else LeaveCriticalSection( &impl->cs );
+    hr = IAsyncAction_QueryInterface( action, &IID_IAsyncInfo, (void **)&info );
+    if (FAILED( hr ))
+        return hr;
 
-    /* release refcount acquired in Start */
-    IInspectable_Release( operation );
+    hr = IAsyncInfo_get_Status( info, &status );
+    IAsyncInfo_Release( info );
+    if (FAILED( hr ))
+        return hr;
 
-    PropVariantClear( &result );
+    return status != Canceled ? impl->callback( impl->invoker, impl->param, &impl->result ) : S_OK;
 }
 
-static HRESULT async_info_create( IUnknown *invoker, IUnknown *param, async_operation_callback callback,
-                                  IInspectable *outer, IWineAsyncInfoImpl **out )
+static const IWorkItemHandlerVtbl work_item_vtbl =
 {
-    struct async_info *impl;
-    HRESULT hr;
-
-    if (!(impl = calloc( 1, sizeof(struct async_info) ))) return E_OUTOFMEMORY;
-    impl->IWineAsyncInfoImpl_iface.lpVtbl = &async_impl_vtbl;
-    impl->IAsyncInfo_iface.lpVtbl = &async_info_vtbl;
-    impl->IInspectable_outer = outer;
-    impl->ref = 1;
+    work_item_QueryInterface,
+    work_item_AddRef,
+    work_item_Release,
+    work_item_Invoke,
+};
 
-    impl->callback = callback;
-    impl->handler = HANDLER_NOT_SET;
-    impl->status = Started;
-    if (!(impl->async_run_work = CreateThreadpoolWork( async_info_callback, &impl->IWineAsyncInfoImpl_iface, NULL )))
-    {
-        hr = HRESULT_FROM_WIN32( GetLastError() );
-        free( impl );
-        return hr;
-    }
+static HRESULT work_item_create( IUnknown *invoker, IUnknown *param, async_operation_callback callback,
+                                 PROPVARIANT **result, IWorkItemHandler **handler )
+{
+    struct work_item *impl;
 
-    if ((impl->invoker = invoker)) IUnknown_AddRef( impl->invoker );
-    if ((impl->param = param)) IUnknown_AddRef( impl->param );
+    impl = calloc( 1, sizeof( *impl ) );
+    if (!impl)
+        return E_OUTOFMEMORY;
 
-    InitializeCriticalSectionEx( &impl->cs, 0, RTL_CRITICAL_SECTION_FLAG_FORCE_DEBUG_INFO );
-    impl->cs.DebugInfo->Spare[0] = (DWORD_PTR)( __FILE__ ": async_info.cs" );
+    impl->IWorkItemHandler_iface.lpVtbl = &work_item_vtbl;
+    impl->callback = callback;
+    impl->invoker = invoker;
+    impl->param = param;
+    if (invoker)
+        IUnknown_AddRef(invoker);
+    if (param)
+        IUnknown_AddRef(param);
+    impl->ref = 1;
 
-    *out = &impl->IWineAsyncInfoImpl_iface;
+    *result = &impl->result;
+    *handler = &impl->IWorkItemHandler_iface;
     return S_OK;
 }
 
 struct async_bool
 {
     IAsyncOperation_boolean IAsyncOperation_boolean_iface;
-    IWineAsyncInfoImpl *IWineAsyncInfoImpl_inner;
-    LONG ref;
+
+    struct async_operation_base base;
 };
 
 static inline struct async_bool *impl_from_IAsyncOperation_boolean( IAsyncOperation_boolean *iface )
@@ -389,13 +305,13 @@ static HRESULT WINAPI async_bool_QueryInterface( IAsyncOperation_boolean *iface,
         return S_OK;
     }
 
-    return IWineAsyncInfoImpl_QueryInterface( impl->IWineAsyncInfoImpl_inner, iid, out );
+    return IAsyncAction_QueryInterface( impl->base.inner_action, iid, out );
 }
 
 static ULONG WINAPI async_bool_AddRef( IAsyncOperation_boolean *iface )
 {
     struct async_bool *impl = impl_from_IAsyncOperation_boolean( iface );
-    ULONG ref = InterlockedIncrement( &impl->ref );
+    ULONG ref = InterlockedIncrement( &impl->base.ref );
     TRACE( "iface %p, ref %lu.\n", iface, ref );
     return ref;
 }
@@ -403,14 +319,13 @@ static ULONG WINAPI async_bool_AddRef( IAsyncOperation_boolean *iface )
 static ULONG WINAPI async_bool_Release( IAsyncOperation_boolean *iface )
 {
     struct async_bool *impl = impl_from_IAsyncOperation_boolean( iface );
-    ULONG ref = InterlockedDecrement( &impl->ref );
+    ULONG ref = InterlockedDecrement( &impl->base.ref );
     TRACE( "iface %p, ref %lu.\n", iface, ref );
 
     if (!ref)
     {
-        /* guard against re-entry if inner releases an outer iface */
-        InterlockedIncrement( &impl->ref );
-        IWineAsyncInfoImpl_Release( impl->IWineAsyncInfoImpl_inner );
+        IWorkItemHandler_Release(impl->base.work_item);
+        IAsyncAction_Release( impl->base.inner_action );
         free( impl );
     }
 
@@ -436,34 +351,41 @@ static HRESULT WINAPI async_bool_GetTrustLevel( IAsyncOperation_boolean *iface,
     return E_NOTIMPL;
 }
 
+DEFINE_ASYNC_COMPLETED_HANDLER_CALLBACK( boolean );
+
 static HRESULT WINAPI async_bool_put_Completed( IAsyncOperation_boolean *iface, IAsyncOperationCompletedHandler_boolean *bool_handler )
 {
-    IWineAsyncOperationCompletedHandler *handler = (IWineAsyncOperationCompletedHandler *)bool_handler;
     struct async_bool *impl = impl_from_IAsyncOperation_boolean( iface );
-    TRACE( "iface %p, handler %p.\n", iface, handler );
-    return IWineAsyncInfoImpl_put_Completed( impl->IWineAsyncInfoImpl_inner, (IWineAsyncOperationCompletedHandler *)handler );
+
+    TRACE( "iface %p, handler %p.\n", iface, bool_handler );
+
+    return async_operation_put_Completed( &impl->base, (IInspectable *)iface, (IInspectable *)bool_handler,
+                                          async_completed_handler_cb_boolean );
 }
 
 static HRESULT WINAPI async_bool_get_Completed( IAsyncOperation_boolean *iface, IAsyncOperationCompletedHandler_boolean **bool_handler )
 {
-    IWineAsyncOperationCompletedHandler **handler = (IWineAsyncOperationCompletedHandler **)bool_handler;
     struct async_bool *impl = impl_from_IAsyncOperation_boolean( iface );
-    TRACE( "iface %p, handler %p.\n", iface, handler );
-    return IWineAsyncInfoImpl_get_Completed( impl->IWineAsyncInfoImpl_inner, (IWineAsyncOperationCompletedHandler **)handler );
+
+    TRACE( "iface %p, handler %p.\n", iface, bool_handler );
+
+    return async_operation_get_Completed( &impl->base, &IID_IAsyncOperationCompletedHandler_boolean, (void **)bool_handler );
 }
 
 static HRESULT WINAPI async_bool_GetResults( IAsyncOperation_boolean *iface, BOOLEAN *results )
 {
     struct async_bool *impl = impl_from_IAsyncOperation_boolean( iface );
-    PROPVARIANT result = {.vt = VT_BOOL};
     HRESULT hr;
 
     TRACE( "iface %p, results %p.\n", iface, results );
 
-    hr = IWineAsyncInfoImpl_get_Result( impl->IWineAsyncInfoImpl_inner, &result );
+    hr = IAsyncAction_GetResults( impl->base.inner_action );
+    if (hr == S_OK)
+    {
+        *results = impl->base.result->boolVal;
+        PropVariantClear( impl->base.result );
+    }
 
-    *results = result.boolVal;
-    PropVariantClear( &result );
     return hr;
 }
 
@@ -483,6 +405,24 @@ static const struct IAsyncOperation_booleanVtbl async_bool_vtbl =
     async_bool_GetResults,
 };
 
+static IThreadPoolStatics *threadpool_statics;
+static INIT_ONCE threadpool_statics_init = INIT_ONCE_STATIC_INIT;
+
+static BOOL CALLBACK init_threadpool_statics( INIT_ONCE *once, void *param, void **ctx )
+{
+    HSTRING str;
+    HRESULT hr;
+
+    hr = WindowsCreateString( RuntimeClass_Windows_System_Threading_ThreadPool,
+                              wcslen( RuntimeClass_Windows_System_Threading_ThreadPool ), &str );
+    if (FAILED( hr ))
+        return FALSE;
+
+    hr = RoGetActivationFactory( str, &IID_IThreadPoolStatics, (void **)&threadpool_statics );
+    WindowsDeleteString( str );
+    return SUCCEEDED( hr );
+}
+
 HRESULT async_operation_boolean_create( IUnknown *invoker, IUnknown *param, async_operation_callback callback,
                                         IAsyncOperation_boolean **out )
 {
@@ -490,18 +430,27 @@ HRESULT async_operation_boolean_create( IUnknown *invoker, IUnknown *param, asyn
     HRESULT hr;
 
     *out = NULL;
+    if (!InitOnceExecuteOnce( &threadpool_statics_init, init_threadpool_statics, NULL, NULL ))
+        return E_FAIL;
+
     if (!(impl = calloc( 1, sizeof(*impl) ))) return E_OUTOFMEMORY;
     impl->IAsyncOperation_boolean_iface.lpVtbl = &async_bool_vtbl;
-    impl->ref = 1;
 
-    if (FAILED(hr = async_info_create( invoker, param, callback, (IInspectable *)&impl->IAsyncOperation_boolean_iface, &impl->IWineAsyncInfoImpl_inner )) ||
-        FAILED(hr = IWineAsyncInfoImpl_Start( impl->IWineAsyncInfoImpl_inner )))
+    hr = work_item_create( invoker, param, callback, &impl->base.result, &impl->base.work_item );
+    if (FAILED( hr ))
     {
-        if (impl->IWineAsyncInfoImpl_inner) IWineAsyncInfoImpl_Release( impl->IWineAsyncInfoImpl_inner );
         free( impl );
         return hr;
     }
+    impl->base.ref = 1;
 
+    hr = IThreadPoolStatics_RunAsync( threadpool_statics, impl->base.work_item, &impl->base.inner_action );
+    if (FAILED( hr ))
+    {
+        IWorkItemHandler_Release( impl->base.work_item );
+        free( impl );
+        return hr;
+    }
     *out = &impl->IAsyncOperation_boolean_iface;
     TRACE( "created IAsyncOperation_boolean %p\n", *out );
     return S_OK;
diff --git a/dlls/cryptowinrt/private.h b/dlls/cryptowinrt/private.h
index 3ce3620118c..8a4595eb9ae 100644
--- a/dlls/cryptowinrt/private.h
+++ b/dlls/cryptowinrt/private.h
@@ -37,7 +37,8 @@
 #define WIDL_using_Windows_Security_Credentials
 #include "windows.security.credentials.h"
 
-#include "provider.h"
+#define WIDL_using_Windows_System_Threading
+#include "windows.system.threading.h"
 
 extern IActivationFactory *credentials_activation_factory;
 
diff --git a/dlls/cryptowinrt/provider.idl b/dlls/cryptowinrt/provider.idl
deleted file mode 100644
index 7196119dba0..00000000000
--- a/dlls/cryptowinrt/provider.idl
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- * Copyright 2022 Mohamad Al-Jaf
- * Copyright 2022 Rémi Bernon for CodeWeavers
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2.1 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
- */
-
-#pragma makedep header
-
-#ifdef __WIDL__
-#pragma winrt ns_prefix
-#endif
-
-import "propidl.idl";
-import "inspectable.idl";
-import "asyncinfo.idl";
-import "eventtoken.idl";
-import "windowscontracts.idl";
-import "windows.foundation.idl";
-
-namespace Windows.Security.Credentials {
-    /* type-pruning version of AsyncOperationCompletedHandler<T> */
-    delegate HRESULT WineAsyncOperationCompletedHandler([in] IInspectable *async, [in] AsyncStatus status);
-
-    [
-        uuid(83f377ee-c799-11ec-9d64-0242ac120002)
-    ]
-    interface IWineAsyncInfoImpl : IUnknown
-    {
-        [propput] HRESULT Completed([in] WineAsyncOperationCompletedHandler *handler);
-        [propget] HRESULT Completed([out, retval] WineAsyncOperationCompletedHandler **handler);
-        [propget] HRESULT Result([out, retval] PROPVARIANT *result);
-        HRESULT Start();
-    }
-}
-- 
GitLab

