From: William Horvath <william@horvath.blog>
Date: Tue, 27 Aug 2024 05:03:23 -0700
Subject: [PATCH 5/6] alsa,pulse,mmdevapi: Support custom period and buffer sizes, and respect PulseAudio settings.

Relevant environment variables are: 
ALSA_EXTRA_PAD (units: usecs*10; default is 40000, can be set to 0, adds extra padding)
STAGING_AUDIO_PERIOD (units: usecs*10)
STAGING_AUDIO_DURATION (units: usecs*10)

Also, silence pcm.c underrun errors.
---
 dlls/mmdevapi/client.c     | 49 ++++++++++++++++++++++++++++++--------
 dlls/winealsa.drv/alsa.c   | 30 ++++++++++++++++-------
 dlls/winepulse.drv/pulse.c | 23 +++++++++++++++++-
 3 files changed, 82 insertions(+), 20 deletions(-)

diff --git a/dlls/mmdevapi/client.c b/dlls/mmdevapi/client.c
index d29969b80c5..cb7072e30ac 100644
--- a/dlls/mmdevapi/client.c
+++ b/dlls/mmdevapi/client.c
@@ -52,6 +52,9 @@ extern struct audio_session_wrapper *session_wrapper_create(struct audio_client
 
 static HANDLE main_loop_thread;
 
+static BOOL custom;
+static REFERENCE_TIME num_periods = 3;
+
 void main_loop_stop(void)
 {
     if (main_loop_thread) {
@@ -110,7 +113,6 @@ static inline struct audio_client *impl_from_IAudioStreamVolume(IAudioStreamVolu
 static HRESULT get_periods(struct audio_client *client,
                            REFERENCE_TIME *def_period, REFERENCE_TIME *min_period)
 {
-    static const REFERENCE_TIME min_def_period = 100000; /* 10 ms */
     struct get_device_period_params params;
 
     params.device     = client->device_name;
@@ -120,8 +122,6 @@ static HRESULT get_periods(struct audio_client *client,
 
     wine_unix_call(get_device_period, &params);
 
-    if (def_period) *def_period = max(*def_period, min_def_period);
-
     return params.result;
 }
 
@@ -141,12 +141,10 @@ static HRESULT adjust_timing(struct audio_client *client, const BOOLEAN force_de
     TRACE("Device periods: %lu default and %lu minimum\n", (ULONG)def_period, (ULONG)min_period);
 
     if (mode == AUDCLNT_SHAREMODE_SHARED) {
-        if (*period == 0 || force_def_period)
+        if (!custom) {
             *period = def_period;
-        else if (*period < min_period)
-            return AUDCLNT_E_INVALID_DEVICE_PERIOD;
-        if (*duration < 3 * *period)
-            *duration = 3 * *period;
+            *duration = num_periods * *period;
+        }
     } else {
         const WAVEFORMATEXTENSIBLE *fmtex = (WAVEFORMATEXTENSIBLE *)fmt;
         if (fmtex->Format.wFormatTag == WAVE_FORMAT_EXTENSIBLE &&
@@ -171,7 +169,11 @@ static HRESULT adjust_timing(struct audio_client *client, const BOOLEAN force_de
         }
     }
 
-    TRACE("Adjusted duration %lu and period %lu\n", (ULONG)*duration, (ULONG)*period);
+    if (custom) {
+        MESSAGE("Set custom audio period %lu and duration %lu\n", (ULONG)*period, (ULONG)*duration);
+    } else {
+        TRACE("Adjusted duration %lu and period %lu\n", (ULONG)*duration, (ULONG)*period);
+    }
 
     return hr;
 }
@@ -384,6 +386,25 @@ static HRESULT stream_init(struct audio_client *client, const BOOLEAN force_def_
     if (mode != AUDCLNT_SHAREMODE_SHARED && mode != AUDCLNT_SHAREMODE_EXCLUSIVE)
         return E_INVALIDARG;
 
+    if (mode == AUDCLNT_SHAREMODE_SHARED) {
+        const char* penv = getenv("STAGING_AUDIO_PERIOD");
+        const char* denv = getenv("STAGING_AUDIO_DURATION");
+        int periodval, durationval;
+
+        if (penv && ((periodval = atoi(penv)) >= 0)) {
+            custom = TRUE;
+            period = periodval;
+
+            /* only set duration if period is given (backwards compatibility?) */
+            if (denv && ((durationval = atoi(denv)) >= 0)) {
+                duration = max(durationval, periodval);
+            }
+            else {
+                duration = num_periods * periodval;
+            }
+        }
+    }
+
     if (flags & ~(AUDCLNT_STREAMFLAGS_CROSSPROCESS |
                   AUDCLNT_STREAMFLAGS_LOOPBACK |
                   AUDCLNT_STREAMFLAGS_EVENTCALLBACK |
@@ -1097,13 +1118,21 @@ static HRESULT WINAPI client_InitializeSharedAudioStream(IAudioClient3 *iface, D
 {
     struct audio_client *This = impl_from_IAudioClient3(iface);
     REFERENCE_TIME period;
+    const char *penv;
+    int periodval;
 
     TRACE("(%p)->(0x%lx, %u, %p, %s)\n", This, flags, period_frames, format, debugstr_guid(session_guid));
 
     if (!format)
         return E_POINTER;
 
-    period = period_frames * (REFERENCE_TIME)10000000 / format->nSamplesPerSec;
+    penv = getenv("STAGING_AUDIO_PERIOD");
+    if (penv && (periodval = atoi(penv)) >= 0) { // Custom
+        period = periodval;
+        TRACE("Audio period set to %d.\n", periodval);
+    } else { // Default
+        period = period_frames * (REFERENCE_TIME)10000000 / format->nSamplesPerSec;
+    }
 
     return stream_init(This, FALSE, AUDCLNT_SHAREMODE_SHARED, flags, 0, period, format, session_guid);
 }
diff --git a/dlls/winealsa.drv/alsa.c b/dlls/winealsa.drv/alsa.c
index 046b447aafd..06c56373de9 100644
--- a/dlls/winealsa.drv/alsa.c
+++ b/dlls/winealsa.drv/alsa.c
@@ -82,10 +82,10 @@ struct alsa_stream
     pthread_mutex_t lock;
 };
 
-#define EXTRA_SAFE_RT 40000
+REFERENCE_TIME EXTRA_SAFE_RT = 40000;
 
-static const REFERENCE_TIME def_period = 100000;
-static const REFERENCE_TIME min_period = 50000;
+REFERENCE_TIME def_period = 1000;
+REFERENCE_TIME min_period = 500;
 
 static const WCHAR drv_keyW[] = {'S','o','f','t','w','a','r','e','\\',
     'W','i','n','e','\\','D','r','i','v','e','r','s','\\',
@@ -805,11 +805,23 @@ static NTSTATUS alsa_create_stream(void *args)
     snd_pcm_format_t format;
     unsigned int rate, alsa_period_us, i;
     WAVEFORMATEXTENSIBLE *fmtex = (WAVEFORMATEXTENSIBLE *)params->fmt;
+    const char *esrtenv;
+    REFERENCE_TIME esrtval;
     int err;
     SIZE_T size;
 
     params->result = S_OK;
 
+    esrtenv = getenv("ALSA_EXTRA_PAD");
+    if (esrtenv) {
+        esrtval = atoll(esrtenv);
+        if (esrtval >= 0) EXTRA_SAFE_RT = esrtval; // failsafe
+        MESSAGE("ALSA padding:\t%lld\n", (long long int)EXTRA_SAFE_RT);
+    }
+    else {
+        TRACE("ALSA padding:\t%lld\t(default)\n", (long long int)EXTRA_SAFE_RT);
+    }
+
     stream = calloc(1, sizeof(*stream));
     if(!stream){
         params->result = E_OUTOFMEMORY;
@@ -1008,10 +1020,10 @@ static NTSTATUS alsa_create_stream(void *args)
 
     pthread_mutex_init(&stream->lock, NULL);
 
-    TRACE("ALSA period: %lu frames\n", stream->alsa_period_frames);
-    TRACE("ALSA buffer: %lu frames\n", stream->alsa_bufsize_frames);
-    TRACE("MMDevice period: %u frames\n", stream->mmdev_period_frames);
-    TRACE("MMDevice buffer: %u frames\n", stream->bufsize_frames);
+    MESSAGE("PIPEWIRE_ALSA period: %lu frames\n", stream->alsa_period_frames);
+    MESSAGE("PIPEWIRE_ALSA buffer: %lu frames\n", stream->alsa_bufsize_frames);
+    MESSAGE("MMDevAPI period: %u frames\n", stream->mmdev_period_frames);
+    MESSAGE("MMDevAPI buffer: %u frames\n", stream->bufsize_frames);
 
 exit:
     free(sw_params);
@@ -1280,7 +1292,7 @@ static snd_pcm_sframes_t alsa_write_best_effort(struct alsa_stream *stream, BYTE
         WARN("writei failed, recovering: %ld (%s)\n", written,
                 snd_strerror(written));
 
-        ret = snd_pcm_recover(stream->pcm_handle, written, 0);
+        ret = snd_pcm_recover(stream->pcm_handle, written, 1);
         if(ret < 0){
             WARN("Could not recover: %d (%s)\n", ret, snd_strerror(ret));
             return ret;
@@ -1454,7 +1466,7 @@ static void alsa_read_data(struct alsa_stream *stream)
 
         WARN("read failed, recovering: %ld (%s)\n", nread, snd_strerror(nread));
 
-        ret = snd_pcm_recover(stream->pcm_handle, nread, 0);
+        ret = snd_pcm_recover(stream->pcm_handle, nread, 1);
         if(ret < 0){
             WARN("Recover failed: %d (%s)\n", ret, snd_strerror(ret));
             return;
diff --git a/dlls/winepulse.drv/pulse.c b/dlls/winepulse.drv/pulse.c
index 9e54d88b5ad..6e2e27d87d0 100644
--- a/dlls/winepulse.drv/pulse.c
+++ b/dlls/winepulse.drv/pulse.c
@@ -744,8 +744,9 @@ static void pulse_probe_settings(int render, const char *pulse_name, WAVEFORMATE
     pa_channel_map map;
     pa_sample_spec ss;
     pa_buffer_attr attr;
-    int ret;
+    int ret, periodval;
     unsigned int length = 0;
+    const char *penv;
 
     if (pulse_name && !pulse_name[0])
         pulse_name = NULL;
@@ -794,6 +795,12 @@ static void pulse_probe_settings(int render, const char *pulse_name, WAVEFORMATE
     if (length)
         *def_period = *min_period = pa_bytes_to_usec(10 * length, &ss);
 
+    penv = getenv("STAGING_AUDIO_PERIOD");
+    if (penv && (periodval = atoi(penv)) >= 0) {
+        *def_period = *min_period = periodval;
+        TRACE("Pulse audio period set to %d.\n", periodval);
+    }
+
     wfx->wFormatTag = WAVE_FORMAT_EXTENSIBLE;
     wfx->cbSize = sizeof(WAVEFORMATEXTENSIBLE) - sizeof(WAVEFORMATEX);
 
@@ -1162,6 +1169,8 @@ static NTSTATUS pulse_create_stream(void *args)
 {
     struct create_stream_params *params = args;
     struct pulse_stream *stream;
+    const char *penv, *denv;
+    int periodval, durationval;
     unsigned int i;
     HRESULT hr;
     char *name;
@@ -1200,6 +1209,18 @@ static NTSTATUS pulse_create_stream(void *args)
     if (FAILED(hr))
         goto exit;
 
+    penv = getenv("STAGING_AUDIO_PERIOD");
+    if ((stream->dataflow == eRender) && penv && (periodval = atoi(penv)) >= 0) {
+        params->period = periodval;
+        TRACE("Pulse audio period set to %d.\n", periodval);
+    }
+
+    denv = getenv("STAGING_AUDIO_DURATION");
+    if ((stream->dataflow == eRender) && denv && (durationval = atoi(denv)) >= 0) {
+        params->duration = max(durationval, params->period);
+        TRACE("Pulse audio duration set to %d.\n", durationval);
+    }
+
     stream->def_period = params->period;
     stream->duration = params->duration;
 
-- 
2.48.1

