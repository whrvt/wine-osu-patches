From a77a25834816d50f49c6ec1059f083ff82733334 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bernhard=20=C3=9Cbelacker?= <bernhardu@mailbox.org>
Date: Mon, 9 Dec 2024 21:40:38 +0100
Subject: [PATCH 38/86] ntdll/tests: debugstr_w - debugstr_wn

=================================================================
==1360==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffffe1dec70 at pc 0x0001402c42b1 bp 0x7ffffe1ddce0 sp 0x7ffffe1ddd28
READ of size 2 at 0x7ffffe1dec70 thread T0
065c:fixme:file:server_get_file_info Unsupported info class e
    #0 0x0001402c42b0 in wine_dbgstr_wn /home/bernhard/data/entwicklung/2024/wine\wine/include/wine/debug.h:262:30
    #1 0x0001402b98e9 in debugstr_w /home/bernhard/data/entwicklung/2024/wine\wine/include/wine/debug.h:521:65
    #2 0x0001402b98e9 in test__snwprintf /home/bernhard/data/entwicklung/2024/wine\wine/dlls/ntdll/tests/string.c:1686:67
    #3 0x0001402b98e9 in func_string /home/bernhard/data/entwicklung/2024/wine\wine/dlls/ntdll/tests/string.c:2258:5
    #4 0x000140366861 in run_test /home/bernhard/data/entwicklung/2024/wine\wine/include/wine/test.h:765:5
    #5 0x000140366861 in main /home/bernhard/data/entwicklung/2024/wine\wine/include/wine/test.h:884:12
    #6 0x0001403687ef in mainCRTStartup /home/bernhard/data/entwicklung/2024/wine\wine/dlls/msvcrt/crt_main.c:58:11
    #7 0x6ffffbfd4808 in BaseThreadInitThunk /home/bernhard/data/entwicklung/2024/wine/wine/dlls/kernel32\thread.c:61:5
    #8 0x6ffffacefa1a in RtlUserThreadStart (C:\windows\system32\ntdll.dll+0x17000fa1a)

Address 0x7ffffe1dec70 is located in stack of thread T0 at offset 3056 in frame
    #0 0x0001402acf2f in func_string /home/bernhard/data/entwicklung/2024/wine\wine/dlls/ntdll/tests/string.c:2237

  This frame has 56 object(s):
    [32, 35) 's.i904' (line 2220)
    [48, 56) 'd.i' (line 2066)
    [80, 84) 'f.i' (line 2067)
    [96, 100) 'i.i' (line 2068)
    [112, 116) 'buf_a.i' (line 1332)
    [128, 132) 'buf_b.i' (line 1332)
    [144, 147) 'str.i' (line 2014)
    [160, 168) 'p.i' (line 2014)
    [192, 194) 'wc.i' (line 2015)
    [208, 720) 'ws.i' (line 1919)
    [784, 1296) 'expectedw.i' (line 1919)
    [1360, 1872) 'specw.i' (line 1919)
    [1936, 2192) 'expected.i' (line 1921)
    [2256, 2512) 'spec.i' (line 1921)
    [2576, 2832) 's.i' (line 1921)
    [2896, 2960) 'buf.i561' (line 1778)
    [2992, 3056) 'buffer.i498' (line 1662) <== Memory access at offset 3056 overflows this variable
    [3088, 3120) 'buf.i' (line 1617)
    [3152, 3184) 'buffer.i414' (line 1489)
    [3216, 3244) 'arr.i394' (line 1469)
    [3280, 3284) 'l.i' (line 1470)
    [3296, 3316) 'arr.i' (line 1392)
    [3360, 3365) 'carr.i' (line 1393)
    [3392, 3448) 'strarr.i' (line 1394)
    [3488, 3544) 'strarr2.i' (line 1403)
    [3584, 134656) 'buffer.i' (line 1291)
    [134912, 134920) 'endpos.i' (line 1235)
    [134944, 134952) 'tmp.i' (line 1249)
    [134976, 134992) 'uni.i183' (line 1170)
    [135008, 135024) 'uni.i159' (line 1003)
    [135040, 135056) 'uni.i' (line 961)
    [135072, 135208) 'expected_wstr.i26.i' (line 779)
    [135280, 135416) 'dest_wstr.i27.i' (line 780)
    [135488, 135504) 'unicode_string.i28.i' (line 781)
    [135520, 135536) 'ansi_str.i29.i' (line 782)
    [135552, 135688) 'expected_wstr.i.i84' (line 729)
    [135760, 135896) 'dest_wstr.i.i85' (line 730)
    [135968, 135984) 'unicode_string.i.i86' (line 731)
    [136000, 136016) 'ansi_str.i.i87' (line 732)
    [136032, 136168) 'expected_wstr.i81.i' (line 436)
    [136240, 136376) 'dest_wstr.i82.i' (line 437)
    [136448, 136464) 'unicode_string.i83.i' (line 438)
    [136480, 136496) 'ansi_str.i84.i' (line 439)
    [136512, 136648) 'expected_wstr.i32.i' (line 400)
    [136720, 136856) 'dest_wstr.i33.i' (line 401)
    [136928, 136944) 'unicode_string.i34.i' (line 402)
    [136960, 136976) 'ansi_str.i35.i' (line 403)
    [136992, 137128) 'expected_wstr.i.i' (line 365)
    [137200, 137336) 'dest_wstr.i.i' (line 366)
    [137408, 137424) 'unicode_string.i.i' (line 367)
    [137440, 137456) 'ansi_str.i.i' (line 368)
    [137472, 137540) 'dest_str.i24.i' (line 694)
    [137584, 137652) 'dest_str.i.i3' (line 665)
    [137696, 137764) 'dest_str.i49.i' (line 327)
    [137808, 137876) 'dest_str.i32.i' (line 308)
    [137920, 137988) 'dest_str.i.i' (line 289)
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp, SEH and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /home/bernhard/data/entwicklung/2024/wine\wine/include/wine/debug.h:262:30 in wine_dbgstr_wn
Shadow bytes around the buggy address:
  0x7ffffe1de980: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
  0x7ffffe1dea00: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f2 f2 f2 f2 f2 f2
  0x7ffffe1dea80: f2 f2 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
  0x7ffffe1deb00: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
  0x7ffffe1deb80: f8 f8 f2 f2 f2 f2 f2 f2 f2 f2 f8 f8 f8 f8 f8 f8
=>0x7ffffe1dec00: f8 f8 f2 f2 f2 f2 00 00 00 00 00 00 00 00[f2]f2
  0x7ffffe1dec80: f2 f2 f8 f8 f8 f8 f2 f2 f2 f2 f8 f8 f8 f8 f2 f2
  0x7ffffe1ded00: f2 f2 f8 f8 f8 f8 f2 f2 f2 f2 f8 f2 f8 f8 f8 f2
  0x7ffffe1ded80: f2 f2 f2 f2 f8 f2 f2 f2 f8 f8 f8 f8 f8 f8 f8 f2
  0x7ffffe1dee00: f2 f2 f2 f2 f8 f8 f8 f8 f8 f8 f8 f2 f2 f2 f2 f2
  0x7ffffe1dee80: f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==1360==ABORTING
065c:fixme:kernelbase:AppPolicyGetProcessTerminationMethod FFFFFFFFFFFFFFFA, 00007FFFFEA8FE80
make: *** [Makefile:299457: dlls/ntdll/tests/x86_64-windows/string.ok] Fehler 1
---
 dlls/ntdll/tests/string.c | 40 +++++++++++++++++++--------------------
 1 file changed, 20 insertions(+), 20 deletions(-)

diff --git a/dlls/ntdll/tests/string.c b/dlls/ntdll/tests/string.c
index 3d975d12a10..525e46469ae 100644
--- a/dlls/ntdll/tests/string.c
+++ b/dlls/ntdll/tests/string.c
@@ -1672,104 +1672,104 @@ static void test__snwprintf(void)
     res = p_snwprintf(buffer, lstrlenW(teststring), teststring);
     ok(res == lstrlenW(teststring), "_snprintf returned %d, expected %d.\n", res, lstrlenW(teststring));
     ok(!wcscmp(buffer, L"hello worldX"), "_snprintf returned buffer %s, expected 'hello worldX'.\n",
-       debugstr_w(buffer));
+       debugstr_wn(buffer, ARRAY_SIZE(buffer)));
 
     wcscpy(buffer, origstring);
     res = p_snwprintf(buffer, lstrlenW(teststring) + 1, teststring);
     ok(res == lstrlenW(teststring), "_snprintf returned %d, expected %d.\n", res, lstrlenW(teststring));
     ok(!wcscmp(buffer, teststring), "_snprintf returned buffer %s, expected %s.\n",
-       debugstr_w(buffer), debugstr_w(teststring));
+       debugstr_wn(buffer, ARRAY_SIZE(buffer)), debugstr_w(teststring));
 
     memset(buffer, 0xcc, sizeof(buffer));
     res = p_snwprintf(buffer, 4, L"test");
     ok(res == 4, "res = %d\n", res);
-    ok(!memcmp(buffer, L"test", 4 * sizeof(WCHAR)), "buf = %s\n", debugstr_w(buffer));
+    ok(!memcmp(buffer, L"test", 4 * sizeof(WCHAR)), "buf = %s\n", debugstr_wn(buffer, ARRAY_SIZE(buffer)));
     ok(buffer[4] == 0xcccc, "buffer[4] = %x\n", buffer[4]);
 
     memset(buffer, 0xcc, sizeof(buffer));
     res = p_snwprintf(buffer, 3, L"test");
     ok(res == -1, "res = %d\n", res);
-    ok(!memcmp(buffer, L"tes", 3 * sizeof(WCHAR)), "buf = %s\n", debugstr_w(buffer));
+    ok(!memcmp(buffer, L"tes", 3 * sizeof(WCHAR)), "buf = %s\n", debugstr_wn(buffer, ARRAY_SIZE(buffer)));
     ok(buffer[3] == 0xcccc, "buffer[3] = %x\n", buffer[3]);
 
     memset(buffer, 0xcc, sizeof(buffer));
     res = p_snwprintf(buffer, 4, L"%s", L"test");
     ok(res == 4, "res = %d\n", res);
-    ok(!memcmp(buffer, L"test", 4 * sizeof(WCHAR)), "buf = %s\n", debugstr_w(buffer));
+    ok(!memcmp(buffer, L"test", 4 * sizeof(WCHAR)), "buf = %s\n", debugstr_wn(buffer, ARRAY_SIZE(buffer)));
     ok(buffer[4] == 0xcccc, "buffer[4] = %x\n", buffer[4]);
 
     memset(buffer, 0xcc, sizeof(buffer));
     res = p_snwprintf(buffer, 3, L"%s", L"test");
     ok(res == -1, "res = %d\n", res);
-    ok(!memcmp(buffer, L"tes", 3), "buf = %s\n", debugstr_w(buffer));
+    ok(!memcmp(buffer, L"tes", 3), "buf = %s\n", debugstr_wn(buffer, ARRAY_SIZE(buffer)));
     ok(buffer[3] == 0xcccc, "buffer[3] = %x\n", buffer[3]);
 
     res = p_snwprintf(buffer, ARRAY_SIZE(buffer), L"%I64x %d", (ULONGLONG)0x1234567890, 1);
     ok(res == lstrlenW(buffer), "wrong size %d\n", res);
-    ok(!wcscmp(buffer, L"1234567890 1"), "got %s\n", debugstr_w(buffer));
+    ok(!wcscmp(buffer, L"1234567890 1"), "got %s\n", debugstr_wn(buffer, ARRAY_SIZE(buffer)));
 
     res = p_snwprintf(buffer, ARRAY_SIZE(buffer), L"%I32x %d", 0x123456, 1);
     ok(res == lstrlenW(buffer), "wrong size %d\n", res);
-    ok(!wcscmp(buffer, L"123456 1"), "got %s\n", debugstr_w(buffer));
+    ok(!wcscmp(buffer, L"123456 1"), "got %s\n", debugstr_wn(buffer, ARRAY_SIZE(buffer)));
 
     res = p_snwprintf(buffer, ARRAY_SIZE(buffer), L"%#x %#x", 0, 1);
     ok(res == lstrlenW(buffer), "wrong size %d\n", res);
-    ok(!wcscmp(buffer, L"0 0x1"), "got %s\n", debugstr_w(buffer));
+    ok(!wcscmp(buffer, L"0 0x1"), "got %s\n", debugstr_wn(buffer, ARRAY_SIZE(buffer)));
 
     res = p_snwprintf(buffer, ARRAY_SIZE(buffer), L"%hx %hd", 0x123456, 987654);
     ok(res == lstrlenW(buffer), "wrong size %d\n", res);
-    ok(!wcscmp(buffer, L"3456 4614"), "got %s\n", debugstr_w(buffer));
+    ok(!wcscmp(buffer, L"3456 4614"), "got %s\n", debugstr_wn(buffer, ARRAY_SIZE(buffer)));
 
     if (sizeof(void *) == 8)
     {
         res = p_snwprintf(buffer, ARRAY_SIZE(buffer), L"%Ix %d", (ULONG_PTR)0x1234567890, 1);
         ok(res == lstrlenW(buffer), "wrong size %d\n", res);
-        ok(!wcscmp(buffer, L"1234567890 1"), "got %s\n", debugstr_w(buffer));
+        ok(!wcscmp(buffer, L"1234567890 1"), "got %s\n", debugstr_wn(buffer, ARRAY_SIZE(buffer)));
 
         res = p_snwprintf(buffer, ARRAY_SIZE(buffer), L"%zx %d", (ULONG_PTR)0x1234567890, 1);
         ok(res == lstrlenW(buffer), "wrong size %d\n", res);
         ok(!wcscmp(buffer, L"1234567890 1") || broken(!wcscmp(buffer, L"zx 878082192")),
-           "got %s\n", debugstr_w(buffer));
+           "got %s\n", debugstr_wn(buffer, ARRAY_SIZE(buffer)));
 
         res = p_snwprintf(buffer, ARRAY_SIZE(buffer), L"%tx %d", (ULONG_PTR)0x1234567890, 1);
         ok(res == lstrlenW(buffer), "wrong size %d\n", res);
         ok(!wcscmp(buffer, L"1234567890 1") || broken(!wcscmp(buffer, L"tx 878082192")),
-           "got %s\n", debugstr_w(buffer));
+           "got %s\n", debugstr_wn(buffer, ARRAY_SIZE(buffer)));
 
         res = p_snwprintf(buffer, ARRAY_SIZE(buffer), L"%jx %d", (ULONG_PTR)0x1234567890, 1);
         ok(res == lstrlenW(buffer), "wrong size %d\n", res);
         ok(!wcscmp(buffer, L"1234567890 1") || broken(!wcscmp(buffer, L"jx 878082192")),
-           "got %s\n", debugstr_w(buffer));
+           "got %s\n", debugstr_wn(buffer, ARRAY_SIZE(buffer)));
 
         res = p_snwprintf(buffer, ARRAY_SIZE(buffer), L"%llx %d", (ULONG_PTR)0x1234567890, 1);
         ok(res == lstrlenW(buffer), "wrong size %d\n", res);
-        ok(!wcscmp(buffer, L"1234567890 1"), "got %s\n", debugstr_w(buffer));
+        ok(!wcscmp(buffer, L"1234567890 1"), "got %s\n", debugstr_wn(buffer, ARRAY_SIZE(buffer)));
     }
     else
     {
         res = p_snwprintf(buffer, ARRAY_SIZE(buffer), L"%Ix %d", (ULONG_PTR)0x123456, 1);
         ok(res == lstrlenW(buffer), "wrong size %d\n", res);
-        ok(!wcscmp(buffer, L"123456 1"), "got %s\n", debugstr_w(buffer));
+        ok(!wcscmp(buffer, L"123456 1"), "got %s\n", debugstr_wn(buffer, ARRAY_SIZE(buffer)));
 
         res = p_snwprintf(buffer, ARRAY_SIZE(buffer), L"%zx %d", (ULONG_PTR)0x123456, 1);
         ok(res == lstrlenW(buffer), "wrong size %d\n", res);
         ok(!wcscmp(buffer, L"123456 1") || broken(!wcscmp(buffer, L"zx 1193046")),
-           "got %s\n", debugstr_w(buffer));
+           "got %s\n", debugstr_wn(buffer, ARRAY_SIZE(buffer)));
 
         res = p_snwprintf(buffer, ARRAY_SIZE(buffer), L"%tx %d", (ULONG_PTR)0x123456, 1);
         ok(res == lstrlenW(buffer), "wrong size %d\n", res);
         ok(!wcscmp(buffer, L"123456 1") || broken(!wcscmp(buffer, L"tx 1193046")),
-           "got %s\n", debugstr_w(buffer));
+           "got %s\n", debugstr_wn(buffer, ARRAY_SIZE(buffer)));
 
         res = p_snwprintf(buffer, ARRAY_SIZE(buffer), L"%jx %d", 0x1234567890ull, 1);
         ok(res == lstrlenW(buffer), "wrong size %d\n", res);
         ok(!wcscmp(buffer, L"1234567890 1") || broken(!wcscmp(buffer, L"jx 878082192")),
-           "got %s\n", debugstr_w(buffer));
+           "got %s\n", debugstr_wn(buffer, ARRAY_SIZE(buffer)));
 
         res = p_snwprintf(buffer, ARRAY_SIZE(buffer), L"%llx %d", 0x1234567890ull, 1);
         ok(res == lstrlenW(buffer), "wrong size %d\n", res);
         ok(!wcscmp(buffer, L"1234567890 1") || broken(!wcscmp(buffer, L"34567890 18")), /* winxp */
-           "got %s\n", debugstr_w(buffer));
+           "got %s\n", debugstr_wn(buffer, ARRAY_SIZE(buffer)));
     }
 }
 
-- 
2.47.1

