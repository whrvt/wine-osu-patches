From d330b2b142aedf06cc54bfa3fe5f750d2ed31bbf Mon Sep 17 00:00:00 2001
From: whrvt <william@horvath.blog>
Date: Tue, 25 Jun 2024 05:30:22 +0000
Subject: [PATCH] winex11: Allow disabling child window rendering through XComposite.

Improves performance in osu! by ~2x, so disable it by default. Breaks map editor context menus.

See: https://github.com/ValveSoftware/wine/commit/afcbb6a2a29de850d58b8b01435db7509d389c64
     https://github.com/ValveSoftware/wine/commit/a8514f9606ee3fdc3d912c988f651edc5d7d0d55
for other examples of this idea.

diff --git a/dlls/winex11.drv/opengl.c b/dlls/winex11.drv/opengl.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/opengl.c
+++ b/dlls/winex11.drv/opengl.c
@@ -1332,6 +1332,13 @@ static struct gl_drawable *create_gl_drawable( HWND hwnd, const struct glx_pixel
     gl->hwnd = hwnd;
     gl->mutable_pf = mutable_pf;
 
+    static unsigned int cache;
+    if (gl_disable_child_window_rendering) {
+        if (!cache++)
+            MESSAGE("OpenGL speedhack enabled, which will cause the editor top menu bar to render incorrectly\n\texport WINE_DISABLE_GLCHILD_HACK=1 to disable.\n");
+        known_child = FALSE;
+    }
+
     if (!known_child && !NtUserGetWindowRelative( hwnd, GW_CHILD ) &&
         NtUserGetAncestor( hwnd, GA_PARENT ) == NtUserGetDesktopWindow())  /* childless top-level window */
     {
@@ -1345,7 +1352,7 @@ static struct gl_drawable *create_gl_drawable( HWND hwnd, const struct glx_pixel
         TRACE( "%p created client %lx drawable %lx\n", hwnd, gl->window, gl->drawable );
     }
 #ifdef SONAME_LIBXCOMPOSITE
-    else if(usexcomposite)
+    else if(usexcomposite || gl_disable_child_window_rendering)
     {
         gl->type = DC_GL_CHILD_WIN;
         gl->colormap = XCreateColormap( gdi_display, get_dummy_parent(), visual->visual,
@@ -1355,7 +1362,7 @@ static struct gl_drawable *create_gl_drawable( HWND hwnd, const struct glx_pixel
         if (gl->window)
         {
             gl->drawable = pglXCreateWindow( gdi_display, gl->format->fbconfig, gl->window, NULL );
-            pXCompositeRedirectWindow( gdi_display, gl->window, CompositeRedirectManual );
+            if (!gl_disable_child_window_rendering) pXCompositeRedirectWindow( gdi_display, gl->window, CompositeRedirectManual );
         }
         TRACE( "%p created child %lx drawable %lx\n", hwnd, gl->window, gl->drawable );
     }
@@ -1474,6 +1481,7 @@ static BOOL set_pixel_format( HDC hdc, int format, BOOL internal )
  */
 void sync_gl_drawable( HWND hwnd, BOOL known_child )
 {
+    if (gl_disable_child_window_rendering) known_child = FALSE;
     struct gl_drawable *old, *new;
 
     if (!(old = get_gl_drawable( hwnd, 0 ))) return;

diff --git a/dlls/winex11.drv/x11drv_main.c b/dlls/winex11.drv/x11drv_main.c
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/x11drv_main.c
+++ b/dlls/winex11.drv/x11drv_main.c
@@ -94,6 +94,7 @@ int xfixes_event_base = 0;
 int xfixes_event_base = 0;
 char *process_name = NULL;
 WNDPROC client_foreign_window_proc = NULL;
+BOOL gl_disable_child_window_rendering = TRUE;
 
 static x11drv_error_callback err_callback;   /* current callback for error */
 static Display *err_callback_display;        /* display callback is set for */
@@ -937,6 +937,11 @@ static NTSTATUS x11drv_init( void *arg )
             (e && *e != '\0' && *e != '0');
     }
 
+    {
+        const char *e = getenv("WINE_DISABLE_GLCHILD_HACK");
+        if (e && *e != '\0' && *e != '0') gl_disable_child_window_rendering = FALSE;
+    }
+
     init_user_driver();
     X11DRV_DisplayDevices_Init(FALSE);
 
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 11111111111..11111111111 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -1020,6 +1020,7 @@ static inline UINT asciiz_to_unicode( WCHAR *dst, const char *src )
     while ((*p++ = *src++));
     return (p - dst) * sizeof(WCHAR);
 }
+extern BOOL gl_disable_child_window_rendering;
 
 extern BOOL layered_window_client_hack;
 
