diff --git a/dlls/win32u/dce.c b/dlls/win32u/dce.c
index a966be65c97..09ebda891d6 100644
--- a/dlls/win32u/dce.c
+++ b/dlls/win32u/dce.c
@@ -52,6 +52,8 @@ static struct list dce_list = LIST_INIT(dce_list);
 static struct list window_surfaces = LIST_INIT( window_surfaces );
 static pthread_mutex_t surfaces_lock = PTHREAD_MUTEX_INITIALIZER;
 
+static BOOL gl_disable_child_window_rendering = TRUE;
+
 /*******************************************************************
  * Dummy window surface for windows that shouldn't get painted.
  */
@@ -176,6 +178,9 @@ static COLORREF get_color_key( const BITMAPINFO *info, COLORREF color_key )
 W32KAPI BOOL window_surface_init( struct window_surface *surface, const struct window_surface_funcs *funcs,
                                   HWND hwnd, const RECT *rect, BITMAPINFO *info, HBITMAP bitmap )
 {
+    const char *e = getenv("WINE_DISABLE_GLCHILD_HACK");
+    if (e && *e != '\0' && *e != '0') gl_disable_child_window_rendering = FALSE;
+
     surface->funcs = funcs;
     surface->ref = 1;
     surface->hwnd = hwnd;
@@ -297,6 +302,7 @@ W32KAPI void window_surface_set_layered( struct window_surface *surface, COLORRE
 
 W32KAPI void window_surface_set_clip( struct window_surface *surface, HRGN clip_region )
 {
+    if (gl_disable_child_window_rendering) return;
     window_surface_lock( surface );
 
     if (!clip_region && surface->clip_region)
diff --git a/dlls/winex11.drv/graphics.c b/dlls/winex11.drv/graphics.c
index 4a0564392bd..c28a0e20346 100644
--- a/dlls/winex11.drv/graphics.c
+++ b/dlls/winex11.drv/graphics.c
@@ -248,6 +248,7 @@ RGNDATA *X11DRV_GetRegionData( HRGN hrgn, HDC hdc_lptodp )
  */
 static void update_x11_clipping( X11DRV_PDEVICE *physDev, HRGN rgn )
 {
+    if (gl_disable_child_window_rendering) return;
     RGNDATA *data;
 
     if (!rgn)
@@ -271,6 +272,7 @@ static void update_x11_clipping( X11DRV_PDEVICE *physDev, HRGN rgn )
  */
 BOOL add_extra_clipping_region( X11DRV_PDEVICE *dev, HRGN rgn )
 {
+    if (gl_disable_child_window_rendering) return FALSE;
     HRGN clip;
 
     if (!rgn) return FALSE;
diff --git a/dlls/winex11.drv/bitblt.c b/dlls/winex11.drv/bitblt.c
index ecd1fcc1944..d88893497e9 100644
--- a/dlls/winex11.drv/bitblt.c
+++ b/dlls/winex11.drv/bitblt.c
@@ -1972,6 +1972,7 @@ static XRectangle *xrectangles_from_rects( const RECT *rects, UINT count )
  */
 static void x11drv_surface_set_clip( struct window_surface *window_surface, const RECT *rects, UINT count )
 {
+    if (gl_disable_child_window_rendering) return;
     struct x11drv_window_surface *surface = get_x11_surface( window_surface );
     XRectangle *xrects;
 
@@ -2156,7 +2157,7 @@ HRGN expose_surface( struct window_surface *window_surface, const RECT *rect )
     window_surface_lock( window_surface );
     OffsetRect( &rc, -window_surface->rect.left, -window_surface->rect.top );
     add_bounds_rect( &window_surface->bounds, &rc );
-    if (window_surface->clip_region)
+    if (window_surface->clip_region && !gl_disable_child_window_rendering)
     {
         region = NtGdiCreateRectRgn( rect->left, rect->top, rect->right, rect->bottom );
         if (NtGdiCombineRgn( region, region, window_surface->clip_region, RGN_DIFF ) <= NULLREGION)
diff --git a/dlls/winex11.drv/vulkan.c b/dlls/winex11.drv/vulkan.c
index c2f32f4047a..af4e02c36a9 100644
--- a/dlls/winex11.drv/vulkan.c
+++ b/dlls/winex11.drv/vulkan.c
@@ -113,7 +113,7 @@ static void X11DRV_vulkan_surface_attach( HWND hwnd, void *private )
     if ((data = get_win_data( hwnd )))
     {
 #ifdef SONAME_LIBXCOMPOSITE
-        if (usexcomposite) pXCompositeUnredirectWindow( gdi_display, client_window, CompositeRedirectManual );
+        if (usexcomposite && !gl_disable_child_window_rendering) pXCompositeUnredirectWindow( gdi_display, client_window, CompositeRedirectManual );
 #endif
         attach_client_window( data, client_window );
         release_win_data( data );
@@ -144,7 +144,7 @@ static void X11DRV_vulkan_surface_detach( HWND hwnd, void *private, HDC *hdc )
         NtUserGetClientRect( hwnd, &escape.dc_rect, get_win_monitor_dpi( hwnd ) );
         NtGdiExtEscape( *hdc, NULL, 0, X11DRV_ESCAPE, sizeof(escape), (LPSTR)&escape, 0, NULL );
 #ifdef SONAME_LIBXCOMPOSITE
-        if (usexcomposite) pXCompositeRedirectWindow( gdi_display, client_window, CompositeRedirectManual );
+        if (usexcomposite && !gl_disable_child_window_rendering) pXCompositeRedirectWindow( gdi_display, client_window, CompositeRedirectManual );
 #endif
     }
 }
diff --git a/dlls/win32u/vulkan.c b/dlls/win32u/vulkan.c
index 47c1ca1ef01..96cf3fdad26 100644
--- a/dlls/win32u/vulkan.c
+++ b/dlls/win32u/vulkan.c
@@ -46,6 +46,8 @@ void *(*p_vkGetInstanceProcAddr)(VkInstance, const char *) = NULL;
 static void *vulkan_handle;
 static struct vulkan_funcs vulkan_funcs;
 
+static BOOL gl_disable_child_window_rendering = TRUE;
+
 #ifdef SONAME_LIBVULKAN
 
 static const struct vulkan_driver_funcs *driver_funcs;
@@ -398,6 +400,9 @@ static void vulkan_init_once(void)
 
 BOOL vulkan_init(void)
 {
+    const char *e = getenv("WINE_DISABLE_GLCHILD_HACK");
+    if (e && *e != '\0' && *e != '0') gl_disable_child_window_rendering = FALSE;
+
     static pthread_once_t init_once = PTHREAD_ONCE_INIT;
     pthread_once( &init_once, vulkan_init_once );
     return !!vulkan_handle;
@@ -487,7 +492,7 @@ void vulkan_set_region( HWND toplevel, HRGN region )
         
         NtUserMapWindowPoints( surface->hwnd, toplevel, (POINT *)&client_rect, 2, 0 /* per-monitor DPI */ );
         NtUserGetClientRect( surface->hwnd, &client_rect, get_win_monitor_dpi(surface->hwnd) );
-        is_clipped = NtGdiRectInRegion( region, &client_rect );
+        is_clipped = !gl_disable_child_window_rendering && NtGdiRectInRegion( region, &client_rect ) ;
 
         if (is_clipped && !surface->offscreen_dc)
         {
diff --git a/dlls/win32u/window.c b/dlls/win32u/window.c
index 5cdcd31a165..1ba0a52eed1 100644
--- a/dlls/win32u/window.c
+++ b/dlls/win32u/window.c
@@ -41,6 +41,8 @@ WINE_DEFAULT_DEBUG_CHANNEL(win);
 
 static void *user_handles[NB_USER_HANDLES];
 
+static BOOL gl_disable_child_window_rendering = TRUE;
+
 #define SWP_AGG_NOGEOMETRYCHANGE \
     (SWP_NOSIZE | SWP_NOCLIENTSIZE | SWP_NOZORDER)
 #define SWP_AGG_NOPOSCHANGE \
@@ -1872,8 +1874,8 @@ static BOOL apply_window_pos( HWND hwnd, HWND insert_after, UINT swp_flags,
     }
 
     /* create or update window surface for top-level windows if the driver doesn't implement WindowPosChanging */
-    if (needs_surface && new_surface && (!(get_window_long( hwnd, GWL_EXSTYLE ) & WS_EX_LAYERED) ||
-                                         NtUserGetLayeredWindowAttributes( hwnd, NULL, NULL, NULL )))
+    if (!gl_disable_child_window_rendering && (needs_surface && new_surface && (!(get_window_long( hwnd, GWL_EXSTYLE ) & WS_EX_LAYERED) ||
+                                         NtUserGetLayeredWindowAttributes( hwnd, NULL, NULL, NULL ))))
     {
         window_surface_release( new_surface );
         if ((new_surface = win->surface)) window_surface_add_ref( new_surface );
@@ -5012,6 +5014,9 @@ static WND *create_window_handle( HWND parent, HWND owner, UNICODE_STRING *name,
                                   HINSTANCE instance, BOOL ansi,
                                   DWORD style, DWORD ex_style )
 {
+    const char *e = getenv("WINE_DISABLE_GLCHILD_HACK");
+    if (e && *e != '\0' && *e != '0') gl_disable_child_window_rendering = FALSE;
+
     UINT dpi_context = get_thread_dpi_awareness_context();
     HWND handle = 0, full_parent = 0, full_owner = 0;
     struct tagCLASS *class = NULL;
