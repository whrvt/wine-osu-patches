From 2bab7398c6e8c3576e11ade09602d80dc02db1cc Mon Sep 17 00:00:00 2001
From: Zebediah Figura <z.figura12@gmail.com>
Date: Sat, 1 Sep 2018 17:30:47 -0500
Subject: [PATCH 0498/1533] ntdll, server: Implement waiting on server-bound
 objects.

---
 dlls/ntdll/unix/fsync.c | 51 +++++++++++++++++++++++++++++++++++++++--
 server/fsync.c          | 27 ++++++++++++++++++++++
 server/fsync.h          |  2 ++
 server/thread.c         |  4 ++++
 4 files changed, 82 insertions(+), 2 deletions(-)

diff --git a/dlls/ntdll/unix/fsync.c b/dlls/ntdll/unix/fsync.c
index 2f680212fc0..ec8b3121ed1 100644
--- a/dlls/ntdll/unix/fsync.c
+++ b/dlls/ntdll/unix/fsync.c
@@ -205,6 +205,49 @@ static struct fsync *get_cached_object( HANDLE handle )
     return &fsync_list[entry][idx];
 }
 
+/* Gets an object. This is either a proper fsync object (i.e. an event,
+ * semaphore, etc. created using create_fsync) or a generic synchronizable
+ * server-side object which the server will signal (e.g. a process, thread,
+ * message queue, etc.) */
+static NTSTATUS get_object( HANDLE handle, struct fsync **obj )
+{
+    NTSTATUS ret = STATUS_SUCCESS;
+    unsigned int shm_idx = 0;
+    enum fsync_type type;
+
+    if ((*obj = get_cached_object( handle ))) return STATUS_SUCCESS;
+
+    if ((INT_PTR)handle < 0)
+    {
+        /* We can deal with pseudo-handles, but it's just easier this way */
+        return STATUS_NOT_IMPLEMENTED;
+    }
+
+    /* We need to try grabbing it from the server. */
+    SERVER_START_REQ( get_fsync_idx )
+    {
+        req->handle = wine_server_obj_handle( handle );
+        if (!(ret = wine_server_call( req )))
+        {
+            shm_idx = reply->shm_idx;
+            type    = reply->type;
+        }
+    }
+    SERVER_END_REQ;
+
+    if (ret)
+    {
+        WARN("Failed to retrieve shm index for handle %p, status %#x.\n", handle, (unsigned int)ret);
+        *obj = NULL;
+        return ret;
+    }
+
+    TRACE("Got shm index %d for handle %p.\n", shm_idx, handle);
+
+    *obj = add_to_list( handle, type, get_shm( shm_idx ) );
+    return ret;
+}
+
 NTSTATUS fsync_close( HANDLE handle )
 {
     UINT_PTR entry, idx = handle_to_index( handle, &entry );
@@ -419,10 +462,13 @@ NTSTATUS fsync_wait_objects( DWORD count, const HANDLE *handles,
 
     for (i = 0; i < count; i++)
     {
-        if ((objs[i] = get_cached_object( handles[i] )))
+        ret = get_object( handles[i], &objs[i] );
+        if (ret == STATUS_SUCCESS)
             has_fsync = 1;
-        else
+        else if (ret == STATUS_NOT_IMPLEMENTED)
             has_server = 1;
+        else
+            return ret;
     }
 
     if (has_fsync && has_server)
@@ -495,6 +541,7 @@ NTSTATUS fsync_wait_objects( DWORD count, const HANDLE *handles,
                         break;
                     }
                     case FSYNC_MANUAL_EVENT:
+                    case FSYNC_MANUAL_SERVER:
                     {
                         struct event *event = obj->shm;
 
diff --git a/server/fsync.c b/server/fsync.c
index ae4dc7d7318..da30d94f1f7 100644
--- a/server/fsync.c
+++ b/server/fsync.c
@@ -22,6 +22,7 @@
 
 #include <errno.h>
 #include <fcntl.h>
+#include <limits.h>
 #include <stdio.h>
 #include <stdarg.h>
 #include <sys/mman.h>
@@ -265,6 +266,32 @@ struct fsync *create_fsync( struct object *root, const struct unicode_str *name,
 #endif
 }
 
+static inline int futex_wake( int *addr, int val )
+{
+    return syscall( __NR_futex, addr, 1, val, NULL, 0, 0 );
+}
+
+/* shm layout for events or event-like objects. */
+struct fsync_event
+{
+    int signaled;
+    int unused;
+};
+
+void fsync_wake_up( struct object *obj )
+{
+    struct fsync_event *event;
+    enum fsync_type type;
+
+    if (obj->ops->get_fsync_idx)
+    {
+        event = get_shm( obj->ops->get_fsync_idx( obj, &type ) );
+
+        if (!__atomic_exchange_n( &event->signaled, 1, __ATOMIC_SEQ_CST ))
+            futex_wake( &event->signaled, INT_MAX );
+    }
+}
+
 DECL_HANDLER(create_fsync)
 {
     struct fsync *fsync;
diff --git a/server/fsync.h b/server/fsync.h
index bbd104f3e16..2ff98cb64cb 100644
--- a/server/fsync.h
+++ b/server/fsync.h
@@ -21,3 +21,5 @@
 extern int do_fsync(void);
 extern void fsync_init(void);
 extern unsigned int fsync_alloc_shm( int low, int high );
+extern void fsync_wake_up( struct object *obj );
+extern void fsync_clear( struct object *obj );
diff --git a/server/thread.c b/server/thread.c
index ce90d8cfe74..6c46fc492cf 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -55,6 +55,7 @@
 #include "user.h"
 #include "security.h"
 #include "esync.h"
+#include "fsync.h"
 
 
 /* thread queues */
@@ -1241,6 +1242,9 @@ void wake_up( struct object *obj, int max )
     struct list *ptr;
     int ret;
 
+    if (do_fsync())
+        fsync_wake_up( obj );
+
     if (do_esync())
         esync_wake_up( obj );
 
-- 
2.45.0

