From 3958bc7081ba094c03daa995067f20c7d4b1557f Mon Sep 17 00:00:00 2001
From: Zebediah Figura <z.figura12@gmail.com>
Date: Sat, 1 Sep 2018 17:20:36 -0500
Subject: [PATCH 0497/1533] server: Create futex sections for process objects.

---
 server/fsync.c   | 49 +++++++++++++++++++++++++++++-------------------
 server/fsync.h   |  1 +
 server/process.c | 15 ++++++++++++++-
 server/process.h |  1 +
 4 files changed, 46 insertions(+), 20 deletions(-)

diff --git a/server/fsync.c b/server/fsync.c
index 21f41f54ca1..ae4dc7d7318 100644
--- a/server/fsync.c
+++ b/server/fsync.c
@@ -207,6 +207,35 @@ static void *get_shm( unsigned int idx )
 /* FIXME: This is rather inefficient... */
 static unsigned int shm_idx_counter = 1;
 
+unsigned int fsync_alloc_shm( int low, int high )
+{
+#ifdef __linux__
+    int shm_idx = shm_idx_counter++;
+    int *shm;
+
+    while (shm_idx * 8 >= shm_size)
+    {
+        /* Better expand the shm section. */
+        shm_size += pagesize;
+        if (ftruncate( shm_fd, shm_size ) == -1)
+        {
+            fprintf( stderr, "fsync: couldn't expand %s to size %jd: ",
+                shm_name, shm_size );
+            perror( "ftruncate" );
+        }
+    }
+
+    shm = get_shm( shm_idx );
+    assert(shm);
+    shm[0] = low;
+    shm[1] = high;
+
+    return shm_idx;
+#else
+    return 0;
+#endif
+}
+
 struct fsync *create_fsync( struct object *root, const struct unicode_str *name,
                             unsigned int attr, int low, int high,
                             const struct security_descriptor *sd )
@@ -218,32 +247,14 @@ struct fsync *create_fsync( struct object *root, const struct unicode_str *name,
     {
         if (get_error() != STATUS_OBJECT_NAME_EXISTS)
         {
-            int *shm;
-
             /* initialize it if it didn't already exist */
 
-            fsync->shm_idx = shm_idx_counter++;
-            while (fsync->shm_idx * 8 >= shm_size)
-            {
-                /* Better expand the shm section. */
-                shm_size += pagesize;
-                if (ftruncate( shm_fd, shm_size ) == -1)
-                {
-                    fprintf( stderr, "fsync: couldn't expand %s to size %lld: ",
-                        shm_name, (long long)shm_size );
-                    perror( "ftruncate" );
-                }
-            }
-
             /* Initialize the shared memory portion. We want to do this on the
              * server side to avoid a potential though unlikely race whereby
              * the same object is opened and used between the time it's created
              * and the time its shared memory portion is initialized. */
 
-            shm = get_shm( fsync->shm_idx );
-            assert(shm);
-            shm[0] = low;
-            shm[1] = high;
+            fsync->shm_idx = fsync_alloc_shm( low, high );
         }
     }
 
diff --git a/server/fsync.h b/server/fsync.h
index 0b7e46cdaf3..bbd104f3e16 100644
--- a/server/fsync.h
+++ b/server/fsync.h
@@ -20,3 +20,4 @@
 
 extern int do_fsync(void);
 extern void fsync_init(void);
+extern unsigned int fsync_alloc_shm( int low, int high );
diff --git a/server/process.c b/server/process.c
index 1db0d52cb34..38303e04193 100644
--- a/server/process.c
+++ b/server/process.c
@@ -64,6 +64,7 @@
 #include "user.h"
 #include "security.h"
 #include "esync.h"
+#include "fsync.h"
 
 /* process object */
 
@@ -97,6 +98,7 @@ static void process_poll_event( struct fd *fd, int event );
 static struct list *process_get_kernel_obj_list( struct object *obj );
 static void process_destroy( struct object *obj );
 static int process_get_esync_fd( struct object *obj, enum esync_type *type );
+static unsigned int process_get_fsync_idx( struct object *obj, enum fsync_type *type );
 static void terminate_process( struct process *process, struct thread *skip, int exit_code );
 
 static const struct object_ops process_ops =
@@ -108,7 +110,7 @@ static const struct object_ops process_ops =
     remove_queue,                /* remove_queue */
     process_signaled,            /* signaled */
     process_get_esync_fd,        /* get_esync_fd */
-    NULL,                        /* get_fsync_idx */
+    process_get_fsync_idx,       /* get_fsync_idx */
     no_satisfied,                /* satisfied */
     no_signal,                   /* signal */
     no_get_fd,                   /* get_fd */
@@ -692,6 +694,7 @@ struct process *create_process( int fd, struct process *parent, unsigned int fla
     process->rawinput_kbd    = NULL;
     memset( &process->image_info, 0, sizeof(process->image_info) );
     process->esync_fd        = -1;
+    process->fsync_idx       = 0;
     list_init( &process->kernel_object );
     list_init( &process->thread_list );
     list_init( &process->locks );
@@ -748,6 +751,9 @@ struct process *create_process( int fd, struct process *parent, unsigned int fla
     if (!token_assign_label( process->token, &high_label_sid ))
         goto error;
 
+    if (do_fsync())
+        process->fsync_idx = fsync_alloc_shm( 0, 0 );
+
     if (do_esync())
         process->esync_fd = esync_create_fd( 0, 0 );
 
@@ -823,6 +829,13 @@ static int process_get_esync_fd( struct object *obj, enum esync_type *type )
     return process->esync_fd;
 }
 
+static unsigned int process_get_fsync_idx( struct object *obj, enum fsync_type *type )
+{
+    struct process *process = (struct process *)obj;
+    *type = FSYNC_MANUAL_SERVER;
+    return process->fsync_idx;
+}
+
 static unsigned int process_map_access( struct object *obj, unsigned int access )
 {
     access = default_map_access( obj, access );
diff --git a/server/process.h b/server/process.h
index a0a071d8f88..4b80b8863b8 100644
--- a/server/process.h
+++ b/server/process.h
@@ -86,6 +86,7 @@ struct process
     struct list          kernel_object;   /* list of kernel object pointers */
     pe_image_info_t      image_info;      /* main exe image info */
     int                  esync_fd;        /* esync file descriptor (signaled on exit) */
+    unsigned int         fsync_idx;
 };
 
 /* process functions */
-- 
2.45.0

