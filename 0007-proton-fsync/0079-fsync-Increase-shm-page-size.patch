From 3b2446833d393a9e5a3e9bab4a03cbb671560def Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Mon, 1 Aug 2022 10:53:28 -0500
Subject: [PATCH 0563/1533] fsync: Increase shm page size.

CW-Bug-Id: #21050
---
 dlls/ntdll/unix/fsync.c | 19 +++++++++----------
 server/fsync.c          | 19 +++++++++----------
 server/protocol.def     |  2 ++
 3 files changed, 20 insertions(+), 20 deletions(-)

diff --git a/dlls/ntdll/unix/fsync.c b/dlls/ntdll/unix/fsync.c
index 309e2eb2aff..e709f2cbc00 100644
--- a/dlls/ntdll/unix/fsync.c
+++ b/dlls/ntdll/unix/fsync.c
@@ -218,14 +218,13 @@ static char shm_name[29];
 static int shm_fd;
 static void **shm_addrs;
 static int shm_addrs_size;  /* length of the allocated shm_addrs array */
-static long pagesize;
 
 static pthread_mutex_t shm_addrs_mutex = PTHREAD_MUTEX_INITIALIZER;
 
 static void *get_shm( unsigned int idx )
 {
-    int entry  = (idx * 16) / pagesize;
-    int offset = (idx * 16) % pagesize;
+    int entry  = (idx * 16) / FSYNC_SHM_PAGE_SIZE;
+    int offset = (idx * 16) % FSYNC_SHM_PAGE_SIZE;
     void *ret;
 
     pthread_mutex_lock( &shm_addrs_mutex );
@@ -242,14 +241,16 @@ static void *get_shm( unsigned int idx )
 
     if (!shm_addrs[entry])
     {
-        void *addr = mmap( NULL, pagesize, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, entry * pagesize );
+        void *addr = mmap( NULL, FSYNC_SHM_PAGE_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd,
+                           (off_t)entry * FSYNC_SHM_PAGE_SIZE );
         if (addr == (void *)-1)
-            ERR("Failed to map page %d (offset %#lx).\n", entry, entry * pagesize);
+            ERR("Failed to map page %d (offset %s).\n", entry,
+                 wine_dbgstr_longlong((off_t)entry * FSYNC_SHM_PAGE_SIZE));
 
         TRACE("Mapping page %d at %p.\n", entry, addr);
 
         if (__sync_val_compare_and_swap( &shm_addrs[entry], 0, addr ))
-            munmap( addr, pagesize ); /* someone beat us to it */
+            munmap( addr, FSYNC_SHM_PAGE_SIZE ); /* someone beat us to it */
     }
 
     ret = (void *)((unsigned long)shm_addrs[entry] + offset);
@@ -326,10 +327,10 @@ static unsigned int shm_index_from_shm( char *shm )
 
     for (i = 0; i < count; ++i)
     {
-        if (shm >= (char *)shm_addrs[i] && shm < (char *)shm_addrs[i] + pagesize)
+        if (shm >= (char *)shm_addrs[i] && shm < (char *)shm_addrs[i] + FSYNC_SHM_PAGE_SIZE)
         {
             idx_offset = (shm - (char *)shm_addrs[i]) / 16;
-            return i * (pagesize / 16) + idx_offset;
+            return i * (FSYNC_SHM_PAGE_SIZE / 16) + idx_offset;
         }
     }
 
@@ -578,8 +579,6 @@ void fsync_init(void)
         exit(1);
     }
 
-    pagesize = sysconf( _SC_PAGESIZE );
-
     shm_addrs = calloc( 128, sizeof(shm_addrs[0]) );
     shm_addrs_size = 128;
 }
diff --git a/server/fsync.c b/server/fsync.c
index 0e3862389da..dc50aa0a1f3 100644
--- a/server/fsync.c
+++ b/server/fsync.c
@@ -73,7 +73,6 @@ static int shm_fd;
 static off_t shm_size;
 static void **shm_addrs;
 static int shm_addrs_size;  /* length of the allocated shm_addrs array */
-static long pagesize;
 
 static int is_fsync_initialized;
 
@@ -109,12 +108,10 @@ void fsync_init(void)
     if (shm_fd == -1)
         perror( "shm_open" );
 
-    pagesize = sysconf( _SC_PAGESIZE );
-
     shm_addrs = calloc( 128, sizeof(shm_addrs[0]) );
     shm_addrs_size = 128;
 
-    shm_size = pagesize;
+    shm_size = FSYNC_SHM_PAGE_SIZE;
     if (ftruncate( shm_fd, shm_size ) == -1)
         perror( "ftruncate" );
 
@@ -205,8 +202,8 @@ static void fsync_destroy( struct object *obj )
 
 static void *get_shm( unsigned int idx )
 {
-    int entry  = (idx * 16) / pagesize;
-    int offset = (idx * 16) % pagesize;
+    int entry  = (idx * 16) / FSYNC_SHM_PAGE_SIZE;
+    int offset = (idx * 16) % FSYNC_SHM_PAGE_SIZE;
 
     if (entry >= shm_addrs_size)
     {
@@ -222,10 +219,12 @@ static void *get_shm( unsigned int idx )
 
     if (!shm_addrs[entry])
     {
-        void *addr = mmap( NULL, pagesize, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, entry * pagesize );
+        void *addr = mmap( NULL, FSYNC_SHM_PAGE_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd,
+                          (off_t)entry * FSYNC_SHM_PAGE_SIZE );
         if (addr == (void *)-1)
         {
-            fprintf( stderr, "fsync: failed to map page %d (offset %#lx): ", entry, entry * pagesize );
+            fprintf( stderr, "fsync: failed to map page %d (offset %#zx): ",
+                     entry, (size_t)entry * FSYNC_SHM_PAGE_SIZE );
             perror( "mmap" );
         }
 
@@ -233,7 +232,7 @@ static void *get_shm( unsigned int idx )
             fprintf( stderr, "fsync: Mapping page %d at %p.\n", entry, addr );
 
         if (__sync_val_compare_and_swap( &shm_addrs[entry], 0, addr ))
-            munmap( addr, pagesize ); /* someone beat us to it */
+            munmap( addr, FSYNC_SHM_PAGE_SIZE ); /* someone beat us to it */
     }
 
     return (void *)((unsigned long)shm_addrs[entry] + offset);
@@ -290,7 +289,7 @@ unsigned int fsync_alloc_shm( int low, int high )
     while (shm_idx * 16 >= shm_size)
     {
         /* Better expand the shm section. */
-        shm_size += pagesize;
+        shm_size += FSYNC_SHM_PAGE_SIZE;
         if (ftruncate( shm_fd, shm_size ) == -1)
         {
             fprintf( stderr, "fsync: couldn't expand %s to size %jd: ",
diff --git a/server/protocol.def b/server/protocol.def
index 9d211b683eb..311265289bd 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -3992,6 +3992,8 @@ enum esync_type
 @REQ(get_esync_apc_fd)
 @END
 
+#define FSYNC_SHM_PAGE_SIZE 0x10000
+
 enum fsync_type
 {
     FSYNC_SEMAPHORE = 1,
-- 
2.45.0

