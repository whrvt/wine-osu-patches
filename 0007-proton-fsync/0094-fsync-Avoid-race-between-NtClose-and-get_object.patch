From c4b4157c28e4fc1a7934a62241f10e706ae0a6e3 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Mon, 13 Mar 2023 21:39:04 -0600
Subject: [PATCH 0582/1533] fsync: Avoid race between NtClose() and
 get_object().

CW-Bug-Id: #22029
---
 dlls/ntdll/unix/fsync.c | 19 ++++++++++++++++---
 dlls/ntdll/unix/fsync.h |  5 +++++
 2 files changed, 21 insertions(+), 3 deletions(-)

diff --git a/dlls/ntdll/unix/fsync.c b/dlls/ntdll/unix/fsync.c
index 0e862e5bbc2..3aa32872a80 100644
--- a/dlls/ntdll/unix/fsync.c
+++ b/dlls/ntdll/unix/fsync.c
@@ -374,8 +374,9 @@ again:
     {
         /* This check does not strictly guarantee that we avoid the potential race but is supposed to greatly
          * reduce the probability of that. */
+        FIXME( "Cache changed while getting object, handle %p, shm_idx %d, refcount %d.\n",
+               handle, cache.shm_idx, ((int *)obj->shm)[2] );
         put_object( obj );
-        FIXME( "Cache changed while getting object.\n" );
         goto again;
     }
     return TRUE;
@@ -390,6 +391,7 @@ static NTSTATUS get_object( HANDLE handle, struct fsync *obj )
     NTSTATUS ret = STATUS_SUCCESS;
     unsigned int shm_idx = 0;
     enum fsync_type type;
+    sigset_t sigset;
 
     if (get_cached_object( handle, obj )) return STATUS_SUCCESS;
 
@@ -399,7 +401,17 @@ static NTSTATUS get_object( HANDLE handle, struct fsync *obj )
         return STATUS_NOT_IMPLEMENTED;
     }
 
-    /* We need to try grabbing it from the server. */
+
+    /* We need to try grabbing it from the server. Uninterrupted section
+     * is needed to avoid race with NtClose() which first calls fsync_close()
+     * and then closes handle on server. Without the section we might cache
+     * already closed handle back. */
+    server_enter_uninterrupted_section( &fd_cache_mutex, &sigset );
+    if (get_cached_object( handle, obj ))
+    {
+        server_leave_uninterrupted_section( &fd_cache_mutex, &sigset );
+        return STATUS_SUCCESS;
+    }
     SERVER_START_REQ( get_fsync_idx )
     {
         req->handle = wine_server_obj_handle( handle );
@@ -410,6 +422,8 @@ static NTSTATUS get_object( HANDLE handle, struct fsync *obj )
         }
     }
     SERVER_END_REQ;
+    if (!ret) add_to_list( handle, type, shm_idx );
+    server_leave_uninterrupted_section( &fd_cache_mutex, &sigset );
 
     if (ret)
     {
@@ -421,7 +435,6 @@ static NTSTATUS get_object( HANDLE handle, struct fsync *obj )
 
     obj->type = type;
     obj->shm = get_shm( shm_idx );
-    add_to_list( handle, type, shm_idx );
     /* get_fsync_idx server request increments shared mem refcount, so not grabbing object here. */
     return ret;
 }
diff --git a/dlls/ntdll/unix/fsync.h b/dlls/ntdll/unix/fsync.h
index 763e7891ab8..6005c0fa322 100644
--- a/dlls/ntdll/unix/fsync.h
+++ b/dlls/ntdll/unix/fsync.h
@@ -47,3 +47,8 @@ extern NTSTATUS fsync_wait_objects( DWORD count, const HANDLE *handles, BOOLEAN
                                     BOOLEAN alertable, const LARGE_INTEGER *timeout );
 extern NTSTATUS fsync_signal_and_wait( HANDLE signal, HANDLE wait,
     BOOLEAN alertable, const LARGE_INTEGER *timeout );
+
+/* We have to synchronize on the fd cache mutex so that fsync_close(), close_handle() sequence 
+ * called from NtClose() doesn't race with get_fsync_idx(), add_to_list() sequence called
+ * from get_object(). */
+extern pthread_mutex_t fd_cache_mutex;
-- 
2.45.0

