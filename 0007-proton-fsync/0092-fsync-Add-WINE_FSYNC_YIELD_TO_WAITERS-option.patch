From 2e9b6e6677fb0ae225ec5892ca3f0c0c680acf0f Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Thu, 27 Apr 2023 17:32:38 -0600
Subject: [PATCH 0578/1533] fsync: Add WINE_FSYNC_YIELD_TO_WAITERS option.

CW-Bug-Id: #22194
---
 dlls/ntdll/unix/fsync.c        | 37 +++++++++++++++++++++++++++++++---
 dlls/ntdll/unix/loader.c       |  7 +++++++
 dlls/ntdll/unix/unix_private.h |  1 +
 3 files changed, 42 insertions(+), 3 deletions(-)

diff --git a/dlls/ntdll/unix/fsync.c b/dlls/ntdll/unix/fsync.c
index d3ad9788600..0e862e5bbc2 100644
--- a/dlls/ntdll/unix/fsync.c
+++ b/dlls/ntdll/unix/fsync.c
@@ -426,7 +426,7 @@ static NTSTATUS get_object( HANDLE handle, struct fsync *obj )
     return ret;
 }
 
-static NTSTATUS get_object_for_wait( HANDLE handle, struct fsync *obj )
+static NTSTATUS get_object_for_wait( HANDLE handle, struct fsync *obj, int *prev_pid )
 {
     NTSTATUS ret;
     int *shm;
@@ -436,7 +436,10 @@ static NTSTATUS get_object_for_wait( HANDLE handle, struct fsync *obj )
     shm = obj->shm;
     /* Give wineserver a chance to cleanup shm index if the process
      * is killed while we are waiting on the object. */
-    __atomic_store_n( &shm[3], current_pid, __ATOMIC_SEQ_CST );
+    if (fsync_yield_to_waiters)
+        *prev_pid = __atomic_exchange_n( &shm[3], current_pid, __ATOMIC_SEQ_CST );
+    else
+        __atomic_store_n( &shm[3], current_pid, __ATOMIC_SEQ_CST );
     return STATUS_SUCCESS;
 }
 
@@ -823,6 +826,24 @@ NTSTATUS fsync_query_mutex( HANDLE handle, void *info, ULONG *ret_len )
     return STATUS_SUCCESS;
 }
 
+static inline void try_yield_to_waiters( int prev_pid )
+{
+    if (!fsync_yield_to_waiters) return;
+
+    /* On Windows singaling an object will wake the threads waiting on the object. With fsync
+     * it may happen that signaling thread (or other thread) grabs the object before the already waiting
+     * thread gets a chance. Try to workaround that for the affected apps. Non-zero 'prev_pid' indicates
+     * that the object is grabbed in __fsync_wait_objects() by some other thread. It is the same for
+     * a non-current pid, but we may currently have a stale PID on an object from a terminated process
+     * and it is probably safer to skip this workaround. This won't work great if the object is used in 'wait all'
+     * and the waiter is blocked on the other object.
+     * This check is also not entirely reliable as if multiple waiters from the same process enter
+     * __fsync_wait_objects() the first one leaving will clear 'last_pid' in the object. */
+
+    if (prev_pid == current_pid)
+        usleep(0);
+}
+
 static NTSTATUS do_single_wait( int *addr, int val, const struct timespec64 *end, clockid_t clock_id,
                                 BOOLEAN alertable )
 {
@@ -877,6 +898,7 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
     struct futex_waitv futexes[MAXIMUM_WAIT_OBJECTS + 1];
     struct fsync objs[MAXIMUM_WAIT_OBJECTS];
     BOOL msgwait = FALSE, waited = FALSE;
+    int prev_pids[MAXIMUM_WAIT_OBJECTS];
     int has_fsync = 0, has_server = 0;
     clockid_t clock_id = 0;
     struct timespec64 end;
@@ -907,7 +929,7 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
 
     for (i = 0; i < count; i++)
     {
-        ret = get_object_for_wait( handles[i], &objs[i] );
+        ret = get_object_for_wait( handles[i], &objs[i], &prev_pids[i] );
         if (ret == STATUS_SUCCESS)
         {
             assert( objs[i].type );
@@ -986,6 +1008,9 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                         int current, new;
 
                         new = __atomic_load_n( &semaphore->count, __ATOMIC_SEQ_CST );
+                        if (!waited && new)
+                            try_yield_to_waiters(prev_pids[i]);
+
                         while ((current = new))
                         {
                             if ((new = __sync_val_compare_and_swap( &semaphore->count, current, current - 1 )) == current)
@@ -1013,6 +1038,9 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                             return i;
                         }
 
+                        if (!waited && !mutex->tid)
+                            try_yield_to_waiters(prev_pids[i]);
+
                         if (!(tid = __sync_val_compare_and_swap( &mutex->tid, 0, CURRENT_TID )))
                         {
                             TRACE("Woken up by handle %p [%d].\n", handles[i], i);
@@ -1037,6 +1065,9 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                     {
                         struct event *event = obj->shm;
 
+                        if (!waited && event->signaled)
+                            try_yield_to_waiters(prev_pids[i]);
+
                         if (__sync_val_compare_and_swap( &event->signaled, 1, 0 ))
                         {
                             if (ac_odyssey && alertable)
diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
index 9cdfed963f8..723b033751a 100644
--- a/dlls/ntdll/unix/loader.c
+++ b/dlls/ntdll/unix/loader.c
@@ -1923,6 +1923,7 @@ static ULONG_PTR get_image_address(void)
 BOOL ac_odyssey;
 BOOL fsync_simulate_sched_quantum;
 BOOL alert_simulate_sched_quantum;
+BOOL fsync_yield_to_waiters;
 
 static void hacks_init(void)
 {
@@ -1960,6 +1961,12 @@ static void hacks_init(void)
     if (alert_simulate_sched_quantum)
         ERR("HACK: Simulating sched quantum in NtWaitForAlertByThreadId.\n");
 
+    env_str = getenv("WINE_FSYNC_YIELD_TO_WAITERS");
+    if (env_str)
+        fsync_yield_to_waiters = !!atoi(env_str);
+    if (fsync_yield_to_waiters)
+        ERR("HACK: fsync: yield to waiters.\n");
+
     switch (sgi ? atoi( sgi ) : -1)
     {
     case 25700: /* Madballs in Babo: Invasion */
diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index 92668512e90..c61187266e6 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -181,6 +181,7 @@ extern struct ldt_copy __wine_ldt_copy;
 extern BOOL ac_odyssey;
 extern BOOL fsync_simulate_sched_quantum;
 extern BOOL alert_simulate_sched_quantum;
+extern BOOL fsync_yield_to_waiters;
 
 extern void init_environment(void);
 extern void init_startup_info(void);
-- 
2.45.0

