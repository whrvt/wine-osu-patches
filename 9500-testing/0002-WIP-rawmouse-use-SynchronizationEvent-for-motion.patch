From 8c9cc418e2ac55d5fe18c7872aa8e1875d1c12d2 Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Fri, 22 Nov 2024 21:19:03 -0800
Subject: [PATCH] WIP: rawmouse: use SynchronizationEvent for motion

---
 dlls/win32u/rawinput.c | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/dlls/win32u/rawinput.c b/dlls/win32u/rawinput.c
index cdb962979d4..caba1c6728a 100644
--- a/dlls/win32u/rawinput.c
+++ b/dlls/win32u/rawinput.c
@@ -117,7 +117,6 @@ static unsigned char rawmouse_dec(unsigned char *tail) {
         return 0;
     case 1:
         __atomic_store_n(&rawmouse.msg_pend, 0, __ATOMIC_RELAXED);
-        NtClearEvent(rawmouse.event);
     }
 
     *tail = __atomic_fetch_add(&rawmouse.tail, 1, __ATOMIC_RELAXED);
@@ -129,7 +128,6 @@ static unsigned char rawmouse_check(unsigned char remove) {
         unsigned char t = 1;
         if (__atomic_compare_exchange_n(&rawmouse.msg_pend, &t, 0, false, 
                                       __ATOMIC_ACQUIRE, __ATOMIC_RELAXED)) {
-            NtClearEvent(rawmouse.event);
             return 1;
         }
         return t ? __atomic_fetch_sub(&rawmouse.msg_pend, 1, __ATOMIC_RELAXED) : 0;
@@ -140,11 +138,8 @@ static unsigned char rawmouse_check(unsigned char remove) {
 
 static void rawmouse_clear(void) {
     __atomic_clear(&rawmouse.msg_pend, __ATOMIC_RELEASE);
-    if (rawmouse.event)
-        NtClearEvent(rawmouse.event);
     __atomic_store_n(&rawmouse.headtail, 0, __ATOMIC_RELAXED);
     memset(rawmouse.data, 0, sizeof(rawmouse.data));
-    return;
 }
 
 HWND rawmouse_get_target(void) {
@@ -253,11 +248,16 @@ static bool create_rawmouse_thread(void)
 {
     NTSTATUS status;
 
-    status = NtCreateEvent(&rawmouse.event, EVENT_ALL_ACCESS, NULL, NotificationEvent, FALSE);
+    status = NtCreateEvent(&rawmouse.event, EVENT_ALL_ACCESS, NULL, SynchronizationEvent, FALSE);
     if (!NT_SUCCESS(status)) return false;
 
     status = NtCreateEvent(&rawmouse.btn_event, EVENT_ALL_ACCESS, NULL, NotificationEvent, FALSE);
-    if (!NT_SUCCESS(status)) return false;
+    if (!NT_SUCCESS(status)) 
+    {
+        NtClose(rawmouse.event);
+        rawmouse.event = NULL;
+        return false;
+    }
 
     status = NtCreateThreadEx(&rawmouse.thread,
                              THREAD_ALL_ACCESS,
-- 
2.47.0

