From 608690437a165bf14c699df5ad2ecbf815490f4e Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Tue, 1 Mar 2022 22:11:17 +0300
Subject: [PATCH 0862/2346] winex11.drv: Generate EDID if one is not available
 from xrandr.

CW-Bug-Id: #20204
CW-Bug-Id: #19217
---
 dlls/winex11.drv/xrandr.c | 110 ++++++++++++++++++++++++++++++++++----
 1 file changed, 99 insertions(+), 11 deletions(-)

diff --git a/dlls/winex11.drv/xrandr.c b/dlls/winex11.drv/xrandr.c
index b0e3ee9294e..d0f07996ec3 100644
--- a/dlls/winex11.drv/xrandr.c
+++ b/dlls/winex11.drv/xrandr.c
@@ -32,6 +32,7 @@
 #include <X11/extensions/Xrandr.h>
 #endif
 #include <dlfcn.h>
+#include <stdlib.h>
 #include "x11drv.h"
 #include "wine/debug.h"
 
@@ -536,23 +537,108 @@ static void get_screen_size( XRRScreenResources *resources, unsigned int *width,
     }
 }
 
-static unsigned int get_edid( RROutput output, unsigned char **prop )
+static unsigned int get_edid( RROutput output, unsigned char **prop,
+                              XRROutputInfo *output_info, XRRScreenResources *screen_resources )
 {
-    int result, actual_format;
+    unsigned int mwidth, mheight, i;
     unsigned long bytes_after, len;
+    unsigned char *edid, *p, c;
+    int result, actual_format;
+    XRRModeInfo *mode;
     Atom actual_type;
 
+    *prop = NULL;
     result = pXRRGetOutputProperty( gdi_display, output, x11drv_atom(EDID), 0, 128, FALSE, FALSE,
                                     AnyPropertyType, &actual_type, &actual_format, &len,
-                                    &bytes_after, prop );
+                                    &bytes_after, &edid );
+    if (result == Success && len)
+    {
+        if (!(*prop = malloc( len )))
+        {
+            XFree( edid );
+            return 0;
+        }
+        memcpy( *prop, edid, len );
+        return len;
+    }
 
-    if (result != Success)
+    WARN( "Could not retrieve EDID property for output %#lx.\n", output );
+    if (!output_info->npreferred)
     {
-        WARN("Could not retrieve EDID property for output %#lx.\n", output);
-        *prop = NULL;
+        WARN( "No preferred modes for output %#lx.\n", output );
         return 0;
     }
-    return len;
+    if (output_info->npreferred > 1)
+        WARN( "%u preferred modes for output %#lx, using first one.\n", output_info->npreferred, output );
+
+    for (i = 0; i < screen_resources->nmode; ++i)
+        if (screen_resources->modes[i].id == output_info->modes[0]) break;
+
+    if (i == screen_resources->nmode)
+    {
+        ERR("Preferred mode not found for output %#lx.\n", output);
+        return 0;
+    }
+
+    mode = &screen_resources->modes[i];
+
+    mwidth = mode->width / 60;   /* Fake ~150dpi. */
+    mheight = mode->height / 60;
+
+    edid = calloc( 1, 128 );
+    *prop = edid;
+    *(uint64_t *)edid = 0x00ffffffffffff00;
+    edid[18] = 1;
+    edid[19] = 4;
+    edid[20] = 0xa0; /* Digital input, 8 bit depth. */
+    edid[21] = mwidth;
+    edid[22] = mheight;
+    edid[24] = 0x6;
+    for (i = 0; i < 16; ++i) edid[38 + i] = 1;
+
+    p = edid + 54;
+    *(uint16_t *)&p[0] = mode->dotClock / 10000;
+    p[2] = mode->width;
+    p[3] = mode->hTotal - mode->width;
+    p[4] = (((mode->hTotal - mode->width) >> 8) & 0xf) | (((mode->width >> 8) & 0xf) << 4);
+    p[5] = mode->height;
+    p[6] = mode->vTotal - mode->height;
+    p[7] = (((mode->vTotal - mode->height) >> 8) & 0xf) | (((mode->height >> 8) & 0xf) << 4);
+    p[8] = mode->hSyncStart - mode->width;
+    p[9] = mode->hSyncEnd - mode->hSyncStart;
+    p[10] = (((mode->vSyncStart - mode->height) & 0xf) << 4) | ((mode->vSyncEnd - mode->vSyncStart) & 0xf);
+    p[11] = ((((mode->hSyncStart - mode->width) >> 8) & 3) << 6)
+            | ((((mode->hSyncEnd - mode->hSyncStart) >> 8) & 3) << 4)
+            | ((((mode->vSyncStart - mode->height) >> 4) & 3) << 2)
+            | (((mode->vSyncEnd - mode->vSyncStart) >> 4) & 3);
+    p[12] = mwidth;
+    p[13] = mheight;
+    p[14] = (((mwidth >> 8) & 0xf) << 4) | ((mheight >> 8) & 0xf);
+    if (mode->modeFlags & RR_Interlace)
+        p[17] |= 0x80;
+    p[17] |= 3 << 3;
+    if (mode->modeFlags & RR_HSyncPositive)
+        p[17] |= 2;
+    if (mode->modeFlags & RR_VSyncPositive)
+        p[17] |= 4;
+
+    if (mode->modeFlags & (RR_DoubleScan | RR_PixelMultiplex | RR_DoubleClock | RR_ClockDivideBy2))
+        FIXME( "Unsupported flags %#lx.\n", mode->modeFlags );
+
+    p += 18;
+    p[3] = 0xfc;
+    strcpy( (char *)p + 5, "Default" );
+
+    p += 18;
+    p[3] = 0x10;
+    p += 18;
+    p[3] = 0x10;
+
+    c = 0;
+    for (i = 0; i < 127; ++i)
+        c += edid[i];
+    edid[127] = 256 - c;
+    return 128;
 }
 
 static void set_screen_size( int width, int height )
@@ -1085,7 +1171,8 @@ static BOOL xrandr14_get_monitors( ULONG_PTR adapter_id, struct gdi_monitor **ne
     /* Inactive but attached monitor, no need to check for mirrored/replica monitors */
     if (!output_info->crtc || !crtc_info->mode)
     {
-        monitors[monitor_count].edid_len = get_edid( adapter_id, &monitors[monitor_count].edid );
+        monitors[monitor_count].edid_len = get_edid( adapter_id, &monitors[monitor_count].edid,
+                                                     output_info, screen_resources );
         monitor_count = 1;
     }
     /* Active monitors, need to find other monitors with the same coordinates as mirrored */
@@ -1136,7 +1223,8 @@ static BOOL xrandr14_get_monitors( ULONG_PTR adapter_id, struct gdi_monitor **ne
                         primary_index = monitor_count;
 
                     monitors[monitor_count].edid_len = get_edid( screen_resources->outputs[i],
-                                                                 &monitors[monitor_count].edid );
+                                                                 &monitors[monitor_count].edid,
+                                                                 enum_output_info, screen_resources );
                     monitor_count++;
                 }
 
@@ -1180,7 +1268,7 @@ done:
         for (i = 0; i < monitor_count; i++)
         {
             if (monitors[i].edid)
-                XFree( monitors[i].edid );
+                free( monitors[i].edid );
         }
         free( monitors );
         ERR("Failed to get monitors\n");
@@ -1195,7 +1283,7 @@ static void xrandr14_free_monitors( struct gdi_monitor *monitors, int count )
     for (i = 0; i < count; i++)
     {
         if (monitors[i].edid)
-            XFree( monitors[i].edid );
+            free( monitors[i].edid );
     }
     free( monitors );
 }
-- 
2.47.0

