From 4a56dd38de058abe98c9e76c50c90031745394f6 Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Wed, 6 Nov 2024 13:51:46 -0800
Subject: [PATCH] winex11: Improved osu! childwindow hack.

'WindowsForms10.Window.808.app.0.360e033_r26_ad1' is the name of the editor
window class, so just look around to see if it's visible to determine whether
or not we really need to render offscreen. If not, we can maintain
the composition-free page-flipping rendering path instead of blitting.
---
 dlls/ntdll/unix/loader.c  |  9 +++++
 dlls/winex11.drv/init.c   | 69 +++++++++++++++++++++++++++++++++++++--
 dlls/winex11.drv/opengl.c |  3 +-
 dlls/winex11.drv/x11drv.h | 12 +++++++
 4 files changed, 89 insertions(+), 4 deletions(-)

diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
index 6e432a943cc..190d3332c7f 100644
--- a/dlls/ntdll/unix/loader.c
+++ b/dlls/ntdll/unix/loader.c
@@ -1869,6 +1869,15 @@ static void hacks_init(void)
         ERR( "HACK: ram_reporting_bias %lldMB.\n", ram_reporting_bias / (1024 * 1024) );
     }
 
+    if (main_argc > 1 && (strstr(main_argv[1], "osu!.exe")))
+    {
+        env_str = getenv("WINE_DISABLE_GLCHILD_HACK");
+        if (!(env_str && *env_str != '\0' && *env_str != '0'))
+        {
+            setenv( "OSU_HACKS_ENABLED", "1", 0 );
+        }
+    }
+
     env_str = getenv("WINE_SIMULATE_ASYNC_READ");
     if (env_str)
         ac_odyssey = !!atoi(env_str);
diff --git a/dlls/winex11.drv/init.c b/dlls/winex11.drv/init.c
index 0f5b91d469e..0eb24f7dbc0 100644
--- a/dlls/winex11.drv/init.c
+++ b/dlls/winex11.drv/init.c
@@ -194,12 +194,75 @@ static HFONT X11DRV_SelectFont( PHYSDEV dev, HFONT hfont, UINT *aa_flags )
     return dev->funcs->pSelectFont( dev, hfont, aa_flags );
 }
 
+enum osu_window_type 
+{
+    GAME,
+    EDITOR
+};
+
+static BOOL class_matches( HWND hwnd, enum osu_window_type type )
+{
+    static const WCHAR editor_class[] = {'W','i','n','d','o','w','s','F','o','r','m','s','1','0','.','W','i','n','d','o','w','.','8','0','8','.','a','p','p','.', 0};
+    static const WCHAR game_class[] = {'W','i','n','d','o','w','s','F','o','r','m','s','1','0','.','W','i','n','d','o','w','.','2','b','.','a','p','p','.', 0};
+
+    WCHAR buffer[256];
+    UNICODE_STRING name = { .Buffer = buffer, .MaximumLength = sizeof(buffer) };
+
+    INT length = NtUserGetClassName( hwnd, FALSE, &name );
+
+    if (length > 0)
+    {
+        if (type == EDITOR)
+            return wcsncmp( buffer, editor_class, wcslen(editor_class) - 1 ) == 0;
+        else /* GAME */
+            return wcsncmp( buffer, game_class, wcslen(game_class) - 1 ) == 0;
+    }
+    return FALSE;
+}
+
+static BOOL window_visible( HWND current, enum osu_window_type type )
+{
+    while (current)
+    {
+        if (class_matches( current, type ))
+            return TRUE;
+
+        HWND child = NtUserGetWindowRelative( current, GW_CHILD );
+        if (child)
+        {
+            if (window_visible( child, type ))
+                return TRUE;
+        }
+        current = NtUserGetWindowRelative( current, GW_HWNDNEXT );
+    }
+    return FALSE;
+}
+
+static BOOL osu_rendering_bypass( HWND hwnd )
+{
+    if (!use_osu_child_hack())
+        return FALSE;
+
+    if (//!window_visible( NtUserGetDesktopWindow(), GAME ) ||
+        NtUserGetWindowLongW( hwnd, GWL_EXSTYLE ) & WS_EX_LAYERED /* translucent windows don't like to be rendered onscreen */
+     || window_visible( NtUserGetDesktopWindow(), EDITOR ))
+    {
+        TRACE("osu! onscreen bypass disabled or not needed for %p\n", hwnd);
+        return FALSE;
+    }
+    TRACE("osu! onscreen bypass enabled for %p\n", hwnd);
+    return TRUE;
+}
+
 BOOL needs_offscreen_rendering( HWND hwnd, BOOL known_child )
 {
     if (NtUserGetDpiForWindow( hwnd ) != NtUserGetWinMonitorDpi( hwnd, MDT_RAW_DPI )) return TRUE; /* needs DPI scaling */
-    if (NtUserGetAncestor( hwnd, GA_PARENT ) != NtUserGetDesktopWindow()) return TRUE; /* child window, needs compositing */
-    if (NtUserGetWindowRelative( hwnd, GW_CHILD )) return TRUE; /* window has children, needs compositing */
-    if (known_child) return TRUE; /* window is/have children, needs compositing */
+    if (!osu_rendering_bypass( hwnd ))
+    {
+        if (NtUserGetAncestor( hwnd, GA_PARENT ) != NtUserGetDesktopWindow()) return TRUE; /* child window, needs compositing */
+        if (NtUserGetWindowRelative( hwnd, GW_CHILD )) return TRUE; /* window has children, needs compositing */
+        if (known_child) return TRUE; /* window is/have children, needs compositing */
+    }
     return FALSE;
 }
 
diff --git a/dlls/winex11.drv/opengl.c b/dlls/winex11.drv/opengl.c
index dce5f68c35f..5c5bb8f0602 100644
--- a/dlls/winex11.drv/opengl.c
+++ b/dlls/winex11.drv/opengl.c
@@ -790,6 +790,7 @@ static void init_pixel_formats( Display *display )
     int fmt_id, nCfgs, i, run, bmp_formats;
     GLXFBConfig* cfgs;
     XVisualInfo *visinfo;
+    int tmp_value;
 
     cfgs = pglXGetFBConfigs(display, DefaultScreen(display), &nCfgs);
     if (NULL == cfgs || 0 == nCfgs) {
@@ -833,7 +834,7 @@ static void init_pixel_formats( Display *display )
                  * As of the introduction of composition managers at least Nvidia now also offers ARGB visuals
                  * with a depth of 32 in addition to the default 24 bit. In order to prevent BadMatch errors we only
                  * list formats with the same depth. */
-                if(visinfo->depth != default_visual.depth)
+                if((visinfo->depth != default_visual.depth) || (use_osu_child_hack() && !pglXGetFBConfigAttrib( display, cfgs[i], GLX_STENCIL_SIZE, &tmp_value ) && tmp_value))
                 {
                     XFree(visinfo);
                     continue;
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index c54a33c43a7..637afaa5e3b 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -962,6 +962,18 @@ static inline BOOL disable_glXWaitForSbcOML(void)
 }
 /* registry helpers */
 
+static inline BOOL use_osu_child_hack(void)
+{
+    static int cache = -1;
+    if (cache == -1)
+    {
+        const char *e = getenv("OSU_HACKS_ENABLED");
+        if (e && !!atoi(e)) cache = 1;
+        else cache = 0;
+    }
+    return !!cache;
+}
+
 extern HKEY open_hkcu_key( const char *name );
 extern ULONG query_reg_value( HKEY hkey, const WCHAR *name,
                               KEY_VALUE_PARTIAL_INFORMATION *info, ULONG size );
-- 
2.47.0

