From adc054ef4aabc193d3a3f7cd788e1b61f134aabd Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Mon, 7 Mar 2022 22:23:31 +0100
Subject: [PATCH 13/19] winex11.drv: Set the _NET_WM_USER_TIME property on
 individual window.

This associates a user time with each window instead of a per-process
user time, so we can later use the EWMH feature where a newly mapped
window with a 0 user time should not be get activated.

CW-Bug-Id: #19553
CW-Bug-Id: #19644
Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=2155

 100.0% dlls/winex11.drv/
diff --git a/dlls/winex11.drv/event.c b/dlls/winex11.drv/event.c
index 3aa1fd5cbf2..02ea4612565 100644
--- a/dlls/winex11.drv/event.c
+++ b/dlls/winex11.drv/event.c
@@ -670,7 +670,7 @@ static void handle_wm_protocols( HWND hwnd, XClientMessageEvent *event )
 
     if (protocol == x11drv_atom(WM_DELETE_WINDOW))
     {
-        update_user_time( event_time );
+        set_window_user_time( event->display, event->window, event_time );
 
         if (hwnd == NtUserGetDesktopWindow())
         {
diff --git a/dlls/winex11.drv/keyboard.c b/dlls/winex11.drv/keyboard.c
index f6415de9c53..5304093aeb7 100644
--- a/dlls/winex11.drv/keyboard.c
+++ b/dlls/winex11.drv/keyboard.c
@@ -1446,7 +1446,7 @@ BOOL X11DRV_KeyEvent( HWND hwnd, XEvent *xev )
     TRACE_(key)("type %d, window %lx, state 0x%04x, keycode %u\n",
 		event->type, event->window, event->state, event->keycode);
 
-    if (event->type == KeyPress) update_user_time( event->time );
+    if (event->type == KeyPress) set_window_user_time( event->display, event->window, event->time );
 
     pthread_mutex_lock( &kbd_mutex );
 
diff --git a/dlls/winex11.drv/mouse.c b/dlls/winex11.drv/mouse.c
index 75e42f9d2bd..5e1d72b7595 100644
--- a/dlls/winex11.drv/mouse.c
+++ b/dlls/winex11.drv/mouse.c
@@ -1546,7 +1546,7 @@ BOOL X11DRV_ButtonPress( HWND hwnd, XEvent *xev )
     input.mi.time        = x11drv_time_to_ticks( event->time );
     input.mi.dwExtraInfo = 0;
 
-    update_user_time( event->time );
+    set_window_user_time( event->display, event->window, event->time );
     map_event_coords( hwnd, event->window, event->root, event->x_root, event->y_root, &input );
     send_mouse_input( hwnd, event->window, event->state, &input );
     return TRUE;
diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index 1fa241bfebe..089b44d52f5 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -99,10 +99,6 @@ XContext winContext = 0;
 /* X context to associate a struct x11drv_win_data to an hwnd */
 static XContext win_data_context = 0;
 
-/* time of last user event and window where it's stored */
-static Time last_user_time;
-static Window user_time_window;
-
 static const WCHAR foreign_window_prop[] =
     {'_','_','w','i','n','e','_','x','1','1','_','f','o','r','e','i','g','n','_','w','i','n','d','o','w',0};
 static const WCHAR whole_window_prop[] =
@@ -132,7 +128,7 @@ static void remove_startup_notification(Display *display, Window window)
 
     if (!(id = getenv( "DESKTOP_STARTUP_ID" )) || !id[0]) return;
 
-    if ((src = strstr( id, "_TIME" ))) update_user_time( atol( src + 5 ));
+    if ((src = strstr( id, "_TIME" ))) set_window_user_time( display, window, atol( src + 5 ) );
 
     pos = snprintf(message, sizeof(message), "remove: ID=");
     message[pos++] = '"';
@@ -883,11 +879,6 @@ static void set_initial_wm_hints( Display *display, Window window )
 
     XChangeProperty( display, window, x11drv_atom(XdndAware),
                      XA_ATOM, 32, PropModeReplace, (unsigned char*)&dndVersion, 1 );
-
-    update_user_time( 0 );  /* make sure that the user time window exists */
-    if (user_time_window)
-        XChangeProperty( display, window, x11drv_atom(_NET_WM_USER_TIME_WINDOW),
-                         XA_WINDOW, 32, PropModeReplace, (unsigned char *)&user_time_window, 1 );
 }
 
 
@@ -954,28 +945,17 @@ Window init_clip_window(void)
 
 
 /***********************************************************************
- *     update_user_time
+ *     set_window_user_time
  */
-void update_user_time( Time time )
+void set_window_user_time( Display *display, Window window, Time time )
 {
-    if (!user_time_window)
-    {
-        Window win = XCreateWindow( gdi_display, root_window, -1, -1, 1, 1, 0, CopyFromParent,
-                                    InputOnly, CopyFromParent, 0, NULL );
-        if (InterlockedCompareExchangePointer( (void **)&user_time_window, (void *)win, 0 ))
-            XDestroyWindow( gdi_display, win );
-        TRACE( "user time window %lx\n", user_time_window );
-    }
+    if (!window || window == root_window) return;
 
-    if (!time) return;
-    XLockDisplay( gdi_display );
-    if (!last_user_time || (long)(time - last_user_time) > 0)
-    {
-        last_user_time = time;
-        XChangeProperty( gdi_display, user_time_window, x11drv_atom(_NET_WM_USER_TIME),
-                         XA_CARDINAL, 32, PropModeReplace, (unsigned char *)&time, 1 );
-    }
-    XUnlockDisplay( gdi_display );
+    TRACE( "display %p, window %lx, time %lu\n", display, window, time );
+
+    if (time == -1) XDeleteProperty( display, window, x11drv_atom(_NET_WM_USER_TIME) );
+    else XChangeProperty( display, window, x11drv_atom(_NET_WM_USER_TIME), XA_CARDINAL, 32,
+                          PropModeReplace, (unsigned char *)&time, 1 );
 }
 
 static void update_desktop_fullscreen( Display *display )
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 09cb4c3590e..2871c1d99ce 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -671,6 +671,7 @@ extern void vulkan_thread_detach(void);
 
 extern void wait_for_withdrawn_state( HWND hwnd, BOOL set );
 extern Window init_clip_window(void);
+extern void set_window_user_time( Display *display, Window window, Time time );
 extern void update_user_time( Time time );
 extern void read_net_wm_states( Display *display, struct x11drv_win_data *data );
 extern void update_net_wm_states( struct x11drv_win_data *data );
-- 
2.43.0

