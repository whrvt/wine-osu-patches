From f0f91aadbf7cd68b299dc12bed9b5f1c3f68d87a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 8 Mar 2022 14:07:52 +0100
Subject: [PATCH 07/19] winex11.drv: Track SetActiveWindow call time to decide
 focus change type.

If the focus change is caused by a window creation, quickly followed by
a SetActiveWindow call, we should not try to activate the X11 window.

The X11 events may come with a delay, causing spurious active window
changes if there was multiple windows created around the same time.

Some applications have trouble handling them correctly and may try to
minimize as a consequence as they may assume they lost focus.

CW-Bug-Id: #19553
CW-Bug-Id: #19644
Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=2155

 100.0% dlls/winex11.drv/
diff --git a/dlls/winex11.drv/event.c b/dlls/winex11.drv/event.c
index 374be34901f..26a10a61651 100644
--- a/dlls/winex11.drv/event.c
+++ b/dlls/winex11.drv/event.c
@@ -586,10 +586,19 @@ static void set_input_focus( struct x11drv_win_data *data )
 }
 
 
-static HWND find_activatable_window( HWND hwnd, BOOL check )
+static HWND find_activatable_window( HWND hwnd, Time time, BOOL check )
 {
+    struct x11drv_thread_data *thread_data = x11drv_thread_data();
+    int time_since_activation = x11drv_time_to_ticks( time ) - thread_data->activating_time;
+    HWND foreground = NtUserGetForegroundWindow();
     LRESULT result;
 
+    TRACE( "time_since_activation %d, hwnd %p, foreground %p\n", time_since_activation, hwnd, foreground );
+
+    /* prefer Wine foreground window over X11 window if SetActiveWindow was very recently called */
+    if (thread_data->activating_time && time_since_activation < 200) return foreground;
+    thread_data->activating_time = 0;
+
     if (can_activate_window( hwnd ))
     {
         if (!check) return hwnd;
@@ -625,7 +634,7 @@ static void set_focus( Display *display, HWND hwnd, Time time, BOOL check )
     Window window;
     GUITHREADINFO threadinfo;
 
-    if (!(focus = find_activatable_window( hwnd, check ))) return;
+    if (!(focus = find_activatable_window( hwnd, time, check ))) return;
     TRACE( "setting foreground window to %p\n", focus );
     NtUserSetForegroundWindow( hwnd );
 
@@ -1396,6 +1405,23 @@ void wait_for_withdrawn_state( HWND hwnd, BOOL set )
 }
 
 
+/***********************************************************************
+ *      SetActiveWindow  (X11DRV.@)
+ */
+void X11DRV_SetActiveWindow( HWND hwnd, HWND prev )
+{
+    struct x11drv_thread_data *thread_data;
+
+    if (is_virtual_desktop()) return;
+    if (!hwnd || hwnd == NtUserGetDesktopWindow()) return;
+    if (!(thread_data = x11drv_init_thread_data())) return;
+
+    TRACE( "hwnd %p, prev %p\n", hwnd, prev );
+
+    thread_data->activating_time = NtGetTickCount();
+}
+
+
 /*****************************************************************
  *		SetFocus   (X11DRV.@)
  *
diff --git a/dlls/winex11.drv/init.c b/dlls/winex11.drv/init.c
index 57af65561fe..3d0b46c9350 100644
--- a/dlls/winex11.drv/init.c
+++ b/dlls/winex11.drv/init.c
@@ -423,6 +423,7 @@ static const struct user_driver_funcs x11drv_funcs =
     .pProcessEvents = X11DRV_ProcessEvents,
     .pReleaseDC = X11DRV_ReleaseDC,
     .pScrollDC = X11DRV_ScrollDC,
+    .pSetActiveWindow = X11DRV_SetActiveWindow,
     .pSetCapture = X11DRV_SetCapture,
     .pSetDesktopWindow = X11DRV_SetDesktopWindow,
     .pSetFocus = X11DRV_SetFocus,
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 2a68de497fe..a10855805dc 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -236,6 +236,7 @@ extern void X11DRV_GetDC( HDC hdc, HWND hwnd, HWND top, const RECT *win_rect,
                           const RECT *top_rect, DWORD flags );
 extern void X11DRV_ReleaseDC( HWND hwnd, HDC hdc );
 extern BOOL X11DRV_ScrollDC( HDC hdc, INT dx, INT dy, HRGN update );
+extern void X11DRV_SetActiveWindow( HWND hwnd, HWND prev );
 extern void X11DRV_SetCapture( HWND hwnd, UINT flags );
 extern void X11DRV_SetDesktopWindow( HWND hwnd );
 extern void X11DRV_SetLayeredWindowAttributes( HWND hwnd, COLORREF key, BYTE alpha,
@@ -388,6 +389,7 @@ struct x11drv_thread_data
     HWND     grab_hwnd;            /* window that currently grabs the mouse */
     HWND     last_focus;           /* last window that had focus */
     HWND     keymapnotify_hwnd;    /* window that should receive modifier release events */
+    DWORD    activating_time;      /* time of the last SetActiveWindow call */
     XIM      xim;                  /* input method */
     HWND     last_xic_hwnd;        /* last xic window */
     XFontSet font_set;             /* international text drawing font set */
-- 
2.43.0

