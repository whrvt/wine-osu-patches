From a0642db0c5a57d93c66193a14a8eb4da28f84359 Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Mon, 16 Dec 2024 00:43:14 -0800
Subject: [PATCH] fsync: Don't spin on zero timeouts, and fix
 try_wait_semaphore logic.

---
 dlls/ntdll/unix/fsync.c | 28 +++++++++++++---------------
 1 file changed, 13 insertions(+), 15 deletions(-)

diff --git a/dlls/ntdll/unix/fsync.c b/dlls/ntdll/unix/fsync.c
index 9831fa4e8ee..307f891eb9d 100644
--- a/dlls/ntdll/unix/fsync.c
+++ b/dlls/ntdll/unix/fsync.c
@@ -880,7 +880,7 @@ static inline NTSTATUS try_wait_value( volatile int *addr, int expected_val,
 }
 
 static inline BOOL try_reacquire_mutex( struct mutex *mutex, int current_tid,
-                                        int *observed_tid )
+                                        int *observed_tid, BOOL zero_timeout )
 {
     int tid = *observed_tid;
 
@@ -900,7 +900,7 @@ static inline BOOL try_reacquire_mutex( struct mutex *mutex, int current_tid,
         mutex->count = 1;
         return TRUE;
     }
-    if (try_wait_value( &mutex->tid, tid, &tid, MUTEX_MON_TIMEOUT ) == STATUS_SUCCESS)
+    if (!zero_timeout && try_wait_value( &mutex->tid, tid, &tid, MUTEX_MON_TIMEOUT ) == STATUS_SUCCESS)
     {
         *observed_tid = tid;
         return TRUE;
@@ -908,26 +908,23 @@ static inline BOOL try_reacquire_mutex( struct mutex *mutex, int current_tid,
     return FALSE; /* fall back to futex */
 }
 
-static inline BOOL try_acquire_semaphore( struct semaphore *semaphore )
+static inline BOOL try_acquire_semaphore( struct semaphore *semaphore, BOOL zero_timeout )
 {
     int count, new_count;
 
     new_count = __atomic_load_n( &semaphore->count, __ATOMIC_SEQ_CST );
-    while ((count = new_count) > 0)
+    while ((count = new_count))
     {
         if ((new_count = __sync_val_compare_and_swap( &semaphore->count,
                                                       count, count - 1 )) == count)
         {
             return TRUE;
         }
-
-        if (!new_count &&
-            try_wait_value( &semaphore->count, 0, &new_count, SEM_MON_TIMEOUT ) == STATUS_SUCCESS)
+        if (!zero_timeout &&
+            try_wait_value( &semaphore->count, new_count, &new_count, SEM_MON_TIMEOUT ) == STATUS_SUCCESS)
         {
             continue;
         }
-
-        break;
     }
     return FALSE;
 }
@@ -941,7 +938,7 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
 
     struct futex_waitv futexes[MAXIMUM_WAIT_OBJECTS + 1];
     struct fsync objs[MAXIMUM_WAIT_OBJECTS];
-    BOOL msgwait = FALSE, waited = FALSE;
+    BOOL msgwait = FALSE, waited = FALSE, zero_timeout = FALSE;
     int has_fsync = 0, has_server = 0;
     clockid_t clock_id = 0;
     struct timespec64 end;
@@ -969,6 +966,7 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
     }
 
     get_wait_end_time( &timeout, &end, &clock_id );
+    zero_timeout = timeout && !timeout->QuadPart;
 
     for (i = 0; i < count; i++)
     {
@@ -1050,7 +1048,7 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                     {
                         struct semaphore *semaphore = obj->shm;
 
-                        if (try_acquire_semaphore( semaphore ))
+                        if (try_acquire_semaphore( semaphore, zero_timeout ))
                         {
                             TRACE("Woken up by handle %p [%d].\n", handles[i], i);
                             return i;
@@ -1072,7 +1070,7 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                         }
 
                         tid = __atomic_load_n( &mutex->tid, __ATOMIC_SEQ_CST );
-                        if (try_reacquire_mutex( mutex, current_tid, &tid ))
+                        if (try_reacquire_mutex( mutex, current_tid, &tid, zero_timeout ))
                         {
                             TRACE("Woken up by handle %p [%d].\n", handles[i], i);
                             return (tid == ~0) ? STATUS_ABANDONED_WAIT_0 + i : i;
@@ -1093,7 +1091,7 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                             return i;
                         }
 
-                        if (try_wait_value( &event->signaled, 0, &signaled, AUTO_MON_TIMEOUT ) == STATUS_SUCCESS &&
+                        if (!zero_timeout && try_wait_value( &event->signaled, 0, &signaled, AUTO_MON_TIMEOUT ) == STATUS_SUCCESS &&
                             __sync_val_compare_and_swap( &event->signaled, 1, 0 ))
                         {
                             TRACE("Woken up by handle %p [%d].\n", handles[i], i);
@@ -1116,7 +1114,7 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                             return i;
                         }
 
-                        if (try_wait_value( &event->signaled, 0, &signaled, MANUAL_MON_TIMEOUT ) == STATUS_SUCCESS &&
+                        if (!zero_timeout && try_wait_value( &event->signaled, 0, &signaled, MANUAL_MON_TIMEOUT ) == STATUS_SUCCESS &&
                             signaled)
                         {
                             TRACE("Woken up by handle %p [%d].\n", handles[i], i);
@@ -1146,7 +1144,7 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
 
             /* Looks like everything is contended, so wait. */
 
-            if (timeout && !timeout->QuadPart)
+            if (zero_timeout)
             {
                 /* Unlike esync, we already know that we've timed out, so we
                  * can avoid a syscall. */
-- 
2.47.1

