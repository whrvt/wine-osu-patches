From e9a4987627421320b94a9649ccaf54c19cded442 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Mon, 7 Oct 2024 18:41:50 -0600
Subject: [PATCH 2323/2346] ntdll: Assign completion to thread when wait for
 completion is satisfied.

CW-Bug-Id: #24295
---
 dlls/ntdll/unix/sync.c | 95 ++++++++++++++++++++++++++----------------
 server/completion.c    | 63 +++++++++++++++++++++++-----
 server/protocol.def    | 10 +++++
 3 files changed, 122 insertions(+), 46 deletions(-)

diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index 3366dc8c539..8b170daa603 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -2032,25 +2032,37 @@ NTSTATUS WINAPI NtRemoveIoCompletion( HANDLE handle, ULONG_PTR *key, ULONG_PTR *
 
     TRACE( "(%p, %p, %p, %p, %p)\n", handle, key, value, io, timeout );
 
-    for (;;)
+    SERVER_START_REQ( remove_completion )
     {
-        SERVER_START_REQ( remove_completion )
+        req->handle = wine_server_obj_handle( handle );
+        if (!(status = wine_server_call( req )))
         {
-            req->handle = wine_server_obj_handle( handle );
-            if (!(status = wine_server_call( req )))
-            {
-                *key            = reply->ckey;
-                *value          = reply->cvalue;
-                io->Information = reply->information;
-                io->Status      = reply->status;
-            }
-            else wait_handle = wine_server_ptr_handle( reply->wait_handle );
+            *key            = reply->ckey;
+            *value          = reply->cvalue;
+            io->Information = reply->information;
+            io->Status      = reply->status;
         }
-        SERVER_END_REQ;
-        if (status != STATUS_PENDING) return status;
-        status = NtWaitForSingleObject( wait_handle, FALSE, timeout );
-        if (status != WAIT_OBJECT_0) return status;
+        else wait_handle = wine_server_ptr_handle( reply->wait_handle );
     }
+    SERVER_END_REQ;
+    if (status != STATUS_PENDING) return status;
+    if (!timeout || timeout->QuadPart) status = NtWaitForSingleObject( wait_handle, FALSE, timeout );
+    else                               status = STATUS_TIMEOUT;
+    if (status != WAIT_OBJECT_0) return status;
+
+    SERVER_START_REQ( get_thread_completion )
+    {
+        if (!(status = wine_server_call( req )))
+        {
+            *key            = reply->ckey;
+            *value          = reply->cvalue;
+            io->Information = reply->information;
+            io->Status      = reply->status;
+        }
+    }
+    SERVER_END_REQ;
+
+    return status;
 }
 
 
@@ -2066,34 +2078,47 @@ NTSTATUS WINAPI NtRemoveIoCompletionEx( HANDLE handle, FILE_IO_COMPLETION_INFORM
 
     TRACE( "%p %p %u %p %p %u\n", handle, info, (int)count, written, timeout, alertable );
 
-    for (;;)
+    while (i < count)
     {
-        while (i < count)
+        SERVER_START_REQ( remove_completion )
         {
-            SERVER_START_REQ( remove_completion )
+            req->handle = wine_server_obj_handle( handle );
+            if (!(status = wine_server_call( req )))
             {
-                req->handle = wine_server_obj_handle( handle );
-                if (!(status = wine_server_call( req )))
-                {
-                    info[i].CompletionKey             = reply->ckey;
-                    info[i].CompletionValue           = reply->cvalue;
-                    info[i].IoStatusBlock.Information = reply->information;
-                    info[i].IoStatusBlock.Status      = reply->status;
-                }
-                else wait_handle = wine_server_ptr_handle( reply->wait_handle );
+                info[i].CompletionKey             = reply->ckey;
+                info[i].CompletionValue           = reply->cvalue;
+                info[i].IoStatusBlock.Information = reply->information;
+                info[i].IoStatusBlock.Status      = reply->status;
             }
-            SERVER_END_REQ;
-            if (status != STATUS_SUCCESS) break;
-            ++i;
+            else wait_handle = wine_server_ptr_handle( reply->wait_handle );
         }
-        if (i || status != STATUS_PENDING)
+        SERVER_END_REQ;
+        if (status != STATUS_SUCCESS) break;
+        ++i;
+    }
+    if (i || status != STATUS_PENDING)
+    {
+        if (i) status = STATUS_SUCCESS;
+        goto done;
+    }
+    if (!timeout || timeout->QuadPart || alertable) status = NtWaitForSingleObject( wait_handle, alertable, timeout );
+    else                                            status = STATUS_TIMEOUT;
+    if (status != WAIT_OBJECT_0) goto done;
+
+    SERVER_START_REQ( get_thread_completion )
+    {
+        if (!(status = wine_server_call( req )))
         {
-            if (status == STATUS_PENDING) status = STATUS_SUCCESS;
-            break;
+            info[i].CompletionKey             = reply->ckey;
+            info[i].CompletionValue           = reply->cvalue;
+            info[i].IoStatusBlock.Information = reply->information;
+            info[i].IoStatusBlock.Status      = reply->status;
+            ++i;
         }
-        status = NtWaitForSingleObject( wait_handle, alertable, timeout );
-        if (status != WAIT_OBJECT_0) break;
     }
+    SERVER_END_REQ;
+
+done:
     *written = i ? i : 1;
     return status;
 }
diff --git a/server/completion.c b/server/completion.c
index fe84deda757..31e9373c725 100644
--- a/server/completion.c
+++ b/server/completion.c
@@ -21,7 +21,6 @@
 
 /* FIXMEs:
  *  - built-in wait queues used which means:
- *    + threads are awaken FIFO and not LIFO as native does
  *    + "max concurrent active threads" parameter not used
  *    + completion handle is waitable, while native isn't
  */
@@ -56,12 +55,22 @@ struct type_descr completion_type =
     },
 };
 
+struct comp_msg
+{
+    struct   list queue_entry;
+    apc_param_t   ckey;
+    apc_param_t   cvalue;
+    apc_param_t   information;
+    unsigned int  status;
+};
+
 struct completion_wait
 {
     struct object      obj;
     obj_handle_t       handle;
     struct completion *completion;
     struct thread     *thread;
+    struct comp_msg   *msg;
     struct list        wait_queue_entry;
 };
 
@@ -75,6 +84,7 @@ struct completion
 
 static void completion_wait_dump( struct object*, int );
 static int completion_wait_signaled( struct object *obj, struct wait_queue_entry *entry );
+static void completion_wait_satisfied( struct object *obj, struct wait_queue_entry *entry );
 static void completion_wait_destroy( struct object * );
 
 static const struct object_ops completion_wait_ops =
@@ -87,7 +97,7 @@ static const struct object_ops completion_wait_ops =
     completion_wait_signaled,       /* signaled */
     NULL,                      /* get_esync_fd */
     NULL,                      /* get_fsync_idx */
-    no_satisfied,                   /* satisfied */
+    completion_wait_satisfied,      /* satisfied */
     no_signal,                      /* signal */
     no_get_fd,                      /* get_fd */
     default_map_access,             /* map_access */
@@ -105,6 +115,9 @@ static const struct object_ops completion_wait_ops =
 
 static void completion_wait_destroy( struct object *obj )
 {
+    struct completion_wait *wait = (struct completion_wait *)obj;
+
+    free( wait->msg );
 }
 
 static void completion_wait_dump( struct object *obj, int verbose )
@@ -123,6 +136,22 @@ static int completion_wait_signaled( struct object *obj, struct wait_queue_entry
     return wait->completion->depth;
 }
 
+static void completion_wait_satisfied( struct object *obj, struct wait_queue_entry *entry )
+{
+    struct completion_wait *wait = (struct completion_wait *)obj;
+    struct list *msg_entry;
+    struct comp_msg *msg;
+
+    assert( obj->ops == &completion_wait_ops );
+    msg_entry = list_head( &wait->completion->queue );
+    assert( msg_entry );
+    msg = LIST_ENTRY( msg_entry, struct comp_msg, queue_entry );
+    --wait->completion->depth;
+    list_remove( &msg->queue_entry );
+    if (wait->msg) free( wait->msg );
+    wait->msg = msg;
+}
+
 static void completion_dump( struct object*, int );
 static int completion_signaled( struct object *obj, struct wait_queue_entry *entry );
 static void completion_destroy( struct object * );
@@ -153,15 +182,6 @@ static const struct object_ops completion_ops =
     completion_destroy         /* destroy */
 };
 
-struct comp_msg
-{
-    struct   list queue_entry;
-    apc_param_t   ckey;
-    apc_param_t   cvalue;
-    apc_param_t   information;
-    unsigned int  status;
-};
-
 static void completion_destroy( struct object *obj)
 {
     struct completion *completion = (struct completion *) obj;
@@ -217,6 +237,7 @@ static struct completion_wait *create_completion_wait( struct completion *comple
     if (!(wait = alloc_object( &completion_wait_ops ))) return NULL;
     wait->completion = completion;
     wait->thread = thread;
+    wait->msg = NULL;
     if (!(wait->handle = alloc_handle( current->process, wait, SYNCHRONIZE, 0 )))
     {
         release_object( &wait->obj );
@@ -356,6 +377,26 @@ DECL_HANDLER(remove_completion)
     release_object( completion );
 }
 
+/* get completion after successful waiting for it */
+DECL_HANDLER(get_thread_completion)
+{
+    struct comp_msg *msg;
+
+    if (!current->completion_wait || !(msg = current->completion_wait->msg))
+    {
+        set_error( STATUS_INVALID_HANDLE );
+        return;
+    }
+
+    reply->ckey = msg->ckey;
+    reply->cvalue = msg->cvalue;
+    reply->status = msg->status;
+    reply->information = msg->information;
+    free( msg );
+    current->completion_wait->msg = NULL;
+    if (!current->completion_wait->completion) cleanup_thread_completion( current );
+}
+
 /* get queue depth for completion port */
 DECL_HANDLER(query_completion)
 {
diff --git a/server/protocol.def b/server/protocol.def
index 58f6e2ac19c..5f4bb53041b 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -3852,6 +3852,16 @@ typedef union
 @END
 
 
+/* get completion after successful wait */
+@REQ(get_thread_completion)
+@REPLY
+    apc_param_t   ckey;           /* completion key */
+    apc_param_t   cvalue;         /* completion value */
+    apc_param_t   information;    /* IO_STATUS_BLOCK Information */
+    unsigned int  status;         /* completion result */
+@END
+
+
 /* get completion queue depth */
 @REQ(query_completion)
     obj_handle_t  handle;         /* port handle */
-- 
2.47.0

