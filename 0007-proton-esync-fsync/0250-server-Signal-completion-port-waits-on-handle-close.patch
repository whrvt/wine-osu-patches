From f6b8bdd9a781557c878616bf69eee45ec2477eaa Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Mon, 7 Oct 2024 10:50:51 -0600
Subject: [PATCH 2325/2346] server: Signal completion port waits on handle
 close.

CW-Bug-Id: #24295
---
 server/completion.c | 50 +++++++++++++++++++++++++++++++--------------
 1 file changed, 35 insertions(+), 15 deletions(-)

diff --git a/server/completion.c b/server/completion.c
index 5077935bec2..49acb08a92a 100644
--- a/server/completion.c
+++ b/server/completion.c
@@ -19,11 +19,7 @@
  *
  */
 
-/* FIXMEs:
- *  - built-in wait queues used which means:
- *    + "max concurrent active threads" parameter not used
- *    + completion handle is waitable, while native isn't
- */
+/* FIXME: "max concurrent active threads" parameter is not used */
 
 #include "config.h"
 
@@ -80,6 +76,7 @@ struct completion
     struct list    queue;
     struct list    wait_queue;
     unsigned int   depth;
+    int            closed;
 };
 
 static void completion_wait_dump( struct object*, int );
@@ -133,6 +130,7 @@ static int completion_wait_signaled( struct object *obj, struct wait_queue_entry
     struct completion_wait *wait = (struct completion_wait *)obj;
 
     assert( obj->ops == &completion_wait_ops );
+    if (!wait->completion) return 1;
     return wait->completion->depth;
 }
 
@@ -143,6 +141,11 @@ static void completion_wait_satisfied( struct object *obj, struct wait_queue_ent
     struct comp_msg *msg;
 
     assert( obj->ops == &completion_wait_ops );
+    if (!wait->completion)
+    {
+        make_wait_abandoned( entry );
+        return;
+    }
     msg_entry = list_head( &wait->completion->queue );
     assert( msg_entry );
     msg = LIST_ENTRY( msg_entry, struct comp_msg, queue_entry );
@@ -154,6 +157,7 @@ static void completion_wait_satisfied( struct object *obj, struct wait_queue_ent
 
 static void completion_dump( struct object*, int );
 static int completion_signaled( struct object *obj, struct wait_queue_entry *entry );
+static int completion_close_handle( struct object *obj, struct process *process, obj_handle_t handle );
 static void completion_destroy( struct object * );
 
 static const struct object_ops completion_ops =
@@ -178,27 +182,19 @@ static const struct object_ops completion_ops =
     default_unlink_name,       /* unlink_name */
     no_open_file,              /* open_file */
     no_kernel_obj_list,        /* get_kernel_obj_list */
-    no_close_handle,           /* close_handle */
+    completion_close_handle,   /* close_handle */
     completion_destroy         /* destroy */
 };
 
 static void completion_destroy( struct object *obj)
 {
     struct completion *completion = (struct completion *) obj;
-    struct completion_wait *wait, *wait_next;
     struct comp_msg *tmp, *next;
 
     LIST_FOR_EACH_ENTRY_SAFE( tmp, next, &completion->queue, struct comp_msg, queue_entry )
     {
         free( tmp );
     }
-
-    LIST_FOR_EACH_ENTRY_SAFE( wait, wait_next, &completion->wait_queue, struct completion_wait, wait_queue_entry )
-    {
-        assert( wait->completion );
-        wait->completion = NULL;
-        cleanup_thread_completion( wait->thread );
-    }
 }
 
 static void completion_dump( struct object *obj, int verbose )
@@ -213,7 +209,30 @@ static int completion_signaled( struct object *obj, struct wait_queue_entry *ent
 {
     struct completion *completion = (struct completion *)obj;
 
-    return !list_empty( &completion->queue );
+    return !list_empty( &completion->queue ) || completion->closed;
+}
+
+static int completion_close_handle( struct object *obj, struct process *process, obj_handle_t handle )
+{
+    struct completion *completion = (struct completion *)obj;
+    struct completion_wait *wait, *wait_next;
+
+    if (completion->obj.handle_count != 1) return 1;
+
+    LIST_FOR_EACH_ENTRY_SAFE( wait, wait_next, &completion->wait_queue, struct completion_wait, wait_queue_entry )
+    {
+        assert( wait->completion );
+        wait->completion = NULL;
+        list_remove( &wait->wait_queue_entry );
+        if (!wait->msg)
+        {
+            wake_up( &wait->obj, 0 );
+            cleanup_thread_completion( wait->thread );
+        }
+    }
+    completion->closed = 1;
+    wake_up( obj, 0 );
+    return 1;
 }
 
 void cleanup_thread_completion( struct thread *thread )
@@ -260,6 +279,7 @@ static struct completion *create_completion( struct object *root, const struct u
             list_init( &completion->queue );
             list_init( &completion->wait_queue );
             completion->depth = 0;
+            completion->closed = 0;
         }
     }
 
-- 
2.47.0

