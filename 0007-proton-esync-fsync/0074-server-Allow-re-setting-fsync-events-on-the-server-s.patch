From 7fe825927c7e83008777e458304d3273df64cd6e Mon Sep 17 00:00:00 2001
From: Zebediah Figura <z.figura12@gmail.com>
Date: Sat, 1 Sep 2018 17:44:18 -0500
Subject: [PATCH 0500/2346] server: Allow (re)setting fsync events on the
 server side.

---
 server/event.c | 16 ++++++++++++++++
 server/fsync.c | 19 ++++++++++++++++++-
 server/fsync.h |  6 ++++++
 3 files changed, 40 insertions(+), 1 deletion(-)

diff --git a/server/event.c b/server/event.c
index 9acd7fa263c..aa1b0a4002a 100644
--- a/server/event.c
+++ b/server/event.c
@@ -175,6 +175,10 @@ struct event *create_event( struct object *root, const struct unicode_str *name,
 struct event *get_event_obj( struct process *process, obj_handle_t handle, unsigned int access )
 {
     struct object *obj;
+
+    if (do_fsync() && (obj = get_handle_obj( process, handle, access, &fsync_ops)))
+        return (struct event *)obj; /* even though it's not an event */
+
     if (do_esync() && (obj = get_handle_obj( process, handle, access, &esync_ops)))
         return (struct event *)obj; /* even though it's not an event */
 
@@ -194,6 +198,12 @@ static void pulse_event( struct event *event )
 
 void set_event( struct event *event )
 {
+    if (do_fsync() && event->obj.ops == &fsync_ops)
+    {
+        fsync_set_event( (struct fsync *)event );
+        return;
+    }
+
     if (do_esync() && event->obj.ops == &esync_ops)
     {
         esync_set_event( (struct esync *)event );
@@ -207,6 +217,12 @@ void set_event( struct event *event )
 
 void reset_event( struct event *event )
 {
+    if (do_fsync() && event->obj.ops == &fsync_ops)
+    {
+        fsync_reset_event( (struct fsync *)event );
+        return;
+    }
+
     if (do_esync() && event->obj.ops == &esync_ops)
     {
         esync_reset_event( (struct esync *)event );
diff --git a/server/fsync.c b/server/fsync.c
index 07c0367d02c..1d6a49fb517 100644
--- a/server/fsync.c
+++ b/server/fsync.c
@@ -132,7 +132,7 @@ struct fsync
 static void fsync_dump( struct object *obj, int verbose );
 static void fsync_destroy( struct object *obj );
 
-static const struct object_ops fsync_ops =
+const struct object_ops fsync_ops =
 {
     sizeof(struct fsync),      /* size */
     &no_type,                  /* type */
@@ -305,6 +305,23 @@ void fsync_clear( struct object *obj )
     }
 }
 
+void fsync_set_event( struct fsync *fsync )
+{
+    struct fsync_event *event = get_shm( fsync->shm_idx );
+    assert( fsync->obj.ops == &fsync_ops );
+
+    if (!__atomic_exchange_n( &event->signaled, 1, __ATOMIC_SEQ_CST ))
+        futex_wake( &event->signaled, INT_MAX );
+}
+
+void fsync_reset_event( struct fsync *fsync )
+{
+    struct fsync_event *event = get_shm( fsync->shm_idx );
+    assert( fsync->obj.ops == &fsync_ops );
+
+    __atomic_store_n( &event->signaled, 0, __ATOMIC_SEQ_CST );
+}
+
 DECL_HANDLER(create_fsync)
 {
     struct fsync *fsync;
diff --git a/server/fsync.h b/server/fsync.h
index 2ff98cb64cb..087d482717b 100644
--- a/server/fsync.h
+++ b/server/fsync.h
@@ -23,3 +23,9 @@ extern void fsync_init(void);
 extern unsigned int fsync_alloc_shm( int low, int high );
 extern void fsync_wake_up( struct object *obj );
 extern void fsync_clear( struct object *obj );
+
+struct fsync;
+
+extern const struct object_ops fsync_ops;
+extern void fsync_set_event( struct fsync *fsync );
+extern void fsync_reset_event( struct fsync *fsync );
-- 
2.47.0

