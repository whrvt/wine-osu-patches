From f5c817d06cb7dac545a35c790919ef0be3dddfca Mon Sep 17 00:00:00 2001
From: Zebediah Figura <z.figura12@gmail.com>
Date: Sun, 3 Mar 2019 11:44:00 -0600
Subject: [PATCH 0524/2346] server: Create futex sections for true file objects
 and use them for directory change notifications.

---
 server/change.c |  2 +-
 server/fd.c     |  3 +++
 server/fsync.c  | 13 ++++++++++++-
 3 files changed, 16 insertions(+), 2 deletions(-)

diff --git a/server/change.c b/server/change.c
index 8e19fc4bc2b..22cf041ca80 100644
--- a/server/change.c
+++ b/server/change.c
@@ -113,7 +113,7 @@ static const struct object_ops dir_ops =
     remove_queue,             /* remove_queue */
     default_fd_signaled,      /* signaled */
     default_fd_get_esync_fd,  /* get_esync_fd */
-    NULL,                     /* get_fsync_idx */
+    default_fd_get_fsync_idx, /* get_fsync_idx */
     no_satisfied,             /* satisfied */
     no_signal,                /* signal */
     dir_get_fd,               /* get_fd */
diff --git a/server/fd.c b/server/fd.c
index 2999e3b7395..c85d25e9566 100644
--- a/server/fd.c
+++ b/server/fd.c
@@ -1708,6 +1708,9 @@ static struct fd *alloc_fd_object(void)
     if (do_esync())
         fd->esync_fd = esync_create_fd( 1, 0 );
 
+    if (do_fsync())
+        fd->fsync_idx = fsync_alloc_shm( 1, 0 );
+
     if ((fd->poll_index = add_poll_user( fd )) == -1)
     {
         release_object( fd );
diff --git a/server/fsync.c b/server/fsync.c
index 10d8eb74bc3..6a67d22d14e 100644
--- a/server/fsync.c
+++ b/server/fsync.c
@@ -85,6 +85,8 @@ static void **shm_addrs;
 static int shm_addrs_size;  /* length of the allocated shm_addrs array */
 static long pagesize;
 
+static int is_fsync_initialized;
+
 static void shm_cleanup(void)
 {
     close( shm_fd );
@@ -120,6 +122,8 @@ void fsync_init(void)
     if (ftruncate( shm_fd, shm_size ) == -1)
         perror( "ftruncate" );
 
+    is_fsync_initialized = 1;
+
     atexit( shm_cleanup );
 }
 
@@ -231,9 +235,16 @@ static unsigned int shm_idx_counter = 1;
 unsigned int fsync_alloc_shm( int low, int high )
 {
 #ifdef __linux__
-    int shm_idx = shm_idx_counter++;
+    int shm_idx;
     int *shm;
 
+    /* this is arguably a bit of a hack, but we need some way to prevent
+     * allocating shm for the master socket */
+    if (!is_fsync_initialized)
+        return 0;
+
+    shm_idx = shm_idx_counter++;
+
     while (shm_idx * 8 >= shm_size)
     {
         /* Better expand the shm section. */
-- 
2.47.0

