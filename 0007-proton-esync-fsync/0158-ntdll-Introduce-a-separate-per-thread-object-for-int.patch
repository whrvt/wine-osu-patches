From 6e106909d6652c1eb6ad92d2df0eaee99ffc8296 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Mon, 7 Oct 2024 18:19:57 -0600
Subject: [PATCH 2322/2346] ntdll: Introduce a separate per-thread object for
 internal completion waits.

CW-Bug-Id: #24295
---
 dlls/ntdll/unix/sync.c |   8 ++-
 server/completion.c    | 120 ++++++++++++++++++++++++++++++++++++++++-
 server/file.h          |   1 +
 server/protocol.def    |   1 +
 server/thread.c        |   2 +
 server/thread.h        |   2 +
 6 files changed, 131 insertions(+), 3 deletions(-)

diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index 14d4b2b9ac2..3366dc8c539 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -2027,6 +2027,7 @@ NTSTATUS WINAPI NtSetIoCompletion( HANDLE handle, ULONG_PTR key, ULONG_PTR value
 NTSTATUS WINAPI NtRemoveIoCompletion( HANDLE handle, ULONG_PTR *key, ULONG_PTR *value,
                                       IO_STATUS_BLOCK *io, LARGE_INTEGER *timeout )
 {
+    HANDLE wait_handle = NULL;
     unsigned int status;
 
     TRACE( "(%p, %p, %p, %p, %p)\n", handle, key, value, io, timeout );
@@ -2043,10 +2044,11 @@ NTSTATUS WINAPI NtRemoveIoCompletion( HANDLE handle, ULONG_PTR *key, ULONG_PTR *
                 io->Information = reply->information;
                 io->Status      = reply->status;
             }
+            else wait_handle = wine_server_ptr_handle( reply->wait_handle );
         }
         SERVER_END_REQ;
         if (status != STATUS_PENDING) return status;
-        status = NtWaitForSingleObject( handle, FALSE, timeout );
+        status = NtWaitForSingleObject( wait_handle, FALSE, timeout );
         if (status != WAIT_OBJECT_0) return status;
     }
 }
@@ -2058,6 +2060,7 @@ NTSTATUS WINAPI NtRemoveIoCompletion( HANDLE handle, ULONG_PTR *key, ULONG_PTR *
 NTSTATUS WINAPI NtRemoveIoCompletionEx( HANDLE handle, FILE_IO_COMPLETION_INFORMATION *info, ULONG count,
                                         ULONG *written, LARGE_INTEGER *timeout, BOOLEAN alertable )
 {
+    HANDLE wait_handle = NULL;
     unsigned int status;
     ULONG i = 0;
 
@@ -2077,6 +2080,7 @@ NTSTATUS WINAPI NtRemoveIoCompletionEx( HANDLE handle, FILE_IO_COMPLETION_INFORM
                     info[i].IoStatusBlock.Information = reply->information;
                     info[i].IoStatusBlock.Status      = reply->status;
                 }
+                else wait_handle = wine_server_ptr_handle( reply->wait_handle );
             }
             SERVER_END_REQ;
             if (status != STATUS_SUCCESS) break;
@@ -2087,7 +2091,7 @@ NTSTATUS WINAPI NtRemoveIoCompletionEx( HANDLE handle, FILE_IO_COMPLETION_INFORM
             if (status == STATUS_PENDING) status = STATUS_SUCCESS;
             break;
         }
-        status = NtWaitForSingleObject( handle, alertable, timeout );
+        status = NtWaitForSingleObject( wait_handle, alertable, timeout );
         if (status != WAIT_OBJECT_0) break;
     }
     *written = i ? i : 1;
diff --git a/server/completion.c b/server/completion.c
index 33266c596da..fe84deda757 100644
--- a/server/completion.c
+++ b/server/completion.c
@@ -56,13 +56,73 @@ struct type_descr completion_type =
     },
 };
 
+struct completion_wait
+{
+    struct object      obj;
+    obj_handle_t       handle;
+    struct completion *completion;
+    struct thread     *thread;
+    struct list        wait_queue_entry;
+};
+
 struct completion
 {
     struct object  obj;
     struct list    queue;
+    struct list    wait_queue;
     unsigned int   depth;
 };
 
+static void completion_wait_dump( struct object*, int );
+static int completion_wait_signaled( struct object *obj, struct wait_queue_entry *entry );
+static void completion_wait_destroy( struct object * );
+
+static const struct object_ops completion_wait_ops =
+{
+    sizeof(struct completion_wait), /* size */
+    &no_type,                       /* type */
+    completion_wait_dump,           /* dump */
+    add_queue,                      /* add_queue */
+    remove_queue,                   /* remove_queue */
+    completion_wait_signaled,       /* signaled */
+    NULL,                      /* get_esync_fd */
+    NULL,                      /* get_fsync_idx */
+    no_satisfied,                   /* satisfied */
+    no_signal,                      /* signal */
+    no_get_fd,                      /* get_fd */
+    default_map_access,             /* map_access */
+    default_get_sd,                 /* get_sd */
+    default_set_sd,                 /* set_sd */
+    no_get_full_name,               /* get_full_name */
+    no_lookup_name,                 /* lookup_name */
+    no_link_name,                   /* link_name */
+    NULL,                           /* unlink_name */
+    no_open_file,                   /* open_file */
+    no_kernel_obj_list,             /* get_kernel_obj_list */
+    no_close_handle,                /* close_handle */
+    completion_wait_destroy         /* destroy */
+};
+
+static void completion_wait_destroy( struct object *obj )
+{
+}
+
+static void completion_wait_dump( struct object *obj, int verbose )
+{
+    struct completion_wait *wait = (struct completion_wait *)obj;
+
+    assert( obj->ops == &completion_wait_ops );
+    fprintf( stderr, "Completion wait completion=%p\n", wait->completion );
+}
+
+static int completion_wait_signaled( struct object *obj, struct wait_queue_entry *entry )
+{
+    struct completion_wait *wait = (struct completion_wait *)obj;
+
+    assert( obj->ops == &completion_wait_ops );
+    return wait->completion->depth;
+}
+
 static void completion_dump( struct object*, int );
 static int completion_signaled( struct object *obj, struct wait_queue_entry *entry );
 static void completion_destroy( struct object * );
@@ -105,12 +165,20 @@ struct comp_msg
 static void completion_destroy( struct object *obj)
 {
     struct completion *completion = (struct completion *) obj;
+    struct completion_wait *wait, *wait_next;
     struct comp_msg *tmp, *next;
 
     LIST_FOR_EACH_ENTRY_SAFE( tmp, next, &completion->queue, struct comp_msg, queue_entry )
     {
         free( tmp );
     }
+
+    LIST_FOR_EACH_ENTRY_SAFE( wait, wait_next, &completion->wait_queue, struct completion_wait, wait_queue_entry )
+    {
+        assert( wait->completion );
+        wait->completion = NULL;
+        cleanup_thread_completion( wait->thread );
+    }
 }
 
 static void completion_dump( struct object *obj, int verbose )
@@ -128,6 +196,36 @@ static int completion_signaled( struct object *obj, struct wait_queue_entry *ent
     return !list_empty( &completion->queue );
 }
 
+void cleanup_thread_completion( struct thread *thread )
+{
+    if (!thread->completion_wait) return;
+
+    if (thread->completion_wait->handle)
+    {
+        close_handle( thread->process, thread->completion_wait->handle );
+        thread->completion_wait->handle = 0;
+    }
+    if (thread->completion_wait->completion) list_remove( &thread->completion_wait->wait_queue_entry );
+    release_object( &thread->completion_wait->obj );
+    thread->completion_wait = NULL;
+}
+
+static struct completion_wait *create_completion_wait( struct completion *completion, struct thread *thread )
+{
+    struct completion_wait *wait;
+
+    if (!(wait = alloc_object( &completion_wait_ops ))) return NULL;
+    wait->completion = completion;
+    wait->thread = thread;
+    if (!(wait->handle = alloc_handle( current->process, wait, SYNCHRONIZE, 0 )))
+    {
+        release_object( &wait->obj );
+        return NULL;
+    }
+    list_add_head( &completion->wait_queue, &wait->wait_queue_entry );
+    return wait;
+}
+
 static struct completion *create_completion( struct object *root, const struct unicode_str *name,
                                              unsigned int attr, unsigned int concurrent,
                                              const struct security_descriptor *sd )
@@ -139,6 +237,7 @@ static struct completion *create_completion( struct object *root, const struct u
         if (get_error() != STATUS_OBJECT_NAME_EXISTS)
         {
             list_init( &completion->queue );
+            list_init( &completion->wait_queue );
             completion->depth = 0;
         }
     }
@@ -155,6 +254,7 @@ void add_completion( struct completion *completion, apc_param_t ckey, apc_param_
                      unsigned int status, apc_param_t information )
 {
     struct comp_msg *msg = mem_alloc( sizeof( *msg ) );
+    struct completion_wait *wait;
 
     if (!msg)
         return;
@@ -166,7 +266,12 @@ void add_completion( struct completion *completion, apc_param_t ckey, apc_param_
 
     list_add_tail( &completion->queue, &msg->queue_entry );
     completion->depth++;
-    wake_up( &completion->obj, 1 );
+    LIST_FOR_EACH_ENTRY( wait, &completion->wait_queue, struct completion_wait, wait_queue_entry )
+    {
+        wake_up( &wait->obj, 1 );
+        if (list_empty( &completion->queue )) return;
+    }
+    if (!list_empty( &completion->queue )) wake_up( &completion->obj, 0 );
 }
 
 /* create a completion */
@@ -221,8 +326,20 @@ DECL_HANDLER(remove_completion)
     if (!completion) return;
 
     entry = list_head( &completion->queue );
+    if (current->completion_wait && current->completion_wait->completion != completion)
+        cleanup_thread_completion( current );
+    if (!current->completion_wait && !(current->completion_wait = create_completion_wait( completion, current )))
+    {
+        release_object( completion );
+        return;
+    }
     if (!entry)
+    {
+        list_remove( &current->completion_wait->wait_queue_entry );
+        list_add_head( &completion->wait_queue, &current->completion_wait->wait_queue_entry );
+        reply->wait_handle = current->completion_wait->handle;
         set_error( STATUS_PENDING );
+    }
     else
     {
         list_remove( entry );
@@ -233,6 +350,7 @@ DECL_HANDLER(remove_completion)
         reply->status = msg->status;
         reply->information = msg->information;
         free( msg );
+        reply->wait_handle = 0;
     }
 
     release_object( completion );
diff --git a/server/file.h b/server/file.h
index 91b68ecb8ac..8f0957ec8d5 100644
--- a/server/file.h
+++ b/server/file.h
@@ -230,6 +230,7 @@ extern struct dir *get_dir_obj( struct process *process, obj_handle_t handle, un
 extern struct completion *get_completion_obj( struct process *process, obj_handle_t handle, unsigned int access );
 extern void add_completion( struct completion *completion, apc_param_t ckey, apc_param_t cvalue,
                             unsigned int status, apc_param_t information );
+extern void cleanup_thread_completion( struct thread *thread );
 
 /* serial port functions */
 
diff --git a/server/protocol.def b/server/protocol.def
index 3d90d7e1c0f..58f6e2ac19c 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -3848,6 +3848,7 @@ typedef union
     apc_param_t   cvalue;         /* completion value */
     apc_param_t   information;    /* IO_STATUS_BLOCK Information */
     unsigned int  status;         /* completion result */
+    obj_handle_t  wait_handle;    /* handle to completion wait internal object */
 @END
 
 
diff --git a/server/thread.c b/server/thread.c
index ab67a7a9044..71c00fb6e35 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -298,6 +298,7 @@ static inline void init_thread_structure( struct thread *thread )
 
     thread->creation_time = current_time;
     thread->exit_time     = 0;
+    thread->completion_wait = NULL;
 
     list_init( &thread->mutex_list );
     list_init( &thread->system_apc );
@@ -527,6 +528,7 @@ static void cleanup_thread( struct thread *thread )
 {
     int i;
 
+    cleanup_thread_completion( thread );
     if (thread->context)
     {
         thread->context->status = STATUS_ACCESS_DENIED;
diff --git a/server/thread.h b/server/thread.h
index 041eb000171..416b01db318 100644
--- a/server/thread.h
+++ b/server/thread.h
@@ -31,6 +31,7 @@ struct thread_apc;
 struct debug_obj;
 struct debug_event;
 struct msg_queue;
+struct completion_wait;
 
 enum run_state
 {
@@ -98,6 +99,7 @@ struct thread
     data_size_t            desc_len;      /* thread description length in bytes */
     WCHAR                 *desc;          /* thread description string */
     struct timeout_user   *exit_poll;     /* poll if the thread/process has exited already */
+    struct completion_wait *completion_wait; /* completion port wait object the thread is associated with */
 };
 
 extern struct thread *current;
-- 
2.47.0

