From de1be473e51741a6c9d95e17455f7d4a70d00444 Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Sun, 3 Nov 2024 20:53:27 -0800
Subject: [PATCH 2/3] fsync: clean up hacks

---
 dlls/ntdll/unix/fsync.c | 24 ------------------------
 1 file changed, 24 deletions(-)

diff --git a/dlls/ntdll/unix/fsync.c b/dlls/ntdll/unix/fsync.c
index 020a20b1688..90ed801f11e 100644
--- a/dlls/ntdll/unix/fsync.c
+++ b/dlls/ntdll/unix/fsync.c
@@ -138,15 +138,6 @@ static inline void futex_vector_set( struct futex_waitv *waitv, int *addr, int v
     waitv->__reserved = 0;
 }
 
-static void simulate_sched_quantum(void)
-{
-    if (!fsync_simulate_sched_quantum) return;
-    /* futex wait is often very quick to resume a waiting thread when woken.
-     * That reveals synchonization bugs in some games which happen to work on
-     * Windows due to the waiting threads having some minimal delay to wake up. */
-    usleep(0);
-}
-
 static inline int futex_wait_multiple( const struct futex_waitv *futexes,
         int count, const struct timespec64 *end, clockid_t clock_id )
 {
@@ -886,8 +877,6 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                             if ((new = __sync_val_compare_and_swap( &semaphore->count, current, current - 1 )) == current)
                             {
                                 TRACE("Woken up by handle %p [%d].\n", handles[i], i);
-                                if (waited) simulate_sched_quantum();
-
                                 return i;
                             }
                         }
@@ -903,7 +892,6 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                         {
                             TRACE("Woken up by handle %p [%d].\n", handles[i], i);
                             mutex->count++;
-                            if (waited) simulate_sched_quantum();
                             return i;
                         }
 
@@ -911,7 +899,6 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                         {
                             TRACE("Woken up by handle %p [%d].\n", handles[i], i);
                             mutex->count = 1;
-                            if (waited) simulate_sched_quantum();
                             return i;
                         }
                         else if (tid == ~0 && (tid = __sync_val_compare_and_swap( &mutex->tid, ~0, current_tid )) == ~0)
@@ -931,11 +918,7 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
 
                         if (__sync_val_compare_and_swap( &event->signaled, 1, 0 ))
                         {
-                            if (ac_odyssey && alertable)
-                                usleep( 0 );
-
                             TRACE("Woken up by handle %p [%d].\n", handles[i], i);
-                            if (waited) simulate_sched_quantum();
                             return i;
                         }
                         futex_vector_set( &futexes[i], &event->signaled, 0 );
@@ -949,11 +932,7 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
 
                         if (__atomic_load_n( &event->signaled, __ATOMIC_SEQ_CST ))
                         {
-                            if (ac_odyssey && alertable)
-                                usleep( 0 );
-
                             TRACE("Woken up by handle %p [%d].\n", handles[i], i);
-                            if (waited) simulate_sched_quantum();
                             return i;
                         }
                         futex_vector_set( &futexes[i], &event->signaled, 0 );
@@ -980,9 +959,6 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
 
             /* Looks like everything is contended, so wait. */
 
-            if (ac_odyssey && alertable)
-                usleep( 0 );
-
             if (timeout && !timeout->QuadPart)
             {
                 /* Unlike esync, we already know that we've timed out, so we
-- 
2.47.0

