From 5375ae3fff6ea70249c236ef1c1d22a40e805f6d Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Mon, 28 Oct 2024 11:16:48 -0700
Subject: [PATCH] fsync: Add compatibility macros for missing compiler builtins
 on 32-bit clang.

---
 dlls/ntdll/unix/fsync.c |   1 -
 dlls/ntdll/unix/fsync.h | 171 ++++++++++++++++++++++++++++++++++++++++
 2 files changed, 171 insertions(+), 1 deletion(-)

diff --git a/dlls/ntdll/unix/fsync.c b/dlls/ntdll/unix/fsync.c
index c3da44e4f26..835a6bd945b 100644
--- a/dlls/ntdll/unix/fsync.c
+++ b/dlls/ntdll/unix/fsync.c
@@ -42,7 +42,6 @@
 # include <linux/futex.h>
 #endif
 #include <unistd.h>
-#include <stdint.h>
 
 #include "ntstatus.h"
 #define WIN32_NO_STATUS
diff --git a/dlls/ntdll/unix/fsync.h b/dlls/ntdll/unix/fsync.h
index 6005c0fa322..861eadb5365 100644
--- a/dlls/ntdll/unix/fsync.h
+++ b/dlls/ntdll/unix/fsync.h
@@ -52,3 +52,124 @@ extern NTSTATUS fsync_signal_and_wait( HANDLE signal, HANDLE wait,
  * called from NtClose() doesn't race with get_fsync_idx(), add_to_list() sequence called
  * from get_object(). */
 extern pthread_mutex_t fd_cache_mutex;
+
+#include <stdint.h>
+
+#if defined(__i386__) && defined(__clang__) && defined(__linux__)
+
+/* 32-bit atomics using x86 locked instructions */
+#define __atomic_load_n_32bits(ptr) ({ \
+    uint32_t _val; \
+    __asm__ __volatile__( \
+        "movl %1, %0" \
+        : "=r" (_val) \
+        : "m" (*(ptr)) \
+        : "memory"); \
+    _val; \
+})
+
+#define __atomic_store_n_32bits(ptr, val) ({ \
+    uint32_t _new = (val); \
+    __asm__ __volatile__( \
+        "movl %1, %0" \
+        : "=m" (*(ptr)) \
+        : "r" (_new) \
+        : "memory"); \
+})
+
+#define __atomic_exchange_32bits(ptr, val) ({ \
+    uint32_t _new = (val); \
+    __asm__ __volatile__( \
+        "xchgl %0, %1" \
+        : "+r" (_new), \
+          "+m" (*(ptr)) \
+        :: "memory"); \
+    _new; \
+})
+
+/* SSE2 64-bit atomics using cmpxchg8b */
+#define __atomic_load_n_64bits(ptr) ({ \
+    uint64_t _result; \
+    __asm__ __volatile__( \
+        "movq %1, %%mm0\n\t" \
+        "movq %%mm0, %0\n\t" \
+        "emms" \
+        : "=m" (_result) \
+        : "m" (*(ptr)) \
+        : "memory"); \
+    _result; \
+})
+
+#define __atomic_store_n_64bits(ptr, val) ({ \
+    uint64_t _val = (val); \
+    uint64_t* _ptr = (ptr); \
+    __asm__ __volatile__( \
+        "movq %1, %%mm0\n\t" \
+        "movd %%mm0, %%ebx\n\t" \
+        "psrlq $32, %%mm0\n\t" \
+        "movd %%mm0, %%ecx\n\t" \
+        ".align 16\n\t" \
+        "1:\n\t" \
+        "movq (%2), %%mm1\n\t" \
+        "movd %%mm1, %%eax\n\t" \
+        "psrlq $32, %%mm1\n\t" \
+        "movd %%mm1, %%edx\n\t" \
+        "lock cmpxchg8b (%2)\n\t" \
+        "jnz 1b\n\t" \
+        "emms" \
+        :: "m" (_val), \
+           "m" (_val), \
+           "r" (_ptr) \
+        : "eax", "ebx", "ecx", "edx", "memory"); \
+})
+
+#define __atomic_exchange_64bits(ptr, val) ({ \
+    uint64_t _old; \
+    uint64_t _val = (val); \
+    uint64_t* _ptr = (ptr); \
+    __asm__ __volatile__( \
+        "movq %1, %%mm0\n\t" \
+        "movd %%mm0, %%ebx\n\t" \
+        "psrlq $32, %%mm0\n\t" \
+        "movd %%mm0, %%ecx\n\t" \
+        ".align 16\n\t" \
+        "1:\n\t" \
+        "movq (%2), %%mm1\n\t" \
+        "movd %%mm1, %%eax\n\t" \
+        "psrlq $32, %%mm1\n\t" \
+        "movd %%mm1, %%edx\n\t" \
+        "lock cmpxchg8b (%2)\n\t" \
+        "jnz 1b\n\t" \
+        "movd %%eax, %%mm0\n\t" \
+        "movd %%edx, %%mm1\n\t" \
+        "psllq $32, %%mm1\n\t" \
+        "por %%mm1, %%mm0\n\t" \
+        "movq %%mm0, %0\n\t" \
+        "emms" \
+        : "=m" (_old) \
+        : "m" (_val), \
+          "r" (_ptr) \
+        : "eax", "ebx", "ecx", "edx", "memory"); \
+    _old; \
+})
+
+/* wrappers for the actual missing intrinsics */
+#define __atomic_load_n(ptr, order) \
+    __builtin_choose_expr(sizeof(*(ptr)) == 8, \
+        __atomic_load_n_64bits((ptr)), \
+        __atomic_load_n_32bits((ptr)))
+
+#define __atomic_store_n(ptr, val, order) \
+    __builtin_choose_expr(sizeof(*(ptr)) == 8, \
+        __atomic_store_n_64bits((ptr), (val)), \
+        __atomic_store_n_32bits((ptr), (val)))
+
+#define __atomic_exchange_n(ptr, val, order) \
+    __builtin_choose_expr(sizeof(*(ptr)) == 8, \
+        __atomic_exchange_64bits((ptr), (val)), \
+        __atomic_exchange_32bits((ptr), (val)))
+
+#define __atomic_exchange(ptr, val, order) \
+    __atomic_exchange_n((ptr), (val), (order))
+
+#endif
-- 
2.47.0

