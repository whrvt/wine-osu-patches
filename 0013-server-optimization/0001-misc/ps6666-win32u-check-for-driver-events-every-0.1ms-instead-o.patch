From: William Horvath <william@horvath.blog>
Date: Mon, 9 Dec 2024 03:26:27 -0800
Subject: [PATCH] win32u: check for driver events every 0.1ms instead of 1ms

alternative workaround for https://bugs.winehq.org/show_bug.cgi?id=57442

v2: use fast USD (it's updating at 0.1ms anyways) instead of yet another clock_gettime call
---
 dlls/win32u/message.c | 15 ++++++++++++---
 1 file changed, 12 insertions(+), 3 deletions(-)

diff --git a/dlls/win32u/message.c b/dlls/win32u/message.c
index 11111111111..11111111111 100644
--- a/dlls/win32u/message.c
+++ b/dlls/win32u/message.c
@@ -26,6 +26,8 @@
 
 #include <assert.h>
 #include "ntstatus.h"
+#include "winternl.h"
+#include "ddk/wdm.h"
 #define WIN32_NO_STATUS
 #include "win32u_private.h"
 #include "ntuser_private.h"
@@ -40,6 +42,8 @@ WINE_DEFAULT_DEBUG_CHANNEL(msg);
 WINE_DECLARE_DEBUG_CHANNEL(key);
 WINE_DECLARE_DEBUG_CHANNEL(relay);
 
+static const struct _KUSER_SHARED_DATA *user_shared_data = (struct _KUSER_SHARED_DATA *)0x7ffe0000;
+
 #define MAX_WINPROC_RECURSION  64
 
 #define WM_NCMOUSEFIRST WM_NCMOUSEMOVE
@@ -354,6 +358,11 @@ static const unsigned int message_pointer_flags[] =
     SET(WM_ASKCBFORMATNAME)
 };
 
+static inline DWORD __wine_get_hires_tick_count(void)
+{
+    return (DWORD)(user_shared_data->InterruptTime.LowPart / 1000);
+}
+
 /* check whether a given message type includes pointers */
 static inline BOOL is_pointer_message( UINT message, WPARAM wparam )
 {
@@ -3064,11 +3073,11 @@ static HANDLE get_server_queue_handle(void)
 /* check for driver events if we detect that the app is not properly consuming messages */
 static inline void check_for_driver_events(void)
 {
-    if (get_user_thread_info()->last_driver_time != NtGetTickCount())
+    if (get_user_thread_info()->last_driver_time != __wine_get_hires_tick_count())
     {
         flush_window_surfaces( FALSE );
         user_driver->pProcessEvents( QS_ALLINPUT );
-        get_user_thread_info()->last_driver_time = NtGetTickCount();
+        get_user_thread_info()->last_driver_time = __wine_get_hires_tick_count();
     }
 }
 
@@ -3110,7 +3119,7 @@ static DWORD wait_message( DWORD count, const HANDLE *handles, DWORD timeout, DW
     }
 
     if (ret == WAIT_TIMEOUT && !count && !timeout) NtYieldExecution();
-    if (ret == count - 1) get_user_thread_info()->last_driver_time = NtGetTickCount();
+    if (ret == count - 1) get_user_thread_info()->last_driver_time = __wine_get_hires_tick_count();
 
     KeUserDispatchCallback( &params.dispatch, sizeof(params), &ret_ptr, &ret_len );
 
-- 
0.0.0

