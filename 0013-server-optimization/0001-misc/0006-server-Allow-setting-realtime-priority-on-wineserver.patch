From 14cb193397177b71e957027f196a5f07a91d5421 Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Mon, 3 Mar 2025 00:56:58 -0800
Subject: [PATCH] server: Allow setting realtime priority on wineserver with an
 environment variable.

A stripped down version of the obsolete wine-staging patch by Joakim Hernberg.
---
 server/Makefile.in |  1 +
 server/main.c      |  1 +
 server/priority.c  | 91 ++++++++++++++++++++++++++++++++++++++++++++++
 server/thread.h    |  2 +
 4 files changed, 95 insertions(+)
 create mode 100644 server/priority.c

diff --git a/server/Makefile.in b/server/Makefile.in
index 6866b847b46..24ad64849bd 100644
--- a/server/Makefile.in
+++ b/server/Makefile.in
@@ -26,6 +26,7 @@ SOURCES = \
 	mutex.c \
 	named_pipe.c \
 	object.c \
+	priority.c \
 	process.c \
 	procfs.c \
 	ptrace.c \
diff --git a/server/main.c b/server/main.c
index 5a198d13423..eb8bda2f053 100644
--- a/server/main.c
+++ b/server/main.c
@@ -242,6 +242,7 @@ int main( int argc, char *argv[] )
 
     if (debug_level) fprintf( stderr, "wineserver: starting (pid=%ld)\n", (long) getpid() );
     set_current_time();
+    set_server_priority();
     init_signals();
     init_memory();
     init_directories( load_intl_file() );
diff --git a/server/priority.c b/server/priority.c
new file mode 100644
index 00000000000..ed7af0adc6b
--- /dev/null
+++ b/server/priority.c
@@ -0,0 +1,91 @@
+/*
+ * Server priority management
+ *
+ * Copyright (C) 2015 Joakim Hernberg
+ * Copyright (C) 2015 Sebastian Lackner
+ * Copyright (C) 2025 William Horvath
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include "config.h"
+
+#include <stdio.h>
+#include <stdarg.h>
+#ifdef HAVE_SYS_RESOURCE_H
+# include <sys/resource.h>
+#endif
+#ifdef HAVE_SCHED_H
+# include <sched.h>
+#endif
+#ifndef SCHED_RESET_ON_FORK
+# define SCHED_RESET_ON_FORK 0x40000000
+#endif
+
+#include "thread.h"
+
+#if defined(__linux__) && defined(HAVE_SYS_RESOURCE_H) && defined(HAVE_SCHED_H)
+
+/* gets the priority value from an environment variable */
+static int get_priority( const char *variable, int min, int max )
+{
+    const char *env;
+    int val;
+
+    env = getenv( variable );
+    if (!env) return -1;
+
+    val = atoi( env );
+    if (val >= min && val <= max) return val;
+    if (debug_level) fprintf( stderr, "wineserver: %s should be between %d and %d\n", variable, min, max );
+    return -1;
+}
+
+void set_server_priority(void)
+{
+    int min, max, priority;
+
+    min = sched_get_priority_min( SCHED_FIFO );
+    max = sched_get_priority_max( SCHED_FIFO );
+    if (min == -1 || max == -1)
+        return;
+
+    /* change the wineserver priority */
+    if ((priority = get_priority( "STAGING_RT_PRIORITY_SERVER", min, max )) != -1)
+    {
+        struct sched_param param;
+        memset( &param, 0, sizeof(param) );
+        param.sched_priority = priority;
+        if (sched_setscheduler( 0, SCHED_FIFO | SCHED_RESET_ON_FORK, &param ) == -1 &&
+            sched_setscheduler( 0, SCHED_FIFO, &param ) == -1)
+        {
+            fprintf( stderr, "wineserver: no realtime permissions to set priority to SCHED_FIFO/%d\n",
+                     param.sched_priority );
+            /* do not bother to check the rest */
+            return;
+        }
+
+        if (debug_level) fprintf( stderr, "wineserver: changed priority to SCHED_FIFO/%d\n",
+                                  param.sched_priority );
+    }
+}
+
+#else
+
+void set_server_priority(void)
+{
+}
+
+#endif
diff --git a/server/thread.h b/server/thread.h
index 0d050d26132..b590657fe41 100644
--- a/server/thread.h
+++ b/server/thread.h
@@ -153,4 +153,6 @@ static inline void set_win32_error( unsigned int err ) { set_error( 0xc0010000 |
 
 static inline thread_id_t get_thread_id( struct thread *thread ) { return thread->id; }
 
+extern void set_server_priority(void);
+
 #endif  /* __WINE_SERVER_THREAD_H */
-- 
2.48.1

