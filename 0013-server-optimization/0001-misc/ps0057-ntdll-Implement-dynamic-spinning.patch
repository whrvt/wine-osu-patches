From: William Horvath <william@horvath.blog>
Date: Sat, 7 Dec 2024 16:59:04 -0800
Subject: [PATCH v2] ntdll: Implement dynamic spinning.

Original by Jangwoon Kim: https://list.winehq.org/mailman3/hyperkitty/list/wine-devel@winehq.org/thread/K7KUZUHQQ43AA2M7SZOQWY3W5G45QCCY/#K7KUZUHQQ43AA2M7SZOQWY3W5G45QCCY

Previously, InitializeCriticalSectionEx with
RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN worked as semi-stub.

This patch implements dynamic spinning.
Specifically, 32th bit from the right (starting with zero index)
indicates whether it is dynamically spinning critical section.

v2: Enable dynamic spinning by default on Windows >= 8, which seems to be what Windows does
     (https://stackoverflow.com/questions/54765280/windows-critical-section-how-to-disable-spinning-completely)
     - Default spincount to 8 if unspecified, it will dynamically adjust pretty quickly
     - 4096 seems to be used by Windows (https://learn.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-initializecriticalsectionandspincount),
       so that should be a safe maximum

Co-authored-by: Jangwoong Kim <6812skiii@gmail.com>
---
 dlls/ntdll/sync.c | 54 ++++++++++++++++++++++++++++++++++++++++-------
 1 file changed, 46 insertions(+), 8 deletions(-)

diff --git a/dlls/ntdll/sync.c b/dlls/ntdll/sync.c
index 11111111111..11111111111 100644
--- a/dlls/ntdll/sync.c
+++ b/dlls/ntdll/sync.c
@@ -42,6 +42,13 @@
 WINE_DEFAULT_DEBUG_CHANNEL(sync);
 WINE_DECLARE_DEBUG_CHANNEL(relay);
 
+#define IS_DYNAMIC_SPIN crit->SpinCount >> 31 == 1 ? TRUE : FALSE
+#define MAX_ADAPTIVE_SPIN_COUNT 4096
+#define DEFAULT_ADAPTIVE_SPIN_COUNT 8
+#ifndef min
+#define min(a,b) (((a) < (b)) ? (a) : (b))
+#endif
+
 static const char *debugstr_timeout( const LARGE_INTEGER *timeout )
 {
     if (!timeout) return "(infinite)";
@@ -220,7 +227,11 @@ NTSTATUS WINAPI RtlInitializeCriticalSectionAndSpinCount( RTL_CRITICAL_SECTION *
  */
 NTSTATUS WINAPI RtlInitializeCriticalSectionEx( RTL_CRITICAL_SECTION *crit, ULONG spincount, ULONG flags )
 {
-    if (flags & (RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN|RTL_CRITICAL_SECTION_FLAG_STATIC_INIT))
+    if (NtCurrentTeb()->Peb->OSMajorVersion > 6 ||
+            (NtCurrentTeb()->Peb->OSMajorVersion == 6 && NtCurrentTeb()->Peb->OSMinorVersion >= 2))
+        flags |= RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN;
+
+    if (flags & RTL_CRITICAL_SECTION_FLAG_STATIC_INIT)
         FIXME("(%p,%lu,0x%08lx) semi-stub\n", crit, spincount, flags);
 
     /* FIXME: if RTL_CRITICAL_SECTION_FLAG_STATIC_INIT is given, we should use
@@ -250,8 +261,15 @@ NTSTATUS WINAPI RtlInitializeCriticalSectionEx( RTL_CRITICAL_SECTION *crit, ULON
     crit->RecursionCount = 0;
     crit->OwningThread   = 0;
     crit->LockSemaphore  = 0;
+    spincount = spincount & ~0x80000000;
     if (NtCurrentTeb()->Peb->NumberOfProcessors <= 1) spincount = 0;
-    crit->SpinCount = spincount & ~0x80000000;
+    else if (flags & RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN)
+    {
+        spincount = min(spincount == 0 ? DEFAULT_ADAPTIVE_SPIN_COUNT : spincount, MAX_ADAPTIVE_SPIN_COUNT);
+        /* 31th bit (from right starting with 0) indicates whether it is dynamically spinning CS */
+        spincount |= ((ULONG)1 << 31);
+    }
+    crit->SpinCount = spincount;
     return STATUS_SUCCESS;
 }
 
@@ -353,19 +371,39 @@ NTSTATUS WINAPI RtlpUnWaitCriticalSection( RTL_CRITICAL_SECTION *crit )
  */
 NTSTATUS WINAPI RtlEnterCriticalSection( RTL_CRITICAL_SECTION *crit )
 {
-    if (crit->SpinCount)
+    if (crit->SpinCount & ~0x80000000)
     {
         ULONG count;
 
         if (RtlTryEnterCriticalSection( crit )) return STATUS_SUCCESS;
-        for (count = crit->SpinCount; count > 0; count--)
+        if (IS_DYNAMIC_SPIN)
         {
-            if (crit->LockCount > 0) break;  /* more than one waiter, don't bother spinning */
-            if (crit->LockCount == -1)       /* try again */
+            ULONG max_count = min(MAX_ADAPTIVE_SPIN_COUNT, (crit->SpinCount & ~0x80000000) * 2);
+            for (count = 0; count <= max_count; count++)
             {
-                if (InterlockedCompareExchange( &crit->LockCount, 0, -1 ) == -1) goto done;
+                if (crit->LockCount == -1)
+                {
+                    if (InterlockedCompareExchange( &crit->LockCount, 0, -1 ) == -1)
+                    {
+                        crit->SpinCount += ((LONG)count - (LONG)(crit->SpinCount & ~0x80000000)) / 10;
+                        goto done;
+                    }
+                }
+                YieldProcessor();
+            }
+            crit->SpinCount += ((LONG)count - (LONG)(crit->SpinCount & ~0x80000000)) / 10;
+        }
+        else
+        {
+            for (count = (crit->SpinCount & ~0x80000000); count > 0; count--)
+            {
+                if (crit->LockCount > 0) break;  /* more than one waiter, don't bother spinning */
+                if (crit->LockCount == -1)       /* try again */
+                {
+                    if (InterlockedCompareExchange( &crit->LockCount, 0, -1 ) == -1) goto done;
+                }
+                YieldProcessor();
             }
-            YieldProcessor();
         }
     }
 
-- 
0.0.0

