From e269a27ce64b7d0650698fcf6ea064678d94622a Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Sat, 4 Jan 2025 18:07:18 -0800
Subject: [PATCH] various: try barely yielding, see what happens

do some other random bullshit along the way

"sched_yield in practice is also a wet noodle compared to SwitchToThread"
 - Anonymous, 2023
---
 dlls/kernelbase/thread.c |  6 +++++-
 dlls/ntdll/unix/server.c |  2 +-
 dlls/ntdll/unix/sync.c   | 21 ++++-----------------
 dlls/win32u/message.c    |  4 ++--
 dlls/wow64/sync.c        |  4 +++-
 5 files changed, 15 insertions(+), 22 deletions(-)

diff --git a/dlls/kernelbase/thread.c b/dlls/kernelbase/thread.c
index 12e1777262a..22658c1ac77 100644
--- a/dlls/kernelbase/thread.c
+++ b/dlls/kernelbase/thread.c
@@ -638,7 +638,11 @@ DWORD WINAPI DECLSPEC_HOTPATCH SuspendThread( HANDLE thread )
  */
 BOOL WINAPI DECLSPEC_HOTPATCH SwitchToThread(void)
 {
-    return (NtYieldExecution() != STATUS_NO_YIELD_PERFORMED);
+    static BOOL flushed;
+    if (flushed ^= TRUE)
+        NtFlushProcessWriteBuffers();
+
+    return flushed;
 }
 
 
diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
index 6fab7780f04..d133bff8fa9 100644
--- a/dlls/ntdll/unix/server.c
+++ b/dlls/ntdll/unix/server.c
@@ -814,7 +814,7 @@ unsigned int server_wait( const union select_op *select_op, data_size_t size, UI
     /* A test on Windows 2000 shows that Windows always yields during
        a wait, but a wait that is hit by an event gets a priority
        boost as well.  This seems to model that behavior the closest.  */
-    if (ret == STATUS_TIMEOUT) NtYieldExecution();
+    if (ret == STATUS_TIMEOUT) { YieldProcessor(); sched_yield(); }
     return ret;
 }
 
diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index 05109e77be9..0b30736e3d9 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -2733,22 +2733,9 @@ NTSTATUS WINAPI NtSignalAndWaitForSingleObject( HANDLE signal, HANDLE wait,
  */
 NTSTATUS WINAPI NtYieldExecution(void)
 {
-#ifdef HAVE_SCHED_YIELD
-#ifdef RUSAGE_THREAD
-    struct rusage u1, u2;
-    int ret;
-
-    ret = getrusage( RUSAGE_THREAD, &u1 );
-#endif
-    sched_yield();
-#ifdef RUSAGE_THREAD
-    if (!ret) ret = getrusage( RUSAGE_THREAD, &u2 );
-    if (!ret && u1.ru_nvcsw == u2.ru_nvcsw && u1.ru_nivcsw == u2.ru_nivcsw) return STATUS_NO_YIELD_PERFORMED;
-#endif
-    return STATUS_SUCCESS;
-#else
-    return STATUS_NO_YIELD_PERFORMED;
-#endif
+    static BOOL toggle;
+    YieldProcessor();
+    return ((toggle ^= TRUE) ? STATUS_SUCCESS : STATUS_NO_YIELD_PERFORMED);
 }
 
 
@@ -2793,7 +2780,7 @@ NTSTATUS WINAPI NtDelayExecution( BOOLEAN alertable, const LARGE_INTEGER *timeou
         }
 
         /* Note that we yield after establishing the desired timeout */
-        NtYieldExecution();
+        YieldProcessor();
         if (!when) return STATUS_SUCCESS;
 
         for (;;)
diff --git a/dlls/win32u/message.c b/dlls/win32u/message.c
index 08e0b9e0e08..665bd717df6 100644
--- a/dlls/win32u/message.c
+++ b/dlls/win32u/message.c
@@ -3121,7 +3121,7 @@ static DWORD wait_message( DWORD count, const HANDLE *handles,
         }
     }
 
-    if (ret == WAIT_TIMEOUT && !count && !timeout) NtYieldExecution();
+    if (ret == WAIT_TIMEOUT && !count && !timeout) sched_yield();
     if (ret == count - 1) get_user_thread_info()->last_driver_time = get_driver_check_time();
 
     KeUserDispatchCallback( &params.dispatch, sizeof(params), &ret_ptr, &ret_len );
@@ -3307,7 +3307,7 @@ BOOL WINAPI NtUserPeekMessage( MSG *msg_out, HWND hwnd, UINT first, UINT last, U
                 params.locks = *(DWORD *)ret_ptr;
                 params.restore = TRUE;
             }
-            NtYieldExecution();
+            sched_yield();
             KeUserDispatchCallback( &params.dispatch, sizeof(params), &ret_ptr, &ret_len );
         }
         return FALSE;
diff --git a/dlls/wow64/sync.c b/dlls/wow64/sync.c
index 54dca19dc1a..b10af4ae514 100644
--- a/dlls/wow64/sync.c
+++ b/dlls/wow64/sync.c
@@ -1748,7 +1748,9 @@ NTSTATUS WINAPI wow64_NtWaitForSingleObject( UINT *args )
  */
 NTSTATUS WINAPI wow64_NtYieldExecution( UINT *args )
 {
-    return NtYieldExecution();
+    static BOOL toggle;
+    YieldProcessor();
+    return ((toggle ^= TRUE) ? STATUS_SUCCESS : STATUS_NO_YIELD_PERFORMED);
 }
 
 
-- 
2.47.1

