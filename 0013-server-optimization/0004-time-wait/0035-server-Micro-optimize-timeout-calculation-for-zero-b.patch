From 2ad2df65da534e1079d47dcd9799f11f29410d54 Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Sat, 1 Mar 2025 04:02:21 -0800
Subject: [PATCH] server: Micro-optimize timeout calculation for zero benefit.

---
 server/fd.c | 59 +++++++++++++++++++++++++++--------------------------
 1 file changed, 30 insertions(+), 29 deletions(-)

diff --git a/server/fd.c b/server/fd.c
index 7f8dfcd9e2a..7ed7766c50d 100644
--- a/server/fd.c
+++ b/server/fd.c
@@ -573,7 +573,7 @@ static int active_users;                    /* current number of active users */
 static int allocated_users;                 /* count of allocated entries in the array */
 static struct fd **freelist;                /* list of free entries in the array */
 
-static int get_next_timeout( struct timespec *ts );
+static struct timespec *get_next_timeout( struct timespec *timeout_ts, int *timeout_ms );
 
 static inline void fd_poll_event( struct fd *fd, int event )
 {
@@ -656,8 +656,8 @@ static int (*epoll_wait_redir)( int, struct epoll_event *, int, int, const struc
 
 static inline void main_loop_epoll(void)
 {
-    int i, ret, timeout;
-    struct timespec ts;
+    int i, ret, timeout_ms;
+    struct timespec ts, *timeout_ts;
     struct epoll_event events[128];
 
     assert( POLLIN == EPOLLIN );
@@ -671,12 +671,12 @@ static inline void main_loop_epoll(void)
 
     while (active_users)
     {
-        timeout = get_next_timeout( &ts );
+        timeout_ts = get_next_timeout( &ts, &timeout_ms );
 
         if (!active_users) break;  /* last user removed by a timeout */
         if (epoll_fd == -1) break;  /* an error occurred with epoll */
 
-        ret = epoll_wait_redir( epoll_fd, events, ARRAY_SIZE( events ), timeout, timeout == -1 ? NULL : &ts );
+        ret = epoll_wait_redir( epoll_fd, events, ARRAY_SIZE( events ), timeout_ms, timeout_ts );
 
         set_current_time();
 
@@ -759,20 +759,20 @@ static inline void remove_epoll_user( struct fd *fd, int user )
 
 static inline void main_loop_epoll(void)
 {
-    int i, ret, timeout;
-    struct timespec ts;
+    int i, ret, timeout_ms;
+    struct timespec ts, *timeout_ts;
     struct kevent events[128];
 
     if (kqueue_fd == -1) return;
 
     while (active_users)
     {
-        timeout = get_next_timeout( &ts );
+        timeout_ts = get_next_timeout( &ts, &timeout_ms );
 
         if (!active_users) break;  /* last user removed by a timeout */
         if (kqueue_fd == -1) break;  /* an error occurred with kqueue */
 
-        ret = kevent( kqueue_fd, NULL, 0, events, ARRAY_SIZE( events ), timeout == -1 ? NULL : &ts );
+        ret = kevent( kqueue_fd, NULL, 0, events, ARRAY_SIZE( events ), timeout_ts );
 
         set_current_time();
 
@@ -854,21 +854,21 @@ static inline void remove_epoll_user( struct fd *fd, int user )
 
 static inline void main_loop_epoll(void)
 {
-    int i, nget, ret, timeout;
-    struct timespec ts;
+    int i, nget, ret, timeout_ms;
+    struct timespec ts, *timeout_ts;
     port_event_t events[128];
 
     if (port_fd == -1) return;
 
     while (active_users)
     {
-        timeout = get_next_timeout( &ts );
+        timeout_ts = get_next_timeout( &ts, &timeout_ms );
         nget = 1;
 
         if (!active_users) break;  /* last user removed by a timeout */
         if (port_fd == -1) break;  /* an error occurred with event completion */
 
-        ret = port_getn( port_fd, events, ARRAY_SIZE( events ), &nget, timeout == -1 ? NULL : &ts );
+        ret = port_getn( port_fd, events, ARRAY_SIZE( events ), &nget, timeout_ts );
 
 	if (ret == -1) break;  /* an error occurred with event completion */
 
@@ -959,11 +959,11 @@ static void remove_poll_user( struct fd *fd, int user )
     active_users--;
 }
 
-/* process pending timeouts and return the time until the next timeout in milliseconds,
- * and full nanosecond precision in the timespec parameter if given */
-static int get_next_timeout( struct timespec *ts )
+/* process pending timeouts and return a timespec with the next timeout if the timespec parameter is specified (NULL otherwise),
+ * and a timeout in milliseconds in the timeout_ms parameter */
+static struct timespec *get_next_timeout( struct timespec *timeout_ts, int *timeout_ms )
 {
-    timeout_t ret = user_shared_data ? user_shared_data_timeout : -1;
+    timeout_t next_timeout = user_shared_data ? user_shared_data_timeout : -1;
 
     if (!list_empty( &abs_timeout_list ) || !list_empty( &rel_timeout_list ))
     {
@@ -1010,7 +1010,7 @@ static int get_next_timeout( struct timespec *ts )
             struct timeout_user *timeout = LIST_ENTRY( ptr, struct timeout_user, entry );
             timeout_t diff = timeout->when - current_time;
             if (diff < 0) diff = 0;
-            if (ret == -1 || diff < ret) ret = diff;
+            if (next_timeout == -1 || diff < next_timeout) next_timeout = diff;
         }
 
         if ((ptr = list_head( &rel_timeout_list )) != NULL)
@@ -1018,23 +1018,24 @@ static int get_next_timeout( struct timespec *ts )
             struct timeout_user *timeout = LIST_ENTRY( ptr, struct timeout_user, entry );
             timeout_t diff = -timeout->when - monotonic_time;
             if (diff < 0) diff = 0;
-            if (ret == -1 || diff < ret) ret = diff;
+            if (next_timeout == -1 || diff < next_timeout) next_timeout = diff;
         }
     }
 
     /* infinite */
-    if (ret == -1) return -1;
+    if ((*timeout_ms = next_timeout) == -1) return NULL;
 
-    if (ts)
-    {
-        ts->tv_sec = ret / TICKS_PER_SEC;
-        ts->tv_nsec = (ret % TICKS_PER_SEC) * 100;
-    }
+    /* rough overhead adjustment */
+    if (next_timeout > 250) next_timeout -= 250;
 
     /* convert to milliseconds, ceil to avoid spinning with 0 timeout */
-    ret = (ret + 9999) / 10000;
-    if (ret > INT_MAX) ret = INT_MAX;
-    return ret;
+    *timeout_ms = MIN((next_timeout + 9999) / 10000, INT_MAX);
+
+    if (!timeout_ts) return NULL;
+
+    timeout_ts->tv_sec = next_timeout / TICKS_PER_SEC;
+    timeout_ts->tv_nsec = (next_timeout % TICKS_PER_SEC) * 100;
+    return timeout_ts;
 }
 
 /* server main poll() loop */
@@ -1050,7 +1051,7 @@ void main_loop(void)
 
     while (active_users)
     {
-        timeout = get_next_timeout( NULL );
+        get_next_timeout( NULL, &timeout );
 
         if (!active_users) break;  /* last user removed by a timeout */
 
-- 
2.48.1

