From c1b749fd4818b6554fa1ed75cd99a0565d30564a Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Thu, 20 Feb 2025 04:00:05 -0800
Subject: [PATCH] server: Rename local scope time variables for clarity.

---
 server/fd.c | 36 ++++++++++++++++++------------------
 1 file changed, 18 insertions(+), 18 deletions(-)

diff --git a/server/fd.c b/server/fd.c
index 711fa46ddea..3834b5ec456 100644
--- a/server/fd.c
+++ b/server/fd.c
@@ -420,11 +420,11 @@ static void atomic_store_long(volatile LONG *ptr, LONG value)
 #endif
 }
 
-static void set_user_shared_data_time(timeout_t current_time, timeout_t monotonic_time)
+static void set_user_shared_data_time(timeout_t lcurrent_time, timeout_t lmonotonic_time)
 {
-    /* current_time += user_shared_data_timeout_ticks / 2;
-       monotonic_time += user_shared_data_timeout_ticks / 2; */
-    timeout_t tick_count = monotonic_time / 10000;
+    /* lcurrent_time += user_shared_data_timeout_ticks / 2;
+       lmonotonic_time += user_shared_data_timeout_ticks / 2; */
+    timeout_t tick_count = monotonic_time / 10000; /* keep this the same between server/client */
     static timeout_t last_timezone_update;
     timeout_t timezone_bias;
     struct tm *tm;
@@ -449,14 +449,14 @@ static void set_user_shared_data_time(timeout_t current_time, timeout_t monotoni
 #endif
 
     if (!(qpc_bypass & SHARED_GLOBAL_FLAGS_QPC_BYPASS_USE_HV_PAGE))
-        qpc_bias = ((monotonic_time * qpc_freq / 10000000) << qpc_shift) - tsc;
+        qpc_bias = ((lmonotonic_time * qpc_freq / 10000000) << qpc_shift) - tsc;
     else
     {
         tsc = multiply_tsc(tsc, hypervisor_shared_data->QpcMultiplier);
-        qpc_bias = monotonic_time - tsc;
+        qpc_bias = lmonotonic_time - tsc;
     }
 
-    if (monotonic_time - last_timezone_update > TICKS_PER_SEC)
+    if (lmonotonic_time - last_timezone_update > TICKS_PER_SEC)
     {
         now = time( NULL );
         tm = gmtime( &now );
@@ -469,16 +469,16 @@ static void set_user_shared_data_time(timeout_t current_time, timeout_t monotoni
         atomic_store_ulong(&user_shared_data->TimeZoneBias.LowPart, timezone_bias);
         atomic_store_long(&user_shared_data->TimeZoneBias.High1Time, timezone_bias >> 32);
 
-        last_timezone_update = monotonic_time;
+        last_timezone_update = lmonotonic_time;
     }
 
-    atomic_store_long(&user_shared_data->SystemTime.High2Time, current_time >> 32);
-    atomic_store_ulong(&user_shared_data->SystemTime.LowPart, current_time);
-    atomic_store_long(&user_shared_data->SystemTime.High1Time, current_time >> 32);
+    atomic_store_long(&user_shared_data->SystemTime.High2Time, lcurrent_time >> 32);
+    atomic_store_ulong(&user_shared_data->SystemTime.LowPart, lcurrent_time);
+    atomic_store_long(&user_shared_data->SystemTime.High1Time, lcurrent_time >> 32);
 
-    atomic_store_long(&user_shared_data->InterruptTime.High2Time, monotonic_time >> 32);
-    atomic_store_ulong(&user_shared_data->InterruptTime.LowPart, monotonic_time);
-    atomic_store_long(&user_shared_data->InterruptTime.High1Time, monotonic_time >> 32);
+    atomic_store_long(&user_shared_data->InterruptTime.High2Time, lmonotonic_time >> 32);
+    atomic_store_ulong(&user_shared_data->InterruptTime.LowPart, lmonotonic_time);
+    atomic_store_long(&user_shared_data->InterruptTime.High1Time, lmonotonic_time >> 32);
 
     atomic_store_long(&user_shared_data->TickCount.High2Time, tick_count >> 32);
     atomic_store_ulong(&user_shared_data->TickCount.LowPart, tick_count);
@@ -490,7 +490,7 @@ static void set_user_shared_data_time(timeout_t current_time, timeout_t monotoni
         user_shared_data->QpcBias = qpc_bias;
 }
 
-static void get_current_time(timeout_t *current_time, timeout_t *monotonic_time)
+static void get_current_time(timeout_t *lcurrent_time, timeout_t *lmonotonic_time)
 {
     static const timeout_t ticks_1601_to_1970 = (timeout_t)86400 * (369 * 365 + 89) * TICKS_PER_SEC;
 
@@ -500,16 +500,16 @@ static void get_current_time(timeout_t *current_time, timeout_t *monotonic_time)
     timeout_t seconds = (timeout_t)ts.tv_sec * TICKS_PER_SEC;
     timeout_t nanoseconds = (timeout_t)((ts.tv_nsec + 50) / 100);
 
-    *current_time = seconds + nanoseconds + ticks_1601_to_1970;
+    *lcurrent_time = seconds + nanoseconds + ticks_1601_to_1970;
 #else
     struct timeval now;
     gettimeofday(&now, NULL);
     timeout_t seconds = (timeout_t)now.tv_sec * TICKS_PER_SEC;
     timeout_t microseconds = (timeout_t)now.tv_usec * 10;
 
-    *current_time = seconds + microseconds + ticks_1601_to_1970;
+    *lcurrent_time = seconds + microseconds + ticks_1601_to_1970;
 #endif
-    *monotonic_time = monotonic_counter();
+    *lmonotonic_time = monotonic_counter();
 }
 
 void set_current_time(void)
-- 
2.48.1

