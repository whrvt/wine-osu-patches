From a3ed85a57cc48a1b106be11dd3e6361d3a4bc4a3 Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Wed, 26 Feb 2025 21:59:07 -0800
Subject: [PATCH] server: Load epoll_pwait2 dynamically if it's not available
 at build time.

An extension to https://gitlab.winehq.org/wine/wine/-/merge_requests/7392 to
enable the use of epoll_pwait2 for e.g. WineBuilder or SLR builds.

---
 server/fd.c   | 48 +++++++++++++++++++++++++++++++++++++++++++-----
 server/file.h |  1 +
 server/main.c |  1 +
 3 files changed, 45 insertions(+), 5 deletions(-)

diff --git a/server/fd.c b/server/fd.c
index 4f994564007..16d48afcd5b 100644
--- a/server/fd.c
+++ b/server/fd.c
@@ -109,6 +109,8 @@
 # define USE_EPOLL
 # ifdef HAVE_EPOLL_PWAIT2
 #  define USE_EPOLL_PWAIT2
+# else
+#  include <dlfcn.h>
 # endif
 #endif /* HAVE_SYS_EPOLL_H && HAVE_EPOLL_CREATE */
 
@@ -641,6 +643,46 @@ static inline void remove_epoll_user( struct fd *fd, int user )
     }
 }
 
+#ifdef USE_EPOLL_PWAIT2
+void init_epoll_pwait2(void)
+{
+}
+#else
+typedef int (*epoll_pwait2_func)( int epfd, struct epoll_event *events, int maxevents, 
+                                  const struct timespec *timeout, const sigset_t *sigmask );
+
+static epoll_pwait2_func wine_epoll_pwait2;
+static int wine_epoll_pwait2_available = -1; /* -1: not checked, 0: not available, 1: available */
+
+void init_epoll_pwait2(void)
+{
+    void *handle;
+
+    if (wine_epoll_pwait2_available != -1) return;
+
+    wine_epoll_pwait2_available = 0;
+
+    handle = dlopen( NULL, RTLD_LAZY );
+    if (!handle) return;
+
+    wine_epoll_pwait2 = (epoll_pwait2_func)dlsym( handle, "epoll_pwait2" );
+    if (wine_epoll_pwait2) wine_epoll_pwait2_available = 1;
+
+    dlclose( handle );
+}
+#endif
+
+static int epoll_wait_wrapper( int epoll_fd, struct epoll_event *events, int maxevents,
+                               int timeout, const struct timespec *ts )
+{
+#ifdef USE_EPOLL_PWAIT2
+    return epoll_pwait2( epoll_fd, events, maxevents, ts, NULL );
+#else
+    if (wine_epoll_pwait2_available) return wine_epoll_pwait2( epoll_fd, events, maxevents, ts, NULL );
+    else return epoll_wait( epoll_fd, events, maxevents, timeout );
+#endif
+}
+
 static inline void main_loop_epoll(void)
 {
     int i, ret, timeout;
@@ -661,11 +703,7 @@ static inline void main_loop_epoll(void)
         if (!active_users) break;  /* last user removed by a timeout */
         if (epoll_fd == -1) break;  /* an error occurred with epoll */
 
-#ifdef USE_EPOLL_PWAIT2
-        ret = epoll_pwait2( epoll_fd, events, ARRAY_SIZE( events ), timeout == -1 ? NULL : &ts, NULL );
-#else
-        ret = epoll_wait( epoll_fd, events, ARRAY_SIZE( events ), timeout );
-#endif
+        ret = epoll_wait_wrapper( epoll_fd, events, ARRAY_SIZE( events ), timeout, timeout == -1 ? NULL : &ts );
 
         set_current_time();
 
diff --git a/server/file.h b/server/file.h
index 381619f99f4..a09bc890b5f 100644
--- a/server/file.h
+++ b/server/file.h
@@ -169,6 +169,7 @@ extern void set_current_time( void );
 extern struct timeout_user *add_timeout_user( timeout_t when, timeout_callback func, void *private );
 extern void remove_timeout_user( struct timeout_user *user );
 extern const char *get_timeout_str( timeout_t timeout );
+extern void init_epoll_pwait2( void );
 
 /* file functions */
 
diff --git a/server/main.c b/server/main.c
index 194a9b4bc71..2d216a30117 100644
--- a/server/main.c
+++ b/server/main.c
@@ -244,6 +244,7 @@ int main( int argc, char *argv[] )
     }
 
     if (debug_level) fprintf( stderr, "wineserver: starting (pid=%ld)\n", (long) getpid() );
+    init_epoll_pwait2();
     set_current_time();
     init_scheduler();
     init_signals();
-- 
2.48.1

