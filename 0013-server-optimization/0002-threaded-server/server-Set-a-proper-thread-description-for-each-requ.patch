From ae28b0be95145cd7fa3471c338a4cf5c1fd94932 Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Thu, 19 Sep 2024 11:39:32 -0700
Subject: [PATCH] server: Set each wineserver thread's description also when
 thread->desc is set.

---
 server/thread.c | 77 +++++++++++++++++++++++++++++++++++++++++++
 server/thread.h | 87 ++++++++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 163 insertions(+), 1 deletion(-)

diff --git a/server/thread.c b/server/thread.c
index edd65ae3a68..de6b02a19d4 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -1077,6 +1077,79 @@ int set_thread_priority( struct thread* thread, int priority_class, int priority
     return 0; /* ignore errors for now */
 }
 
+#define MAX_THREAD_NAME_LENGTH 16
+#define MAX_RETRIES 5
+#define RETRY_DELAY_US 1000
+
+static void set_shm_thread_name(const WCHAR *desc, size_t desc_len)
+{
+    if (!desc || desc_len == 0 || desc_len > 1024)
+        return;
+
+    char converted_name[MAX_THREAD_NAME_LENGTH];
+    int conversion_result = __utf8_wcstombs(converted_name, sizeof(converted_name) - 1, desc, desc_len);
+
+    if (conversion_result != STATUS_SUCCESS && conversion_result != STATUS_BUFFER_TOO_SMALL)
+        return;
+
+    converted_name[sizeof(converted_name) - 1] = '\0';
+
+    /* remove any partial UTF-8 character at the end */
+    size_t i = strnlen(converted_name, sizeof(converted_name) - 1);
+    while (i > 0 && (converted_name[i - 1] & 0xC0) == 0x80)
+        i--;
+    converted_name[i] = '\0';
+
+    /* name empty after conversion */
+    if (converted_name[0] == '\0')
+        return;
+
+    pid_t tid = gettid();
+
+    if (tid == 0) {
+        if (debug_level)
+            fprintf(stderr, "failed to get thread ID for tid %d\n", tid);
+        return;
+    }
+
+    char path[64];
+    snprintf(path, sizeof(path), "/proc/self/task/%d/comm", tid);
+
+    int retries = 0;
+    while (retries < MAX_RETRIES)
+    {
+        int fd = open(path, O_WRONLY);
+        if (fd != -1)
+        {
+            ssize_t written = write(fd, converted_name, strlen(converted_name));
+            close(fd);
+            
+            if (written > 0)
+            {
+                if (debug_level)
+                    fprintf(stderr, "successfully wrote '%s' to %s for tid %d\n", 
+                            converted_name, path, (unsigned long)tid);
+                return;
+            }
+        }
+
+        if (errno != ENOENT)
+        {
+            if (debug_level)
+                fprintf(stderr, "failed to write '%s' to %s for tid %d: %s\n", 
+                        converted_name, path, tid, strerror(errno));
+            return;
+        }
+
+        usleep(RETRY_DELAY_US);
+        retries++;
+    }
+
+    if (debug_level)
+        fprintf(stderr, "failed to write '%s' to %s for tid %d after %d retries\n", 
+                converted_name, path, tid, MAX_RETRIES);
+}
+
 /* set all information about a thread */
 static void set_thread_info( struct thread *thread,
                              const struct set_thread_info_request *req )
@@ -1114,6 +1187,9 @@ static void set_thread_info( struct thread *thread,
                 free( thread->desc );
                 thread->desc = desc;
                 thread->desc_len = desc_len;
+#ifdef __linux__
+                set_shm_thread_name(thread->desc, thread->desc_len);
+#endif
             }
         }
         else
diff --git a/server/thread.h b/server/thread.h
index 21dfbba321f..7e57d3d2bbb 100644
--- a/server/thread.h
+++ b/server/thread.h
@@ -22,7 +22,8 @@
 #define __WINE_SERVER_THREAD_H
 
 #include "object.h"
-
+#include "ntstatus.h"
+#define WIN32_NO_STATUS
 /* thread structure */
 
 struct process;
@@ -47,6 +48,90 @@ struct inflight_fd
 #define MAX_INFLIGHT_FDS 16  /* max number of fds in flight per thread */
 
 #ifdef __linux__
+
+#define HIGH_SURROGATE_START 0xd800
+#define HIGH_SURROGATE_END   0xdbff
+#define LOW_SURROGATE_START  0xdc00
+#define LOW_SURROGATE_END    0xdfff
+
+#define IS_HIGH_SURROGATE(ch)       ((ch) >= HIGH_SURROGATE_START && (ch) <= HIGH_SURROGATE_END)
+#define IS_LOW_SURROGATE(ch)        ((ch) >= LOW_SURROGATE_START  && (ch) <= LOW_SURROGATE_END)
+#define IS_SURROGATE_PAIR(high,low) (IS_HIGH_SURROGATE(high) && IS_LOW_SURROGATE(low))
+
+/* copied from dlls/ntdll/locale_private.h */
+static inline int __get_utf16( const WCHAR *src, unsigned int srclen, unsigned int *ch )
+{
+    if (IS_HIGH_SURROGATE( src[0] ))
+    {
+        if (srclen <= 1) return 0;
+        if (!IS_LOW_SURROGATE( src[1] )) return 0;
+        *ch = 0x10000 + ((src[0] & 0x3ff) << 10) + (src[1] & 0x3ff);
+        return 2;
+    }
+    if (IS_LOW_SURROGATE( src[0] )) return 0;
+    *ch = src[0];
+    return 1;
+}
+
+/* copied from dlls/ntdll/locale_private.h */
+static inline NTSTATUS __utf8_wcstombs( char *dst, unsigned int dstlen, const WCHAR *src, unsigned int srclen )
+{
+    char *end;
+    unsigned int val;
+    NTSTATUS status = 0;
+
+    for (end = dst + dstlen; srclen; srclen--, src++)
+    {
+        WCHAR ch = *src;
+
+        if (ch < 0x80)  /* 0x00-0x7f: 1 byte */
+        {
+            if (dst > end - 1) break;
+            *dst++ = ch;
+            continue;
+        }
+        if (ch < 0x800)  /* 0x80-0x7ff: 2 bytes */
+        {
+            if (dst > end - 2) break;
+            dst[1] = 0x80 | (ch & 0x3f);
+            ch >>= 6;
+            dst[0] = 0xc0 | ch;
+            dst += 2;
+            continue;
+        }
+        if (!__get_utf16( src, srclen, &val ))
+        {
+            val = 0xfffd;
+            status = STATUS_SOME_NOT_MAPPED;
+        }
+        if (val < 0x10000)  /* 0x800-0xffff: 3 bytes */
+        {
+            if (dst > end - 3) break;
+            dst[2] = 0x80 | (val & 0x3f);
+            val >>= 6;
+            dst[1] = 0x80 | (val & 0x3f);
+            val >>= 6;
+            dst[0] = 0xe0 | val;
+            dst += 3;
+        }
+        else   /* 0x10000-0x10ffff: 4 bytes */
+        {
+            if (dst > end - 4) break;
+            dst[3] = 0x80 | (val & 0x3f);
+            val >>= 6;
+            dst[2] = 0x80 | (val & 0x3f);
+            val >>= 6;
+            dst[1] = 0x80 | (val & 0x3f);
+            val >>= 6;
+            dst[0] = 0xf0 | val;
+            dst += 4;
+            src++;
+            srclen--;
+        }
+    }
+    if (srclen) status = STATUS_BUFFER_TOO_SMALL;
+    return status;
+}
 struct request_shm
 {
     int futex; /* signaling futex */
-- 
2.46.1

