From ee5d96af5e16ce9e0e609a4502d7d1eb3b6198c8 Mon Sep 17 00:00:00 2001
From: Zebediah Figura <z.figura12@gmail.com>
Date: Sun, 2 Sep 2018 13:19:09 -0500
Subject: [PATCH 0516/1533] ntdll, server: Implement alertable waits.

---
 dlls/ntdll/unix/fsync.c        | 107 +++++++++++++++++++++++++++++----
 dlls/ntdll/unix/unix_private.h |   1 +
 dlls/ntdll/unix/virtual.c      |   1 +
 server/fsync.c                 |  33 ++++++----
 server/fsync.h                 |   2 +
 server/protocol.def            |   5 ++
 server/thread.c                |  10 +++
 server/thread.h                |   1 +
 8 files changed, 135 insertions(+), 25 deletions(-)

diff --git a/dlls/ntdll/unix/fsync.c b/dlls/ntdll/unix/fsync.c
index 142e3ee284b..9518f1f0960 100644
--- a/dlls/ntdll/unix/fsync.c
+++ b/dlls/ntdll/unix/fsync.c
@@ -544,20 +544,53 @@ static LONGLONG update_timeout( ULONGLONG end )
     return timeleft;
 }
 
-static NTSTATUS do_single_wait( int *addr, int val, ULONGLONG *end )
+static NTSTATUS do_single_wait( int *addr, int val, ULONGLONG *end, BOOLEAN alertable )
 {
     int ret;
 
-    if (end)
+    if (alertable)
     {
-        LONGLONG timeleft = update_timeout( *end );
-        struct timespec tmo_p;
-        tmo_p.tv_sec = timeleft / (ULONGLONG)TICKSPERSEC;
-        tmo_p.tv_nsec = (timeleft % TICKSPERSEC) * 100;
-        ret = futex_wait( addr, val, &tmo_p );
+        struct event *apc_event = get_shm( ntdll_get_thread_data()->fsync_apc_idx );
+        struct futex_wait_block futexes[2];
+
+        if (__atomic_load_n( &apc_event->signaled, __ATOMIC_SEQ_CST ))
+            return STATUS_USER_APC;
+
+        futexes[0].addr = addr;
+        futexes[0].val = val;
+        futexes[1].addr = &apc_event->signaled;
+        futexes[1].val = 0;
+#if __SIZEOF_POINTER__ == 4
+        futexes[0].pad = futexes[1].pad = 0;
+#endif
+
+        if (end)
+        {
+            LONGLONG timeleft = update_timeout( *end );
+            struct timespec tmo_p;
+            tmo_p.tv_sec = timeleft / (ULONGLONG)TICKSPERSEC;
+            tmo_p.tv_nsec = (timeleft % TICKSPERSEC) * 100;
+            ret = futex_wait_multiple( futexes, 2, &tmo_p );
+        }
+        else
+            ret = futex_wait_multiple( futexes, 2, NULL );
+
+        if (__atomic_load_n( &apc_event->signaled, __ATOMIC_SEQ_CST ))
+            return STATUS_USER_APC;
     }
     else
-        ret = futex_wait( addr, val, NULL );
+    {
+        if (end)
+        {
+            LONGLONG timeleft = update_timeout( *end );
+            struct timespec tmo_p;
+            tmo_p.tv_sec = timeleft / (ULONGLONG)TICKSPERSEC;
+            tmo_p.tv_nsec = (timeleft % TICKSPERSEC) * 100;
+            ret = futex_wait( addr, val, &tmo_p );
+        }
+        else
+            ret = futex_wait( addr, val, NULL );
+    }
 
     if (!ret)
         return 0;
@@ -570,16 +603,30 @@ static NTSTATUS do_single_wait( int *addr, int val, ULONGLONG *end )
 static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
     BOOLEAN wait_any, BOOLEAN alertable, const LARGE_INTEGER *timeout )
 {
-    struct futex_wait_block futexes[MAXIMUM_WAIT_OBJECTS];
+    static const LARGE_INTEGER zero = {0};
+
+    struct futex_wait_block futexes[MAXIMUM_WAIT_OBJECTS + 1];
     struct fsync *objs[MAXIMUM_WAIT_OBJECTS];
     int has_fsync = 0, has_server = 0;
     BOOL msgwait = FALSE;
     int dummy_futex = 0;
     LONGLONG timeleft;
     LARGE_INTEGER now;
+    DWORD waitcount;
     ULONGLONG end;
     int i, ret;
 
+    /* Grab the APC futex if we don't already have it. */
+    if (alertable && !ntdll_get_thread_data()->fsync_apc_idx)
+    {
+        SERVER_START_REQ( get_fsync_apc_idx )
+        {
+            if (!(ret = wine_server_call( req )))
+                ntdll_get_thread_data()->fsync_apc_idx = reply->shm_idx;
+        }
+        SERVER_END_REQ;
+    }
+
     NtQuerySystemTime( &now );
     if (timeout)
     {
@@ -618,6 +665,8 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
 
         if (msgwait)
             TRACE(" or driver events");
+        if (alertable)
+            TRACE(", alertable");
 
         if (!timeout)
             TRACE(", timeout = INFINITE.\n");
@@ -731,6 +780,21 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
 #endif
             }
 
+            if (alertable)
+            {
+                struct event *event = get_shm( ntdll_get_thread_data()->fsync_apc_idx );
+                if (__atomic_load_n( &event->signaled, __ATOMIC_SEQ_CST ))
+                    goto userapc;
+
+                futexes[i].addr = &event->signaled;
+                futexes[i].val = 0;
+#if __SIZEOF_POINTER__ == 4
+                futexes[i].pad = 0;
+#endif
+                i++;
+            }
+            waitcount = i;
+
             /* Looks like everything is contended, so wait. */
 
             if (timeout)
@@ -740,10 +804,10 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                 tmo_p.tv_sec = timeleft / (ULONGLONG)TICKSPERSEC;
                 tmo_p.tv_nsec = (timeleft % TICKSPERSEC) * 100;
 
-                ret = futex_wait_multiple( futexes, count, &tmo_p );
+                ret = futex_wait_multiple( futexes, waitcount, &tmo_p );
             }
             else
-                ret = futex_wait_multiple( futexes, count, NULL );
+                ret = futex_wait_multiple( futexes, waitcount, NULL );
 
             /* FUTEX_WAIT_MULTIPLE can succeed or return -EINTR, -EAGAIN,
              * -EFAULT/-EACCES, -ETIMEDOUT. In the first three cases we need to
@@ -800,7 +864,7 @@ tryagain:
 
                     while ((current = __atomic_load_n( &mutex->tid, __ATOMIC_SEQ_CST )))
                     {
-                        status = do_single_wait( &mutex->tid, current, timeout ? &end : NULL );
+                        status = do_single_wait( &mutex->tid, current, timeout ? &end : NULL, alertable );
                         if (status != STATUS_PENDING)
                             break;
                     }
@@ -812,7 +876,7 @@ tryagain:
 
                     while (!__atomic_load_n( &event->signaled, __ATOMIC_SEQ_CST ))
                     {
-                        status = do_single_wait( &event->signaled, 0, timeout ? &end : NULL );
+                        status = do_single_wait( &event->signaled, 0, timeout ? &end : NULL, alertable );
                         if (status != STATUS_PENDING)
                             break;
                     }
@@ -823,6 +887,8 @@ tryagain:
                     TRACE("Wait timed out.\n");
                     return status;
                 }
+                else if (status == STATUS_USER_APC)
+                    goto userapc;
             }
 
             /* If we got here and we haven't timed out, that means all of the
@@ -931,6 +997,21 @@ tooslow:
             }
         } /* while (1) */
     } /* else (wait-all) */
+
+    assert(0);  /* shouldn't reach here... */
+
+userapc:
+    TRACE("Woken up by user APC.\n");
+
+    /* We have to make a server call anyway to get the APC to execute, so just
+     * delegate down to server_wait(). */
+    ret = server_wait( NULL, 0, SELECT_INTERRUPTIBLE | SELECT_ALERTABLE, &zero );
+
+    /* This can happen if we received a system APC, and the APC fd was woken up
+     * before we got SIGUSR1. poll() doesn't return EINTR in that case. The
+     * right thing to do seems to be to return STATUS_USER_APC anyway. */
+    if (ret == STATUS_TIMEOUT) ret = STATUS_USER_APC;
+    return ret;
 }
 
 /* Like esync, we need to let the server know when we are doing a message wait,
diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index 48bb596df99..0cef1f0d428 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -94,6 +94,7 @@ struct ntdll_thread_data
     void              *cpu_data[16];  /* reserved for CPU-specific data */
     void              *kernel_stack;  /* stack for thread startup and kernel syscalls */
     int                esync_apc_fd;  /* fd to wait on for user APCs */
+    unsigned int       fsync_apc_idx;
     int                request_fd;    /* fd for sending server requests */
     int                reply_fd;      /* fd for receiving server replies */
     int                wait_fd[2];    /* fd for sleeping server requests */
diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
index 2309f936f66..5bcfe79dcd6 100644
--- a/dlls/ntdll/unix/virtual.c
+++ b/dlls/ntdll/unix/virtual.c
@@ -3708,6 +3708,7 @@ static TEB *init_teb( void *ptr, BOOL is_wow )
     teb->StaticUnicodeString.MaximumLength = sizeof(teb->StaticUnicodeBuffer);
     thread_data = (struct ntdll_thread_data *)&teb->GdiTebBatch;
     thread_data->esync_apc_fd = -1;
+    thread_data->fsync_apc_idx = 0;
     thread_data->request_fd = -1;
     thread_data->reply_fd   = -1;
     thread_data->wait_fd[0] = -1;
diff --git a/server/fsync.c b/server/fsync.c
index 73d1873759b..10d8eb74bc3 100644
--- a/server/fsync.c
+++ b/server/fsync.c
@@ -316,31 +316,35 @@ struct fsync_event
     int unused;
 };
 
+void fsync_wake_futex( unsigned int shm_idx )
+{
+    struct fsync_event *event = get_shm( shm_idx );
+
+    if (!__atomic_exchange_n( &event->signaled, 1, __ATOMIC_SEQ_CST ))
+        futex_wake( &event->signaled, INT_MAX );
+}
+
 void fsync_wake_up( struct object *obj )
 {
-    struct fsync_event *event;
     enum fsync_type type;
 
     if (obj->ops->get_fsync_idx)
-    {
-        event = get_shm( obj->ops->get_fsync_idx( obj, &type ) );
+        fsync_wake_futex( obj->ops->get_fsync_idx( obj, &type ) );
+}
 
-        if (!__atomic_exchange_n( &event->signaled, 1, __ATOMIC_SEQ_CST ))
-            futex_wake( &event->signaled, INT_MAX );
-    }
+void fsync_clear_futex( unsigned int shm_idx )
+{
+    struct fsync_event *event = get_shm( shm_idx );
+
+    __atomic_store_n( &event->signaled, 0, __ATOMIC_SEQ_CST );
 }
 
 void fsync_clear( struct object *obj )
 {
-    struct fsync_event *event;
     enum fsync_type type;
 
     if (obj->ops->get_fsync_idx)
-    {
-        event = get_shm( obj->ops->get_fsync_idx( obj, &type ) );
-
-        __atomic_store_n( &event->signaled, 0, __ATOMIC_SEQ_CST );
-    }
+        fsync_clear_futex( obj->ops->get_fsync_idx( obj, &type ) );
 }
 
 void fsync_set_event( struct fsync *fsync )
@@ -447,3 +451,8 @@ DECL_HANDLER(get_fsync_idx)
 
     release_object( obj );
 }
+
+DECL_HANDLER(get_fsync_apc_idx)
+{
+    reply->shm_idx = current->fsync_apc_idx;
+}
diff --git a/server/fsync.h b/server/fsync.h
index 087d482717b..f6f1a48b31e 100644
--- a/server/fsync.h
+++ b/server/fsync.h
@@ -21,6 +21,8 @@
 extern int do_fsync(void);
 extern void fsync_init(void);
 extern unsigned int fsync_alloc_shm( int low, int high );
+extern void fsync_wake_futex( unsigned int shm_idx );
+extern void fsync_clear_futex( unsigned int shm_idx );
 extern void fsync_wake_up( struct object *obj );
 extern void fsync_clear( struct object *obj );
 
diff --git a/server/protocol.def b/server/protocol.def
index 64734fa0457..916d0b2e2d4 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -4039,3 +4039,8 @@ enum fsync_type
 @REQ(fsync_msgwait)
     int          in_msgwait;    /* are we in a message wait? */
 @END
+
+@REQ(get_fsync_apc_idx)
+@REPLY
+    unsigned int shm_idx;
+@END
diff --git a/server/thread.c b/server/thread.c
index 0ca74e6a7ab..4aaab7c6f54 100644
--- a/server/thread.c
+++ b/server/thread.c
@@ -484,7 +484,10 @@ struct thread *create_thread( int fd, struct process *process, const struct secu
     }
 
     if (do_fsync())
+    {
         thread->fsync_idx = fsync_alloc_shm( 0, 0 );
+        thread->fsync_apc_idx = fsync_alloc_shm( 0, 0 );
+    }
 
     if (do_esync())
     {
@@ -661,6 +664,7 @@ static struct thread_apc *create_apc( struct object *owner, const apc_call_t *ca
         apc->result.type = APC_NONE;
         if (owner) grab_object( owner );
     }
+
     return apc;
 }
 
@@ -1347,6 +1351,9 @@ static int queue_apc( struct process *process, struct thread *thread, struct thr
     {
         wake_thread( thread );
 
+        if (do_fsync() && queue == &thread->user_apc)
+            fsync_wake_futex( thread->fsync_apc_idx );
+
         if (do_esync() && queue == &thread->user_apc)
             esync_wake_fd( thread->esync_apc_fd );
     }
@@ -1397,6 +1404,9 @@ static struct thread_apc *thread_dequeue_apc( struct thread *thread, int system
         list_remove( ptr );
     }
 
+    if (do_fsync() && list_empty( &thread->system_apc ) && list_empty( &thread->user_apc ))
+        fsync_clear_futex( thread->fsync_apc_idx );
+
     if (do_esync() && list_empty( &thread->system_apc ) && list_empty( &thread->user_apc ))
         esync_clear( thread->esync_apc_fd );
 
diff --git a/server/thread.h b/server/thread.h
index ec271f5cab4..041eb000171 100644
--- a/server/thread.h
+++ b/server/thread.h
@@ -57,6 +57,7 @@ struct thread
     int                    esync_fd;      /* esync file descriptor (signalled on exit) */
     int                    esync_apc_fd;  /* esync apc fd (signalled when APCs are present) */
     unsigned int           fsync_idx;
+    unsigned int           fsync_apc_idx;
     unsigned int           system_regs;   /* which system regs have been set */
     struct msg_queue      *queue;         /* message queue */
     struct thread_wait    *wait;          /* current wait condition if sleeping */
-- 
2.45.0

