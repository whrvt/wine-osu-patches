From 49eeda2756010fa7586494157fab48e4fecfc21c Mon Sep 17 00:00:00 2001
From: Zebediah Figura <z.figura12@gmail.com>
Date: Sun, 2 Sep 2018 12:02:39 -0500
Subject: [PATCH 0511/1533] ntdll, server: Implement NtOpenSemaphore().

---
 dlls/ntdll/unix/fsync.c | 40 ++++++++++++++++++++++++++++++++++++++++
 dlls/ntdll/unix/fsync.h |  2 ++
 dlls/ntdll/unix/sync.c  |  3 +++
 server/fsync.c          | 27 +++++++++++++++++++++++++++
 server/protocol.def     | 13 +++++++++++++
 5 files changed, 85 insertions(+)

diff --git a/dlls/ntdll/unix/fsync.c b/dlls/ntdll/unix/fsync.c
index e65abc525ed..81bd29634b1 100644
--- a/dlls/ntdll/unix/fsync.c
+++ b/dlls/ntdll/unix/fsync.c
@@ -312,6 +312,38 @@ static NTSTATUS create_fsync( enum fsync_type type, HANDLE *handle,
     return ret;
 }
 
+static NTSTATUS open_fsync( enum fsync_type type, HANDLE *handle,
+    ACCESS_MASK access, const OBJECT_ATTRIBUTES *attr )
+{
+    NTSTATUS ret;
+    unsigned int shm_idx;
+
+    SERVER_START_REQ( open_fsync )
+    {
+        req->access     = access;
+        req->attributes = attr->Attributes;
+        req->rootdir    = wine_server_obj_handle( attr->RootDirectory );
+        req->type       = type;
+        if (attr->ObjectName)
+            wine_server_add_data( req, attr->ObjectName->Buffer, attr->ObjectName->Length );
+        if (!(ret = wine_server_call( req )))
+        {
+            *handle = wine_server_ptr_handle( reply->handle );
+            type = reply->type;
+            shm_idx = reply->shm_idx;
+        }
+    }
+    SERVER_END_REQ;
+
+    if (!ret)
+    {
+        add_to_list( *handle, type, get_shm( shm_idx ) );
+
+        TRACE("-> handle %p, shm index %u.\n", *handle, shm_idx);
+    }
+    return ret;
+}
+
 void fsync_init(void)
 {
     struct stat st;
@@ -365,6 +397,14 @@ NTSTATUS fsync_create_semaphore( HANDLE *handle, ACCESS_MASK access,
     return create_fsync( FSYNC_SEMAPHORE, handle, access, attr, initial, max );
 }
 
+NTSTATUS fsync_open_semaphore( HANDLE *handle, ACCESS_MASK access,
+    const OBJECT_ATTRIBUTES *attr )
+{
+    TRACE("name %s.\n", debugstr_us(attr->ObjectName));
+
+    return open_fsync( FSYNC_SEMAPHORE, handle, access, attr );
+}
+
 NTSTATUS fsync_release_semaphore( HANDLE handle, ULONG count, ULONG *prev )
 {
     struct fsync *obj;
diff --git a/dlls/ntdll/unix/fsync.h b/dlls/ntdll/unix/fsync.h
index c39c3a14e59..b70851499fe 100644
--- a/dlls/ntdll/unix/fsync.h
+++ b/dlls/ntdll/unix/fsync.h
@@ -25,6 +25,8 @@ extern NTSTATUS fsync_close( HANDLE handle );
 extern NTSTATUS fsync_create_semaphore(HANDLE *handle, ACCESS_MASK access,
     const OBJECT_ATTRIBUTES *attr, LONG initial, LONG max);
 extern NTSTATUS fsync_release_semaphore( HANDLE handle, ULONG count, ULONG *prev );
+extern NTSTATUS fsync_open_semaphore( HANDLE *handle, ACCESS_MASK access,
+    const OBJECT_ATTRIBUTES *attr );
 extern NTSTATUS fsync_create_event( HANDLE *handle, ACCESS_MASK access,
     const OBJECT_ATTRIBUTES *attr, EVENT_TYPE type, BOOLEAN initial );
 extern NTSTATUS fsync_set_event( HANDLE handle, LONG *prev );
diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index cdda6307be9..d8d7656ddc6 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -305,6 +305,9 @@ NTSTATUS WINAPI NtOpenSemaphore( HANDLE *handle, ACCESS_MASK access, const OBJEC
 
     *handle = 0;
 
+    if (do_fsync())
+        return fsync_open_semaphore( handle, access, attr );
+
     if (do_esync())
         return esync_open_semaphore( handle, access, attr );
 
diff --git a/server/fsync.c b/server/fsync.c
index d32d5f9c689..3fbc1734735 100644
--- a/server/fsync.c
+++ b/server/fsync.c
@@ -374,6 +374,33 @@ DECL_HANDLER(create_fsync)
     if (root) release_object( root );
 }
 
+DECL_HANDLER(open_fsync)
+{
+    struct unicode_str name = get_req_unicode_str();
+
+    reply->handle = open_object( current->process, req->rootdir, req->access,
+                                 &fsync_ops, &name, req->attributes );
+
+    if (reply->handle)
+    {
+        struct fsync *fsync;
+
+        if (!(fsync = (struct fsync *)get_handle_obj( current->process, reply->handle,
+                                                      0, &fsync_ops )))
+            return;
+
+        if (!type_matches( req->type, fsync->type ))
+        {
+            set_error( STATUS_OBJECT_TYPE_MISMATCH );
+            release_object( fsync );
+            return;
+        }
+
+        reply->type = fsync->type;
+        reply->shm_idx = fsync->shm_idx;
+        release_object( fsync );
+    }
+}
 
 /* Retrieve the index of a shm section which will be signaled by the server. */
 DECL_HANDLER(get_fsync_idx)
diff --git a/server/protocol.def b/server/protocol.def
index 2b9f3bd1333..64734fa0457 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -4015,6 +4015,19 @@ enum fsync_type
     unsigned int shm_idx;       /* this object's index into the shm section */
 @END
 
+/* Open an fsync object */
+@REQ(open_fsync)
+    unsigned int access;        /* wanted access rights */
+    unsigned int attributes;    /* object attributes */
+    obj_handle_t rootdir;       /* root directory */
+    int          type;          /* type of fsync object */
+    VARARG(name,unicode_str);   /* object name */
+@REPLY
+    obj_handle_t handle;        /* handle to the event */
+    int          type;          /* type of fsync object */
+    unsigned int shm_idx;       /* this object's index into the shm section */
+@END
+
 /* Retrieve the shm index for an object. */
 @REQ(get_fsync_idx)
     obj_handle_t handle;        /* handle to the object */
-- 
2.45.0

